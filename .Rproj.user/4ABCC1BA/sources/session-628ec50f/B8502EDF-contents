---
title: "test_Topic 3_non synchronized A549"
author: "Johannes Schadt, Anastasia Möller, Sylviane Verschaeve, Tine Limberg"
date: "2023-05-24"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Proteome-wide Screen for RNA-dependent Proteins:

## *non-synchronized A549 cells*

Zum PDF exportieren:

```{r}
tinytex::install_tinytex()
```

Loading the data:

```{r}
MS_Table <- read.csv('RDeep_A549_NS.csv', header=TRUE, row.names=1, sep = ",")
View(MS_Table)
```

## 1. Preparing data for analysis

#### 0.1 Data description

```{r}
dim(MS_Table)
head(rownames(MS_Table))
head(colnames(MS_Table))
```

#### 1.1 Check for missing values

```{r}
sum(apply(MS_Table, 1, anyNA)) == 0
sum(is.na(MS_Table)) == 0
```

#### 1.2 Check data format

```{r}
MS_Table = apply(MS_Table,2,as.numeric)
sum(apply(MS_Table, 1, is.numeric)) == nrow(MS_Table)
```

#### 1.3 Deleting rows with only zeros

```{r}
min(MS_Table)
sum(apply(MS_Table,1,sum)==0)
```

-\> da die Summe der Zeileneinträge keines Proteins 0 entspricht, wurde ein Dataframe aus False erstellt. Einträge ausschließlich False, werden durch die sum Funktion als 0 aufaddiert.

#### 1.4.1 Reordering columns

```{r}
MS_Table_reordered <- MS_Table[, c(
  paste0("Fraction", 1:25, "_Ctrl_Rep1"),
  paste0("Fraction", 1:25, "_Ctrl_Rep2"),
  paste0("Fraction", 1:25, "_Ctrl_Rep3"),
  paste0("Fraction", 1:25, "_RNase_Rep1"),
  paste0("Fraction", 1:25, "_RNase_Rep2"),
  paste0("Fraction", 1:25, "_RNase_Rep3")
)]

#View(MS_Table_reordered)
sum(apply(MS_Table_reordered, 2, is.numeric)) == ncol(MS_Table)
```

#### 1.4.2 Separate Ctrl and RNase

```{r}
MS_Table_Ctrl <-MS_Table_reordered[,1:75]
#View(MS_Table_Ctrl)
MS_Table_RNase <-MS_Table_reordered[,76:150]
#View(MS_Table_RNase)
```

## 2. Scale and Reduce Dataset

#### 2.1 Normalization (mean value methode)

For the normalization each replicate has to be separated, therefore we design 6 separate dataframes.

```{r}
MS_Table_Ctrl_rep1 <-MS_Table_reordered[,1:25]
MS_Table_Ctrl_rep2 <-MS_Table_reordered[,26:50]
MS_Table_Ctrl_rep3 <-MS_Table_reordered[,51:75]
MS_Table_RNase_rep1 <-MS_Table_reordered[,76:100]
MS_Table_RNase_rep2 <-MS_Table_reordered[,101:125]
MS_Table_RNase_rep3 <-MS_Table_reordered[,126:150]
```

For the normalization each replicate has to be separated, therefore we design 6 separate dataframes.

On them we apply separately the mean value methode.

```{r}
#rowMeans(MS_Table_Ctrl_rep1)
#apply(MS_Table_Ctrl_rep1,1,sd)

MS_Table_Ctrl_rep1_normalized <- apply(t(MS_Table_Ctrl_rep1),1, function(x)(x - mean(x)) / sd(x))

View(MS_Table_Ctrl_rep1_normalized)
```

Another idea to apply the mean value method on each row of every dataframe. All values below 0 are set back to 0.

```{r}
# MS_Table_Ctrl_rep1

MS_Table_Ctrl_rep1_normalized <- t(apply(MS_Table_Ctrl_rep1, 1, function(x) {
  normalized <- x - mean(x)
  normalized[normalized < 0] <- 0
  return(normalized)
}))

# View(MS_Table_Ctrl_rep1_normalized)
# MS_Table_Ctrl_rep2

MS_Table_Ctrl_rep2_normalized <- t(apply(MS_Table_Ctrl_rep2, 1, function(x) {
  normalized <- x - mean(x)
  normalized[normalized < 0] <- 0
  return(normalized)
}))

# MS_Table_Ctrl_rep3

MS_Table_Ctrl_rep3_normalized <- t(apply(MS_Table_Ctrl_rep3, 1, function(x) {
  normalized <- x - mean(x)
  normalized[normalized < 0] <- 0
  return(normalized)
}))

# MS_Table_RNase_rep1

MS_Table_RNase_rep1_normalized <- t(apply(MS_Table_RNase_rep1, 1, function(x) {
  normalized <- x - mean(x)
  normalized[normalized < 0] <- 0
  return(normalized)
}))

# MS_Table_RNase_rep2

MS_Table_RNase_rep2_normalized <- t(apply(MS_Table_RNase_rep2, 1, function(x) {
  normalized <- x - mean(x)
  normalized[normalized < 0] <- 0
  return(normalized)
}))

# MS_Table_RNase_rep3

MS_Table_RNase_rep3_normalized <- t(apply(MS_Table_RNase_rep3, 1, function(x) {
  normalized <- x - mean(x)
  normalized[normalized < 0] <- 0
  return(normalized)
}))
```

\<\<\<\<\<\<\< Updated upstream

An idea to check the reproducibility

```{r}
num_rows <- nrow(MS_Table_Ctrl_rep1)

# create vector

correlations <- numeric(num_rows)
for (i in range[1:num_rows]) {

# select row i from MS_Table_Ctrl_rep1 and MS_Table_Ctrl_rep2

row1 <- MS_Table_Ctrl_rep1[i, ] 
row2 <- MS_Table_Ctrl_rep2[i, ]

correlation <- cor(row1, row2, method = "pearson")
correlations[i] <- correlation
}

# show result

correlations

#Achtung: funktioniert nicht, aber ich weiß nicht warum Fehlermeldung auftritt

```

=======

\- Hintergrundrauschen

\- z-transformation benötigt alle 3 replicate, da sd ()

\- Reproducibility ohne normalisierung (pearson!!)

\- RBP und RNA dependent proteins!!

\>\>\>\>\>\>\> Stashed changes

```{r}
ctrl_z_transformed = t(scale(t(MS_Table_Ctrl)))
RNase_z_transformed = t(scale(t(MS_Table_RNase)))

ctrl1 = ctrl_z_transformed[,1:25]
ctrl2 = ctrl_z_transformed[,26:50]
ctrl3 = ctrl_z_transformed[,51:75]

RNase1 = RNase_z_transformed[,1:25]
RNase2 = RNase_z_transformed[,26:50]
RNase3 = RNase_z_transformed[,51:75]

ctrl_mean = (ctrl1 + ctrl2 + ctrl3)/3
ctrl_rowsums = rowSums(ctrl_mean)
ctrl_mean_normalized = sweep(ctrl_mean, 1, ctrl_rowsums, "/")
View(ctrl_mean)
RNase_mean = (RNase1 + RNase2 + RNase3)/3

View(ctrl1)

test = RNase_mean-ctrl_mean
a = prcomp(test)
w = umap(a$x, search_k = 4)
```
