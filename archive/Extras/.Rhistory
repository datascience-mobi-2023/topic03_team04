}
rownames(predictions_mvm_rdeep) <- rownames(rnase.mvm[2501:3074, ])
print(summary(model_mvm_all_2))
# View(predictions_mvm_rdeep)
x <- train_mvm_2$Korrelation_2
y <- train_mvm_2$Shift_2
plot(x, y, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(x), max(x)), ylim = c(min(y), max(y)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_mvm_all_2, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
abline(h = - 2.5, col = "green4", lwd = 2)
test_x <- test_mvm_2$Korrelation_2
predicted_y <- predict(model_mvm_all_2, newdata = test_mvm_2)
points(test_x, predicted_y, col = "lightblue", pch = 16, cex = 0.9)
legend("topleft", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
shift.amount.plot = abs(data.frame(shift_mvm_global))
train_mvm_plot <- data.frame(Korrelation_plot = correlation.mvm[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
model_mvm_all_plot <- lm(Shift_plot ~ Korrelation_plot, data = train_mvm_plot)
test_mvm_plot <- data.frame(Korrelation_plot = correlation.mvm[2501:3074, ])
predictions_mvm_plot <- as.data.frame(predict(model_mvm_all_plot, newdata = test_mvm_plot))
rownames(predictions_mvm_plot) <- rownames(rnase.mvm[2501:3074, ])
px <- train_mvm_plot$Korrelation_plot
py <- train_mvm_plot$Shift_plot
plot(px, py, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(px), max(px)), ylim = c(min(py), max(py)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_mvm_all_plot, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
test_px <- test_mvm_plot$Korrelation_plot
predicted_py <- predict(model_mvm_all_plot, newdata = test_mvm_plot)
points(test_px, predicted_py, col = "lightblue", pch = 16, cex = 0.9)
legend("topright", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
train_mvm <- data.frame(Korrelation = correlation.mvm[1:2500, ], Shift = shift_mvm[1:2500, ])
model_mvm_all <- lm(Shift ~ Korrelation, data = train_mvm)
test_mvm <- data.frame(Korrelation = correlation.mvm[2501:3074, ])
predictions_mvm <- as.data.frame(predict(model_mvm_all, newdata = test_mvm))
rounded_predictions_mvm_all <- round(predictions_mvm)
rownames(rounded_predictions_mvm_all) <- rownames(rnase.mvm[2501:3074, ])
print(summary(model_mvm_all))
#print(rounded_predictions_mvm_all)
shift.amount = data.frame(shift_mvm_global)
correlation.zt <-as.data.frame(sapply(1:nrow(ctrl.zt), function(i) cor(as.numeric(ctrl.zt[i, ]), as.numeric(rnase.zt[i, ]))))
rownames(correlation.zt) <- rownames(rnase.zt)
train_zt_2 <- data.frame(Korrelation_2 = correlation.zt[1:2500, ], Shift_2 = shift.amount[1:2500, ])
model_zt_all_2 <- lm(Shift_2 ~ Korrelation_2, data = train_zt_2)
test_zt_2 <- data.frame(Korrelation_2 = correlation.zt[2501:3074, ])
predictions_zt_2 <- as.data.frame(predict(model_zt_all_2, newdata = test_zt_2))
predictions_zt_rdeep <- matrix(0, nrow = nrow(predictions_zt_2), ncol = ncol(predictions_zt_2))
for(i in 1:nrow(predictions_zt_2)) {
for(j in 1:ncol(predictions_zt_2)){
if(predictions_zt_2[i,j] > 2) {
predictions_zt_rdeep[i,j] <- 1
}  else if(predictions_zt_2[i,j] < (-2)) {
predictions_zt_rdeep[i,j] <- (-1)
} else {predictions_zt_rdeep[i,j] <- 0
}
}
}
rownames(predictions_zt_rdeep) <- rownames(rnase.zt[2501:3074, ])
# print(summary(model_zt_all_2))
# View(predictions_zt_rdeep)
x <- train_zt_2$Korrelation_2
y <- train_zt_2$Shift_2
plot(x, y, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(x), max(x)), ylim = c(min(y), max(y)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_zt_all_2, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
abline(h = - 2.5, col = "green4", lwd = 2)
test_x <- test_zt_2$Korrelation_2
predicted_y <- predict(model_zt_all_2, newdata = test_zt_2)
points(test_x, predicted_y, col = "lightblue", pch = 16, cex = 0.9)
legend("topleft", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
shift.amount.plot = abs(data.frame(shift_zt_global))
train_zt_plot <- data.frame(Korrelation_plot = correlation.zt[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
model_zt_all_plot <- lm(Shift_plot ~ Korrelation_plot, data = train_zt_plot)
test_zt_plot <- data.frame(Korrelation_plot = correlation.zt[2501:3074, ])
predictions_zt_plot <- as.data.frame(predict(model_zt_all_plot, newdata = test_zt_plot))
rownames(predictions_zt_plot) <- rownames(rnase.zt[2501:3074, ])
px <- train_zt_plot$Korrelation_plot
py <- train_zt_plot$Shift_plot
plot(px, py, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(px), max(px)), ylim = c(min(py), max(py)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_zt_all_plot, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
test_px <- test_zt_plot$Korrelation_plot
predicted_py <- predict(model_zt_all_plot, newdata = test_zt_plot)
points(test_px, predicted_py, col = "lightblue", pch = 16, cex = 0.9)
legend("topright", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
train_zt <- data.frame(Korrelation_zt = correlation.zt[1:2500, ], Shift = shift_zt[1:2500, ])
model_zt_all <- lm(Shift ~ Korrelation_zt, data = train_zt)
test_zt <- data.frame(Korrelation_zt = correlation.zt[2501:3074, ])
predictions_zt <- as.data.frame(predict(model_zt_all, newdata = test_zt))
rounded_predictions_zt_all <- round(predictions_zt)
rownames(rounded_predictions_zt_all) <- rownames(rnase.zt[2501:3074, ])
print(summary(model_zt_all))
#print(rounded_predictions_zt_all)
shift.amount = data.frame(shift_mms_global)
correlation.mms <-as.data.frame( sapply(1:nrow(ctrl.mms), function(i) cor(ctrl.mms[i, ], rnase.mms[i, ])))
rownames(correlation.mms) <- rownames(rnase.mms)
train_mms_2 <- data.frame(Korrelation_2 = correlation.mms[1:2500, ], Shift_2 = shift.amount[1:2500, ])
model_mms_all_2 <- lm(Shift_2 ~ Korrelation_2, data = train_mms_2)
test_mms_2 <- data.frame(Korrelation_2 = correlation.mms[2501:3074, ])
predictions_mms_2 <- as.data.frame(predict(model_mms_all_2, newdata = test_mms_2))
predictions_mms_rdeep <- matrix(0, nrow = nrow(predictions_mms_2), ncol = ncol(predictions_mms_2))
for(i in 1:nrow(predictions_mms_2)) {
for(j in 1:ncol(predictions_mms_2)){
if(predictions_mms_2[i,j] > 2) {
predictions_mms_rdeep[i,j] <- 1
}  else if(predictions_mms_2[i,j] < (-2)) {
predictions_mms_rdeep[i,j] <- (-1)
} else {predictions_mms_rdeep[i,j] <- 0
}
}
}
rownames(predictions_mms_rdeep) <- rownames(rnase.mms[2501:3074, ])
# print(summary(model_mms_all_2))
# View(predictions_mms_rdeep)
x <- train_mms_2$Korrelation_2
y <- train_mms_2$Shift_2
plot(x, y, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(x), max(x)), ylim = c(min(y), max(y)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_mms_all_2, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
abline(h = - 2.5, col = "green4", lwd = 2)
test_x <- test_mms_2$Korrelation_2
predicted_y <- predict(model_mms_all_2, newdata = test_mms_2)
points(test_x, predicted_y, col = "lightblue", pch = 16, cex = 0.9)
legend("topleft", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
shift.amount.plot = abs(data.frame(shift_mms_global))
train_mms_plot <- data.frame(Korrelation_plot = correlation.mvm[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
model_mms_all_plot <- lm(Shift_plot ~ Korrelation_plot, data = train_mms_plot)
test_mms_plot <- data.frame(Korrelation_plot = correlation.mms[2501:3074, ])
predictions_mms_plot <- as.data.frame(predict(model_mms_all_plot, newdata = test_mms_plot))
rownames(predictions_mms_plot) <- rownames(rnase.mms[2501:3074, ])
px <- train_mms_plot$Korrelation_plot
py <- train_mms_plot$Shift_plot
plot(px, py, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(px), max(px)), ylim = c(min(py), max(py)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_mms_all_plot, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
test_px <- test_mms_plot$Korrelation_plot
predicted_py <- predict(model_mms_all_plot, newdata = test_mms_plot)
points(test_px, predicted_py, col = "lightblue", pch = 16, cex = 0.9)
legend("topright", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
train_mms <- data.frame(Korrelation = correlation.mms[1:2500, ], Shift = shift_mms[1:2500, ])
model_mms_all <- lm(Shift ~ Korrelation, data = train_mms)
test_mms <- data.frame(Korrelation = correlation.mms[2501:3074, ])
predictions_mms <- as.data.frame(predict(model_mms_all, newdata = test_mms))
rounded_predictions_mms_all <- round(predictions_mms)
rownames(rounded_predictions_mms_all) <- rownames(rnase.mms[2501:3074, ])
print(summary(model_mms_all))
#print(rounded_predictions_mms_all)
predictions_mms_rdeep_shift <- matrix(0, nrow = nrow(predictions_mms_plot), ncol = ncol(predictions_mms_plot))
for(i in 1:nrow(predictions_mms_plot)) {
for(j in 1:ncol(predictions_mms_plot)){
if(predictions_mms_plot[i,j] > 2) {
predictions_mms_rdeep_shift[i,j] <- 1
} else if (predictions_mms_plot[i,j] < 2) {
predictions_mms_rdeep_shift[i,j] <- 0
}
}
}
rownames(predictions_mms_rdeep_shift) <- rownames(rnase.mms[2501:3074, ])
# predictions_mms_rdeep_shift
predictions_zt_rdeep_shift <- matrix(0, nrow = nrow(predictions_zt_plot), ncol = ncol(predictions_zt_plot))
for(i in 1:nrow(predictions_zt_plot)) {
for(j in 1:ncol(predictions_zt_plot)){
if(predictions_zt_plot[i,j] > 2) {
predictions_zt_rdeep_shift[i,j] <- 1
} else if (predictions_zt_plot[i,j] < 2) {
predictions_zt_rdeep_shift[i,j] <- 0
}
}
}
rownames(predictions_zt_rdeep_shift) <- rownames(rnase.zt[2501:3074, ])
predictions_mvm_rdeep_shift <- matrix(0, nrow = nrow(predictions_mvm_plot), ncol = ncol(predictions_mvm_plot))
for(i in 1:nrow(predictions_mvm_plot)) {
for(j in 1:ncol(predictions_mvm_plot)){
if(predictions_mvm_plot[i,j] > 2) {
predictions_mvm_rdeep_shift[i,j] <- 1
} else if (predictions_mvm_plot[i,j] < 2) {
predictions_mvm_rdeep_shift[i,j] <- 0
}
}
}
rownames(predictions_mvm_rdeep_shift) <- rownames(rnase.mvm[2501:3074, ])
names.rdp.mvm.regression <- rownames(predictions_mvm_rdeep_shift)[which(predictions_mvm_rdeep_shift == 1)]
names.rdp.zt.regression <- rownames(predictions_zt_rdeep_shift)[which(predictions_zt_rdeep_shift == 1)]
names.rdp.mms.regression <- rownames(predictions_mms_rdeep_shift)[which(predictions_mms_rdeep_shift == 1)]
names.rdp.regression <- list(names.rdp.mvm.regression, names.rdp.zt.regression, names.rdp.mms.regression)
number.observed.RBPs.regression <- c(length(names.rdp.mvm.regression), length(names.rdp.zt.regression), length(names.rdp.mms.regression))
names.nrdp.mvm.regression <- rownames(predictions_mvm_rdeep_shift)[which(predictions_mvm_rdeep_shift == 0)]
names.nrdp.zt.regression <- rownames(predictions_zt_rdeep_shift)[which(predictions_zt_rdeep_shift == 0)]
names.nrdp.mms.regression <- rownames(predictions_mms_rdeep_shift)[which(predictions_mms_rdeep_shift == 0)]
names.nrdp.regression <- list(names.nrdp.mvm.regression, names.nrdp.zt.regression, names.nrdp.mms.regression)
number.observed.nonRBPs.regression <- c(length(names.nrdp.mvm.regression), length(names.nrdp.zt.regression), length(names.nrdp.mms.regression))
rdeep <- read.csv('archive/Data for comparison/Rajagopal_R-DeeP.csv', header=TRUE, sep = ";")
#View(rdeep)
# number.observed.RBPs.regression
true.positives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.regression[[z]]) {
if (i %in% rdeep[,1]) {
counter <- counter + 1
}
}
true.positives.regression.shift[z] <- counter
}
false.positives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.regression[[z]]) {
if (!(i %in% rdeep[,1])) {
counter <- counter + 1
}
}
false.positives.regression.shift[z] <- counter
}
#number.observed.nonRBPs.regression
true.negatives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.regression[[z]]) {
if (!(i %in% rdeep[,1])) {
counter <- counter + 1
}
}
true.negatives.regression.shift[z] <- counter
}
false.negatives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.regression[[z]]) {
if (i %in% rdeep[,1]) {
counter <- counter + 1
}
}
false.negatives.regression.shift[z] <- counter
}
# false.negatives.regression.shift
fnr.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fnr.regression.shift[x] <- false.negatives.regression.shift[x]/(false.negatives.regression.shift[x] + true.positives.regression.shift[x])
}
fnr.regression.shift
fpr.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fpr.regression.shift[x] <- false.positives.regression.shift[x]/(false.positives.regression.shift[x]+true.negatives.regression.shift[x])
}
fpr.regression.shift
precision.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.regression.shift[x] <- true.positives.regression.shift[x]/(true.positives.regression.shift[x] + false.positives.regression.shift[x])
}
precision.regression.shift
# the proteins identified as RNA-dependent by our four parameters:
comp.mvm.parameters <- shift_mvm
comp.zt.parameters <- shift_zt
comp.mms.parameters <- shift_mms
rownames(comp.mvm.parameters) = rownames(parameters.mms)
rownames(comp.zt.parameters) = rownames(parameters.mms)
rownames(comp.mms.parameters) = rownames(parameters.mms)
names.rdp.mvm.parameters <- rownames(comp.mvm.parameters)[which(comp.mvm.parameters == 1)]
names.rdp.zt.parameters <- rownames(comp.zt.parameters)[which(comp.zt.parameters == 1)]
names.rdp.mms.parameters <- rownames(comp.mms.parameters)[which(comp.mms.parameters == 1)]
names.rdp.parameters <- list(names.rdp.mvm.parameters, names.rdp.zt.parameters, names.rdp.mms.parameters)
number.observed.RBPs.parameters <- c(length(names.rdp.mvm.parameters), length(names.rdp.zt.parameters), length(names.rdp.mms.parameters))
# the proteins identified as non-RNA-dependent by our four parameters:
names.nrdp.mvm.parameters <- rownames(comp.mvm.parameters)[which(comp.mvm.parameters == 0)]
names.nrdp.zt.parameters <- rownames(comp.zt.parameters)[which(comp.zt.parameters == 0)]
names.nrdp.mms.parameters <- rownames(comp.mms.parameters)[which(comp.mms.parameters == 0)]
names.nrdp.parameters <- list(names.nrdp.mvm.parameters, names.nrdp.zt.parameters, names.nrdp.mms.parameters)
number.observed.non.RBPs.parameters <- c(length(names.nrdp.mvm.parameters), length(names.nrdp.zt.parameters), length(names.nrdp.mms.parameters))
# the proteins identified as RNA-dependent by kmeans-clustering:
comp.mvm.kmeans <- shift.kmeans[[1]]
comp.zt.kmeans <- shift.kmeans[[2]]
comp.mms.kmeans <- shift.kmeans[[3]]
names.rdp.mvm.kmeans <- rownames(comp.mvm.kmeans)[which(comp.mvm.kmeans == 1)]
names.rdp.zt.kmeans <- rownames(comp.zt.kmeans)[which(comp.zt.kmeans == 1)]
names.rdp.mms.kmeans <- rownames(comp.mms.kmeans)[which(comp.mms.kmeans == 1)]
names.rdp.kmeans <- list(names.rdp.mvm.kmeans, names.rdp.zt.kmeans, names.rdp.mms.kmeans)
number.observed.RBPs.kmeans <- c(length(names.rdp.mvm.kmeans), length(names.rdp.zt.kmeans), length(names.rdp.mms.kmeans))
# the proteins identified as non-RNA-dependent by kmeans-clustering:
names.nrdp.mvm.kmeans <- rownames(comp.mvm.kmeans)[which(comp.mvm.kmeans == 0)]
names.nrdp.zt.kmeans <- rownames(comp.zt.kmeans)[which(comp.zt.kmeans == 0)]
names.nrdp.mms.kmeans <- rownames(comp.mms.kmeans)[which(comp.mms.kmeans == 0)]
names.nrdp.kmeans <- list(names.nrdp.mvm.kmeans, names.nrdp.zt.kmeans, names.nrdp.mms.kmeans)
number.observed.non.RBPs.kmeans <- c(length(names.nrdp.mvm.kmeans), length(names.nrdp.zt.kmeans), length(names.nrdp.mms.kmeans))
# the proteins identified as RNA-dependent by the global shift parameter
comp.glob <- shift_named
for(x in 1:3){
for(y in 1:dim(comp.glob)[1]){
if (shift_named[y,x] == "no shift"){
comp.glob[y,x] <- 0
}else{comp.glob[y,x] <- 1}
}
}
names.rdp.mvm.glob <- rownames(as.data.frame(comp.glob[,1]))[which(as.data.frame(comp.glob[,1]) == 1)]
names.rdp.zt.glob <- rownames(as.data.frame(comp.glob[,2]))[which(as.data.frame(comp.glob[,2]) == 1)]
names.rdp.mms.glob <- rownames(as.data.frame(comp.glob[,3]))[which(as.data.frame(comp.glob[,3]) == 1)]
names.rdp.glob <- list(names.rdp.mvm.glob, names.rdp.zt.glob, names.rdp.mms.glob)
number.observed.RBPs.glob <- c(length(names.rdp.mvm.glob), length(names.rdp.zt.glob), length(names.rdp.mms.glob))
print(number.observed.RBPs.glob)
# the proteins identified as non-RNA-dependent by our four parameters:
names.nrdp.mvm.glob <- rownames(as.data.frame(comp.glob[,1]))[which(as.data.frame(comp.glob[,1]) == 0)]
names.nrdp.zt.glob <- rownames(as.data.frame(comp.glob[,2]))[which(as.data.frame(comp.glob[,2]) == 0)]
names.nrdp.mms.glob <- rownames(as.data.frame(comp.glob[,3]))[which(as.data.frame(comp.glob[,3]) == 0)]
names.nrdp.glob <- list(names.nrdp.mvm.glob, names.nrdp.zt.glob, names.nrdp.mms.glob)
number.observed.non.RBPs.glob <- c(length(names.nrdp.mvm.glob), length(names.nrdp.zt.glob), length(names.nrdp.mms.glob))
#Number of correctly assigned (true positives) RBPs with parameters
true.positives.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.parameters[[z]]) {
if (i %in% rdeep[,1]) {
counter <- counter + 1
}
}
true.positives.parameters[z] <- counter
}
#Number of correctly assigned (true positives) RBPs with kmeans
true.positives.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.kmeans[[z]]) {
if (i %in% rdeep[,1]) {
counter <- counter + 1
}
}
true.positives.kmeans[z] <- counter
}
#Number of correctly assigned (true positives) RBPs with global shift
true.positives.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.glob[[z]]) {
if (i %in% rdeep[,1]) {
counter <- counter + 1
}
}
true.positives.glob[z] <- counter
}
# Number of wrongly assigned (false positives) RBPs with parameters
false.positives.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.parameters[[z]]) {
if (!(i %in% rdeep[,1])) {
counter <- counter + 1
}
}
false.positives.parameters[z] <- counter
}
# Number of wrongly assigned (false positives) RBPs with kmeans
false.positives.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.kmeans[[z]]) {
if (!(i %in% rdeep[,1])) {
counter <- counter + 1
}
}
false.positives.kmeans[z] <- counter
}
# Number of wrongly assigned (false positives) RBPs with global shift
false.positives.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.glob[[z]]) {
if (!(i %in% rdeep[,1])) {
counter <- counter + 1
}
}
false.positives.glob[z] <- counter
}
# Number of correctly assigned non-RBPs (true negatives) with parameters
true.negatives.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.parameters[[z]]) {
if (!(i %in% rdeep[,1])) {
counter <- counter + 1
}
}
true.negatives.parameters[z] <- counter
}
# Number of correctly assigned non-RBPs (true negatives) with kmeans
true.negatives.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.kmeans[[z]]) {
if (!(i %in% rdeep[,1])) {
counter <- counter + 1
}
}
true.negatives.kmeans[z] <- counter
}
# Number of correctly assigned non-RBPs (true negatives) with global shift
true.negatives.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.glob[[z]]) {
if (!(i %in% rdeep[,1])) {
counter <- counter + 1
}
}
true.negatives.glob[z] <- counter
}
# Number of wrongly assigned non-RBPs (true negatives) with parameters
false.negatives.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.parameters[[z]]) {
if (i %in% rdeep[,1]) {
counter <- counter + 1
}
}
false.negatives.parameters[z] <- counter
}
#Number of correctly assigned (true positives) RBPs with parameters
false.negatives.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.kmeans[[z]]) {
if (i %in% rdeep[,1]) {
counter <- counter + 1
}
}
false.negatives.kmeans[z] <- counter
}
#Number of correctly assigned (true positives) RBPs with global shift
false.negatives.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.glob[[z]]) {
if (i %in% rdeep[,1]) {
counter <- counter + 1
}
}
false.negatives.glob[z] <- counter
}
fnr.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fnr.parameters[x] <- false.negatives.parameters[x]/(false.negatives.parameters[x] + true.positives.parameters[x])
}
fnr.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fnr.kmeans[x] <- false.negatives.kmeans[x]/(false.negatives.kmeans[x] + true.positives.kmeans[x])
}
fnr.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fnr.glob[x] <- false.negatives.glob[x]/(false.negatives.glob[x] + true.positives.glob[x])
}
fpr.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fpr.parameters[x] <- false.positives.parameters[x]/(false.positives.parameters[x]+true.negatives.parameters[x])
}
fpr.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fpr.kmeans[x] <- false.positives.kmeans[x]/(false.positives.kmeans[x]+true.negatives.kmeans[x])
}
fpr.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fpr.glob[x] <- false.positives.glob[x]/(false.positives.glob[x]+true.negatives.glob[x])
}
precision.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.parameters[x] <- true.positives.parameters[x]/(true.positives.parameters[x] + false.positives.parameters[x])
}
precision.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.kmeans[x] <- true.positives.kmeans[x]/(true.positives.kmeans[x] + false.positives.kmeans[x])
}
precision.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.glob[x] <- true.positives.glob[x]/(true.positives.glob[x] + false.positives.glob[x])
}
non.comparable.mvm.parameters <- rownames(comp.mvm.parameters)[which(!(rownames(comp.mvm.parameters) %in% non.rdeep$Entry_Name) & (!(rownames(comp.mvm.parameters) %in% rownames(rdeep))))]
precision.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.parameters[x] <- true.positives.parameters[x]/(true.positives.parameters[x] + false.positives.parameters[x])
}
precision.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.kmeans[x] <- true.positives.kmeans[x]/(true.positives.kmeans[x] + false.positives.kmeans[x])
}
precision.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.glob[x] <- true.positives.glob[x]/(true.positives.glob[x] + false.positives.glob[x])
}
#for the results of our parameters
summary.numbers.parameters <- rbind(true.positives.parameters, false.positives.parameters, true.negatives.parameters, false.negatives.parameters)
rownames(summary.numbers.parameters) = c("True Positives","False Positives", "True Negatives", "False Negatives")
summary.rates.parameters <- rbind(fnr.parameters , fpr.parameters, precision.parameters)
rownames(summary.rates.parameters) = c("FNR", "FPR", "Precision")
#View(summary.numbers.parameters)
#View(summary.rates.parameters)
#for the results of kmeans
summary.numbers.kmeans <- rbind(true.positives.kmeans, false.positives.kmeans, true.negatives.kmeans, false.negatives.kmeans)
rownames(summary.numbers.kmeans) = c("True Positives","False Positives", "True Negatives", "False Negatives")
summary.rates.kmeans <- rbind(fnr.kmeans , fpr.kmeans, precision.kmeans)
rownames(summary.rates.kmeans) = c("FNR", "FPR", "Precision")
#View(summary.numbers.kmeans)
#View(summary.rates.kmeans)
#for the results of global shift
summary.numbers.glob <- rbind(true.positives.glob, false.positives.glob, true.negatives.glob, false.negatives.glob)
rownames(summary.numbers.glob) = c("True Positives","False Positives", "True Negatives", "False Negatives")
summary.rates.glob <- rbind(fnr.glob , fpr.glob, precision.glob)
rownames(summary.rates.glob) = c("FNR", "FPR", "Precision")
#View(summary.numbers.glob)
#View(summary.rates.glob)
#a data frame that sums it all up
summary.numbers.all <- cbind(summary.numbers.glob, summary.numbers.parameters, summary.numbers.kmeans)
colnames(summary.numbers.all) <- c("global shift mvm", "global shift zt", "global shift mms", "parameters mvm", "parameters zt", "parameters mms", "kmeans mvm", "kmeans zt", "kmeans mms")
summary.rates.all <- cbind(summary.rates.glob, summary.rates.parameters, summary.rates.kmeans)
colnames(summary.rates.all) <- c("global shift mvm", "global shift zt", "global shift mms", "parameters mvm", "parameters zt", "parameters mms", "kmeans mvm", "kmeans zt", "kmeans mms")
View(summary.numbers.all)
View(summary.rates.all)
