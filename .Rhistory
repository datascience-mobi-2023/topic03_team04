#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
gshift <- shift_mvm_global
lshift <- lshift.mvm
knitr::opts_chunk$set(echo = TRUE)
precipitated.zt
length(ctrl.zt)
length(ctrl.zt)
dim(ctrl.zt)
precipitated.zt
precipitated.zt.v <- vector(mode = "numeric", length = length(ctrl.zt))
for (i in 1:dim(ctrl.zt)[1]){
if (i %in% precipitated.zt){
precipitated.zt.v <- 1
}
else {
precipitated.zt.v <- 0
}
}
View(precipitated.zt.v)
precipitated.zt.v
precipitated.zt.v <- vector(mode = "numeric", length = length(ctrl.zt))
View(precipitated.zt.v)
precipitated.zt.v <- vector(mode = "numeric", length = dim(ctrl.zt)[1])
View(precipitated.zt.v)
precipitated.zt
precipitated.zt.v <- vector(mode = "numeric", length = dim(ctrl.zt)[1])
for (i in 1:dim(ctrl.zt)[1]){
if (i %in% precipitated.zt){
precipitated.zt.v <- 1
}
else {
precipitated.zt.v <- 0
}
}
View(precipitated.zt.v)
precipitated.zt.v
1 %in% precipitated.zt
296 %in% precipitated.zt
precipitated.zt
precipitated.zt.v <- vector(mode = "numeric", length = dim(ctrl.zt)[1])
for (i in 1:dim(ctrl.zt)[1]){
if (i %in% precipitated.zt){
precipitated.zt.v[i] <- 1
}
else {
precipitated.zt.v[i] <- 0
}
}
View(precipitated.zt.v)
precipitated.zt.v
which(precipitated.zt.v ==0)
which(precipitated.zt.v == 1)
precipitated.zt
precipitated.zt.v <- vector(mode = "numeric", length = dim(ctrl.zt)[1])
for (i in 1:dim(ctrl.zt)[1]){
if (i %in% precipitated.zt){
precipitated.zt.v[i] <- 1
}
else {
precipitated.zt.v[i] <- 0
}
}
which(precipitated.zt.v == 1)
precipitated.mvm
precipitated.mvm.v <- vector(mode = "numeric", length = dim(ctrl.mvm)[1])
for (i in 1:dim(ctrl.mvm)[1]){
if (i %in% precipitated.mvm){
precipitated.mvm.v[i] <- 1
}
else {
precipitated.mvm.v[i] <- 0
}
}
precipitated.mms
precipitated.mms.v <- vector(mode = "numeric", length = dim(ctrl.mms)[1])
for (i in 1:dim(ctrl.mms)[1]){
if (i %in% precipitated.mms){
precipitated.mms.v[i] <- 1
}
else {
precipitated.mms.v[i] <- 0
}
}
n = 2
shift_mvm_global <- globalpeak.rnase.mvm - globalpeak.ctrl.mvm
shift_mvm_named <- shift_mvm_global
for (i in 1:nrow(rnase.mvm)) {
if (i %in% precipitated.mvm) {shift_mvm_named[i] <- "precipitated"}
else if (shift_mvm_global [i] < (-n)){shift_mvm_named [i] <- "right shift"}
else if (shift_mvm_global [i] > n){shift_mvm_named [i] <- "left shift"}
else (shift_mvm_named [i] <- "no shift")
}
# View(shift_mvm_named)
#mms
globalpeak.ctrl.mms <- readRDS("Non_synchronized_A549_globalpeak.ctrl.mms")
globalpeak.value.ctrl.mms <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.mms")
globalpeak.rnase.mms <- readRDS("Non_synchronized_A549_globalpeak.rnase.mms")
globalpeak.value.rnase.mms <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.mms")
localpeaks.ctrl.mms <- readRDS("Non_synchronized_A549_localpeaks.ctrl.mms")
localpeaks.values.ctrl.mms <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.mms")
localpeaks.rnase.mms <- readRDS("Non_synchronized_A549_localpeaks.rnase.mms")
localpeaks.values.rnase.mms <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.mms")
fraction1.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mms")
fraction25.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mms")
fraction1.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mms")
fraction25.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mms")
precipitated.mms <- readRDS("Non_synchronized_A549_precipitated.mms")
n = 2
shift_mvm_global <- globalpeak.rnase.mvm - globalpeak.ctrl.mvm
shift_mvm_named <- shift_mvm_global
for (i in 1:nrow(rnase.mvm)) {
if (i %in% precipitated.mvm) {shift_mvm_named[i] <- "precipitated"}
else if (shift_mvm_global [i] < (-n)){shift_mvm_named [i] <- "right shift"}
else if (shift_mvm_global [i] > n){shift_mvm_named [i] <- "left shift"}
else (shift_mvm_named [i] <- "no shift")
}
# View(shift_mvm_named)
precipitated.mvm
precipitated.mvm.v <- vector(mode = "numeric", length = dim(ctrl.mvm)[1])
for (i in 1:dim(ctrl.mvm)[1]){
if (i %in% precipitated.mvm){
precipitated.mvm.v[i] <- 1
}
else {
precipitated.mvm.v[i] <- 0
}
}
n = 2
shift_zt_global <- globalpeak.rnase.zt - globalpeak.ctrl.zt
shift_zt_named <- shift_zt_global
for (i in 1:nrow(ctrl.zt)) {
if (i %in% precipitated.zt) {shift_zt_named[i] <- "precipitated"}
else if (shift_zt_global [i] < (-n)){shift_zt_named [i] <- "right shift"}
else if (shift_zt_global [i] > n){shift_zt_named [i] <- "left shift"}
else (shift_zt_named [i] <- "no shift")
}
# View(shift_zt_named)
precipitated.zt
precipitated.zt.v <- vector(mode = "numeric", length = dim(ctrl.zt)[1])
for (i in 1:dim(ctrl.zt)[1]){
if (i %in% precipitated.zt){
precipitated.zt.v[i] <- 1
}
else {
precipitated.zt.v[i] <- 0
}
}
n = 2
shift_mms_global <- globalpeak.rnase.mms - globalpeak.ctrl.mms
shift_mms_named <- shift_mms_global
for (i in 1:nrow(ctrl.mms)) {
if (i %in% precipitated.mms) {shift_mms_named[i] <- "precipitated"}
else if (shift_mms_global [i] < (-n)){shift_mms_named [i] <- "right shift"}
else if (shift_mms_global [i] > n){shift_mms_named [i] <- "left shift"}
else (shift_mms_named [i] <- "no shift")
}
# View(shift_mms_named)
precipitated.mms
precipitated.mms.v <- vector(mode = "numeric", length = dim(ctrl.mms)[1])
for (i in 1:dim(ctrl.mms)[1]){
if (i %in% precipitated.mms){
precipitated.mms.v[i] <- 1
}
else {
precipitated.mms.v[i] <- 0
}
}
View(precipitated.mms.v)
precipitated.mms.v
gshift <- shift_mvm_global
lshift <- lshift.mvm
gshift <- shift_mms_global
lshift <- lshift.mms
precipitated <- precipitated.mms.v
w.gshift <- 1
w.lshift <- 5
w.precipitated <- 5
peak.ctrl <- peak.mms.ctrl
peak.rnase <- peak.mms.rnase
#shift of local maxima
lshift.mvm <- sample(1:100, length(shift.mms), replace = TRUE)
gshift <- shift_mvm_global
lshift <- lshift.mvm
precipitated <- precipitated.mvm.v
w.gshift <- 1
w.lshift <- 0
w.precipitated <- 5
peak.ctrl <- peak.mvm.ctrl
gshift <- shift_mvm_global
lshift <- lshift.mvm
precipitated <- precipitated.mvm.v
w.gshift <- 1
w.lshift <- 0
w.precipitated <- 5
peak.ctrl <- globalpeak.ctrl.mvm
peak.rnase <- globalpeak.rnase.mvm
parameters.raw <- cbind(gshift, lshift, precipitated)
rownames(parameters.raw) <- rownames(ctrl.mvm)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
weight <- c(w.gshift, w.lshift, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
parameters <- parameters.scaled
# n = Number of clusters
n <- 3
km.mvm <- kmeans(parameters, centers = n, nstart = 100)
cluster <- km.mvm$cluster
#abhängig davon ob es drei oder vier cluster gibt werden unterschiedliche Vektoren verwendet:
if (n == 3){
col <- c("springgreen", "violetred1", "cyan")
vjust <- c(1, -0.5, -0.5)
labels <- c("no shift", "left shift", "right shift")
}
if (n == 4){
col <- c("springgreen", "violetred1", "cyan", "orange")
vjust <- c(-0.5, -0.5, -0.5, -0.5)
labels <- c("left shift", "right shift", "no shift", "precipitated")
}
library("ggplot2")
#hier wird ein Datframe mit allen für den dotplot relevanten daten erstellt
peaks <- data.frame(peak.ctrl, peak.rnase, cluster)
#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
dot.plot
gshift <- shift_mvm_global
lshift <- lshift.mvm
precipitated <- precipitated.mvm.v
w.gshift <- 1
w.lshift <- 0
w.precipitated <- 500
peak.ctrl <- globalpeak.ctrl.mvm
peak.rnase <- globalpeak.rnase.mvm
parameters.raw <- cbind(gshift, lshift, precipitated)
rownames(parameters.raw) <- rownames(ctrl.mvm)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
weight <- c(w.gshift, w.lshift, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
parameters <- parameters.scaled
# n = Number of clusters
n <- 3
km.mvm <- kmeans(parameters, centers = n, nstart = 100)
cluster <- km.mvm$cluster
#abhängig davon ob es drei oder vier cluster gibt werden unterschiedliche Vektoren verwendet:
if (n == 3){
col <- c("springgreen", "violetred1", "cyan")
vjust <- c(1, -0.5, -0.5)
labels <- c("no shift", "left shift", "right shift")
}
if (n == 4){
col <- c("springgreen", "violetred1", "cyan", "orange")
vjust <- c(-0.5, -0.5, -0.5, -0.5)
labels <- c("left shift", "right shift", "no shift", "precipitated")
}
library("ggplot2")
#hier wird ein Datframe mit allen für den dotplot relevanten daten erstellt
peaks <- data.frame(peak.ctrl, peak.rnase, cluster)
#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
gshift <- shift_zt_global
lshift <- lshift.mvm
precipitated <- precipitated.mvm.v
w.gshift <- 1
w.lshift <- 0
w.precipitated <- 5
peak.ctrl <- globalpeak.ctrl.zt
peak.rnase <- globalpeak.rnase.zt
parameters.raw <- cbind(gshift, lshift, precipitated)
rownames(parameters.raw) <- rownames(ctrl.zt)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
weight <- c(w.gshift, w.lshift, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
parameters <- parameters.scaled
# n = Number of clusters
n <- 3
km.zt <- kmeans(parameters, centers = n, nstart = 100)
cluster <- km.zt$cluster
#abhängig davon ob es drei oder vier cluster gibt werden unterschiedliche Vektoren verwendet:
if (n == 3){
col <- c("springgreen", "violetred1", "cyan")
vjust <- c(1, -0.5, -0.5)
labels <- c("no shift", "left shift", "right shift")
}
if (n == 4){
col <- c("springgreen", "violetred1", "cyan", "orange")
vjust <- c(-0.5, -0.5, -0.5, -0.5)
labels <- c("left shift", "right shift", "no shift", "precipitated")
}
library("ggplot2")
#hier wird ein Datframe mit allen für den dotplot relevanten daten erstellt
peaks <- data.frame(peak.ctrl, peak.rnase, cluster)
#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
gshift <- shift_zt_global
lshift <- lshift.mvm
precipitated <- precipitated.zt.v
w.gshift <- 1
w.lshift <- 0
w.precipitated <- 5
peak.ctrl <- globalpeak.ctrl.zt
peak.rnase <- globalpeak.rnase.zt
parameters.raw <- cbind(gshift, lshift, precipitated)
rownames(parameters.raw) <- rownames(ctrl.zt)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
weight <- c(w.gshift, w.lshift, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
parameters <- parameters.scaled
# n = Number of clusters
n <- 3
km.zt <- kmeans(parameters, centers = n, nstart = 100)
cluster <- km.zt$cluster
#abhängig davon ob es drei oder vier cluster gibt werden unterschiedliche Vektoren verwendet:
if (n == 3){
col <- c("springgreen", "violetred1", "cyan")
vjust <- c(1, -0.5, -0.5)
labels <- c("no shift", "left shift", "right shift")
}
if (n == 4){
col <- c("springgreen", "violetred1", "cyan", "orange")
vjust <- c(-0.5, -0.5, -0.5, -0.5)
labels <- c("left shift", "right shift", "no shift", "precipitated")
}
library("ggplot2")
#hier wird ein Datframe mit allen für den dotplot relevanten daten erstellt
peaks <- data.frame(peak.ctrl, peak.rnase, cluster)
#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
View(localpeaks.rnase.mms)
localpeaks.rnase.mms
localpeaks.rnase.mms <- readRDS("Non_synchronized_A549_localpeaks.rnase.mms")
View(localpeaks.rnase.mms)
View(localpeaks.ctrl.mms)
View(localpeaks.ctrl.mvm)
