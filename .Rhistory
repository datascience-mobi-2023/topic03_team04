a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount")
title(main = "Gaussian fit MYOME_HUMAN")
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
knitr::opts_chunk$set(echo = FALSE, results='hide')
load("Environment.RData")
shift.amount.plot = abs(data.frame(shift_zt_global))
train_zt_plot <- data.frame(Korrelation_plot = correlation.zt[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
model_zt_all_plot <- lm(Shift_plot ~ Korrelation_plot, data = train_zt_plot)
test_zt_plot <- data.frame(Korrelation_plot = correlation.zt[2501:3074, ])
predictions_zt_plot <- as.data.frame(predict(model_zt_all_plot, newdata = test_zt_plot))
rownames(predictions_zt_plot) <- rownames(rnase.zt[2501:3074, ])
px <- train_zt_plot$Korrelation_plot
py <- train_zt_plot$Shift_plot
plot(px, py, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift [Fraction]", xlim = c(min(px), max(px)), ylim = c(min(py), max(py)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_zt_all_plot, col = "tomato", lwd = 2)
abline(h = 2.5, col = "palegreen2", lwd = 2)
test_px <- test_zt_plot$Korrelation_plot
predicted_py <- predict(model_zt_all_plot, newdata = test_zt_plot)
points(test_px, predicted_py, col = "skyblue2", pch = 16, cex = 0.9)
legend("topright", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "skyblue2", "tomato", "palegreen2"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
library(kableExtra)
non.comparable.parameters0 <- kable(non.comparable.parameters)
table.non.comparable.parameters <- kable_styling(non.comparable.parameters0, "striped", full_width = FALSE)
non.comparable.kmeans0 <- kable(non.comparable.kmeans)
table.non.comparable.kmeans <- kable_styling(non.comparable.kmeans0, "striped", full_width = FALSE)
cat("<div class='row'>\n")
cat("<div class='column' style='float: left; width: 50%;'>\n")
print(table.non.comparable.parameters, row.names = FALSE)
cat("</div>\n")
cat("<div class='column' style='float: left; width: 50%;'>\n")
print(table.non.comparable.kmeans, row.names = FALSE)
cat("</div>\n")
cat("</div>\n")
library("kableExtra")
library(gridExtra)
summary.numbers.global0 <- kable(summary.numbers.glob)
table.summary.numbers.global <- kable_styling(summary.numbers.global0, "striped", full_width = FALSE)
summary.rates.global.rounded <- round(summary.rates.glob,4)
summary.rates.global0 <- kable(summary.rates.global.rounded)
table.summary.rates.global <- kable_styling(summary.rates.global0, "striped", full_width = FALSE)
grid.arrange(table.summary.numbers.global, table.summary.rates.global, ncol = 2)
library("kableExtra")
summary.numbers.global0 <- kable(summary.numbers.glob)
table.summary.numbers.global <- kable_styling(summary.numbers.global0, "striped", full_width = FALSE)
summary.rates.global.rounded <- round(summary.rates.glob,4)
summary.rates.global0 <- kable(summary.rates.global.rounded)
table.summary.rates.global <- kable_styling(summary.rates.global0, "striped", full_width = FALSE)
# Kombiniere die beiden Tabellen nebeneinander
combined_table <- cbind(table.summary.numbers.global, table.summary.rates.global)
# Verwende die Funktion multirow, um die Tabellen nebeneinander anzuzeigen
multirow(combined_table, rows = c(1, 1))
library("kableExtra")
library("gridExtra")
summary.numbers.global0 <- kable(summary.numbers.glob)
table.summary.numbers.global <- kable_styling(summary.numbers.global0, "striped", full_width = FALSE)
summary.rates.global.rounded <- round(summary.rates.glob,4)
summary.rates.global0 <- kable(summary.rates.global.rounded)
table.summary.rates.global <- kable_styling(summary.rates.global0, "striped", full_width = FALSE)
# Erstelle eine Rasteranordnung mit zwei Tabellen nebeneinander
grid.table(list(table.summary.numbers.global, table.summary.rates.global),
cols = c("numbers global", "rates global "))
library("kableExtra")
library("gridExtra")
summary.numbers.global0 <- kable(summary.numbers.glob)
table.summary.numbers.global <- kable_styling(summary.numbers.global0, "striped", full_width = FALSE)
summary.rates.global.rounded <- round(summary.rates.glob,4)
summary.rates.global0 <- kable(summary.rates.global.rounded)
table.summary.rates.global <- kable_styling(summary.rates.global0, "striped", full_width = FALSE)
# Erstelle eine Rasteranordnung mit zwei Tabellen nebeneinander
grid.arrange(list(table.summary.numbers.global, table.summary.rates.global), ncol=2)
library(kableExtra)
library(gridExtra)
library(grid)
summary.numbers.global0 <- kable(summary.numbers.glob)
table.summary.numbers.global <- kable_styling(summary.numbers.global0, "striped", full_width = FALSE)
summary.rates.global.rounded <- round(summary.rates.glob, 4)
summary.rates.global0 <- kable(summary.rates.global.rounded)
table.summary.rates.global <- kable_styling(summary.rates.global0, "striped", full_width = FALSE)
# Konvertiere die Tabellen in "grobs"
grob.summary.numbers.global <- tableGrob(table.summary.numbers.global)
grob.summary.rates.global <- tableGrob(table.summary.rates.global)
# Erstelle eine Rasteranordnung mit den "grobs"
grid.arrange(grob.summary.numbers.global, grob.summary.rates.global, ncol = 2)
knitr::opts_chunk$set(echo = FALSE, results='hide')
load("Environment.RData")
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")
title(main = "Gaussian fit MYOME_HUMAN")
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
library("kableExtra")
summary.numbers.parameters0 <- kable(summary.numbers.parameters)
table.summary.numbers.parameters <- kable_styling(summary.numbers.parameters0, "striped", full_width = FALSE)
summary.rates.parameters.rounded <- round(summary.rates.parameters,4)
summary.rates.parameters0 <- kable(summary.rates.parameters.rounded)
table.summary.rates.parameters <- kable_styling(summary.rates.parameters0, "striped", full_width = FALSE)
cat("<div class='row'>\n")
cat("<div class='column'>\n")
print(table.summary.numbers.parameters, row.names = FALSE)
cat("</div>\n")
cat("<div class='column'>\n")
print(table.summary.rates.parameters, row.names = FALSE)
cat("</div>\n")
cat("</div>\n")
library("kableExtra")
summary.numbers.parameters0 <- kable(summary.numbers.parameters)
table.summary.numbers.parameters <- kable_styling(summary.numbers.parameters0, "striped", full_width = FALSE)
summary.rates.parameters.rounded <- round(summary.rates.parameters,4)
summary.rates.parameters0 <- kable(summary.rates.parameters.rounded)
table.summary.rates.parameters <- kable_styling(summary.rates.parameters0, "striped", full_width = FALSE)
cat("<div class='row'>\n")
cat("<div class='column'>\n")
print(table.summary.numbers.parameters, row.names = FALSE)
cat("</div>\n")
cat("<div class='column'>\n")
print(table.summary.rates.parameters, row.names = FALSE)
cat("</div>\n")
cat("</div>\n")
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")+ theme(panel.background = element_rect(fill = "gray98")) + theme(plot.background = element_rect(fill = "gray97")) + theme(legend.background = element_rect(fill = "gray97")) + theme(legend.key = element_rect(fill = "gray98"))
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")
title(main = "Gaussian fit MYOME_HUMAN")
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
library("kableExtra")
non.comparable.parameters0 <- kable(non.comparable.parameters)
table.non.comparable.parameters <- kable_styling(non.comparable.parameters0, "striped", full_width = FALSE)
non.comparable.kmeans0 <- kable(non.comparable.kmeans)
table.non.comparable.kmeans <- kable_styling(non.comparable.kmeans0, "striped", full_width = FALSE)
cat("<div class='row'>\n")
cat("<div class='column'>\n")
print(table.non.comparable.parameters, row.names = FALSE)
cat("</div>\n")
cat("<div class='column'>\n")
print(table.non.comparable.kmeans, row.names = FALSE)
cat("</div>\n")
cat("</div>\n")
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")
title(main = "Gaussian fit MYOME_HUMAN")
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")
title(main = "Gaussian fit MYOME_HUMAN")
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
theme(panel.background = element_rect(fill = "gray98")) +
theme(plot.background = element_rect(fill = "gray97")) +
theme(legend.background = element_rect(fill = "gray97")) +
theme(legend.key = element_rect(fill = "gray98"))
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")
title(main = "Gaussian fit MYOME_HUMAN")
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
par(bg = "gray97")
# Hintergrundfarben für das Panel
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "gray98", border = NA)
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
# Plot mit ggplot2 erstellen
plot_data <- data.frame(x = x,
y1 = gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)),
y2 = gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)))
ggplot(plot_data, aes(x = x)) +
geom_line(aes(y = y1), color = "palegreen2", size = 2) +
geom_line(aes(y = y2), color = "violet", size = 2) +
labs(title = "Gaussian fit MYOME_HUMAN") +
theme(panel.background = element_rect(fill = "gray98"),
plot.background = element_rect(fill = "gray97"),
legend.background = element_rect(fill = "gray97"),
legend.key = element_rect(fill = "gray98"))
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")
title(main = "Gaussian fit MYOME_HUMAN")
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "lightblue", border = NA)
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")
title(main = "Gaussian fit MYOME_HUMAN")
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "gray97", border = NA)
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")
title(main = "Gaussian fit MYOME_HUMAN")
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "gray97", border = NA)
rect(par("usr")[1], 0, par("usr")[2], 20, col = "darkgrey", border = NA)
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")
rect(par("usr")[1], -10, par("usr")[2], 30, col = "darkgrey", border = NA)
title(main = "Gaussian fit MYOME_HUMAN")
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "gray97", border = NA)
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")
rect(par("usr")[1], -10, par("usr")[2], 30, col = "darkgrey", border = NA)
title(main = "Gaussian fit MYOME_HUMAN")
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "gray97", border = NA)
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
legend("topright", legend = c("Control", "RNase"), col = c("palegreen2", "violet"), lwd = 2)
n <- 9 # Number of protein you want to see
x <- c(1:25)
a1 <- parameter_gaussian_ctrl.zt_table[n, 1]
mu1 <- parameter_gaussian_ctrl.zt_table[n, 2]
sigma1 <- parameter_gaussian_ctrl.zt_table[n, 3]
a2 <- parameter_gaussian_rnase.zt_table[n, 1]
mu2 <- parameter_gaussian_rnase.zt_table[n, 2]
sigma2 <- parameter_gaussian_rnase.zt_table[n, 3]
plot(x, type = "n", ylim = c(0, 20), xlab = "Fractions", ylab = "Protein amount", col = "darkgrey")
rect(par("usr")[1], -10, par("usr")[2], 30, col = "darkgrey", border = NA)
title(main = "Gaussian fit MYOME_HUMAN")
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "gray97", border = NA)
curve(gauss(x, a = as.numeric(a1), mu = as.numeric(mu1), sigma = as.numeric(sigma1)), add = TRUE, col = "palegreen2", lwd = 2)
curve(gauss(x, a = as.numeric(a2), mu = as.numeric(mu2), sigma = as.numeric(sigma2)), add = TRUE, col = "violet", lwd = 2)
legend("topright", legend = c("Control", "RNase"), col = c("palegreen2", "violet"), lwd = 2, bg = "gray98")
print(plot_RBP[[1]] + labs(subtitle = paste("Figure 5: Categorization into shifting behaviour based on global shift.")) + theme(panel.background = element_rect(fill = "gray98")) + theme(plot.background = element_rect(fill = "gray97")) + theme(legend.background = element_rect(fill = "gray97")) + theme(legend.key = element_rect(fill = "gray98")))
knitr::opts_chunk$set(echo = FALSE, results='hide')
load("Environment.RData")
shift_named <- cbind(shift_mvm_named, shift_zt_named, shift_mms_named)
plots_RBP <- list()
library("ggplot2")
for (x in 1:3){
col <- c("skyblue2", "darkseagreen3","tomato1", "lightsteelblue4" )
vjust <- c(-0.5, 1, -0.5, -0.5)
labels <- c("left shift", "no shift", "precipitated", "right shift")
title <- c("Shifttypes", "Shifttypes z-Transformation", "Shifttypes Min-Max-Scaling")
peaks <- data.frame(peak.ctrl, peak.rnase, shift_named[,x])
number.of.clusters <- data.frame(value = shift_named[,x])
peaks$cluster <- factor(shift_named[,x])
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = shift_named[,x]),
shape = 19,
alpha = 0.5, size = 1.5,
position = position_jitter(width = 0.2, height = 0.2))+
labs(x = "Fraction of Control Peak",
y = "Fraction of RNase Peak",
title = title[x])+
coord_equal()+
scale_colour_manual(values = col,labels = labels, name = "shifttypes")+
theme_light()
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col, width = 0.7)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = vjust,
size = 2.7)
plot_RBP[[x]] <- dot.plot + annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 26.75,
ymin = -1,
ymax = 8)
print(plot_RBP[[x]])+ labs(subtitle = paste("Figure 5: Categorization into shifting behaviour based on global shift.")) + theme(panel.background = element_rect(fill = "gray98")) + theme(plot.background = element_rect(fill = "gray97")) + theme(legend.background = element_rect(fill = "gray97")) + theme(legend.key = element_rect(fill = "gray98"))
}
print(plot_RBP[[1]]) + labs(subtitle = paste("Figure 5: Categorization into shifting behaviour based on global shift.")) + theme(panel.background = element_rect(fill = "gray98")) + theme(plot.background = element_rect(fill = "gray97")) + theme(legend.background = element_rect(fill = "gray97")) + theme(legend.key = element_rect(fill = "gray98"))
library(ggplot2)
library(ggpubr)
parameters.all <- list(parameters.mvm, parameters.zt, parameters.mms) #parameters.mms fehlt
plot.parameters <- list()
for (z in 1:3){
parameters <- parameters.all[[z]]
if (z == 3){
g <- 2
}else{g <- 3}
for (y in 1:dim(parameters)[1]){
if (parameters[y,g] == "no shift"){
parameters[y,g] <- 0
} else{parameters[y,g] <- 1}
}
parameters.m <- as.matrix(parameters)
sum_parameters <- apply(parameters.m, 1, function(x){
sum(as.numeric(x))})
df <- as.data.frame(sum_parameters)
title <- c("How many parameters support the proteins? MVM",
"How many parameters support the proteins? z-Transformation",
"How many parameters support the proteins? MMS")
plot.parameters[[z]]<- ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = -0.25)+
labs(x = "number of parameters pro shift",
y = "number of proteins",
title = title[z])
print(plot.parameters[[z]])
}
library(ggplot2)
parameters.all <- list(parameters.mvm, parameters.zt, parameters.mms)
plot.parameters.detail <- list()
for (z in 1:3){
parameters <- parameters.all[[z]]
if(z == 3){
g <- 2
}else{g <- 3}
for (y in 1:dim(parameters)[1]){
if (parameters[y,g] == "no shift"){
parameters[y,g] <- 0
} else{parameters[y,g] <- 1}
}
parameters.m <- as.matrix(parameters)
sum_parameters <- apply(parameters.m, 1, function(x){
sum(as.numeric(x))})
df <- as.data.frame(sum_parameters)
title <- c("Protein spilt by number of Parameters",
"Protein spilt by number of Parameters - zTransformation",
"Protein spilt by number of Parameters - MMS")
if(z == 3){
c <- c(0,1,2,3)
}else{c<- c(0,1,2,3,4)}
if(z == 3){
d <- 0
}
else {d <- 1}
if (z != 3){
df.glob <- as.data.frame(parameters[,d])
df.glob.sum <- as.data.frame(c)
for (x in 0:4){
df.glob.sum[x+1,2] <- sum(df.glob[which(sum_parameters == x),])}}
df.loc <- as.data.frame(parameters[,d+1])
df.loc.sum <- as.data.frame(c)
for (x in 0:(d+3)){
df.loc.sum[x+1,2] <-
sum(as.numeric(df.loc[which(sum_parameters == x),]))}
df.shift <- as.data.frame(parameters[,d+2])
df.shift.sum <- as.data.frame(c)
for (x in 0:(d+3)){
df.shift.sum[x+1,2] <-
sum(as.numeric(df.shift[which(sum_parameters == x),]))}
df.shoulder <- as.data.frame(parameters[,d+3])
df.shoulder.sum <- as.data.frame(c)
for (x in 0:(d+3)){
df.shoulder.sum[x+1,2] <-
sum(df.shoulder[which(sum_parameters == x),])}
df.sum <- as.data.frame(sum_parameters)
df.sum.sum <- as.data.frame(c)
for (x in 0:(d+3)){
df.sum.sum[x+1,2] <- sum(sum_parameters == x)}
if (z != 3){
df2 <- data.frame(category = c(df.glob.sum[,1], df.loc.sum[,1],
df.shift.sum[,1], df.shoulder.sum[,1],
df.sum.sum[,1]),
value = c(df.glob.sum[,2], df.loc.sum[,2],
df.shift.sum[,2], df.shoulder.sum[,2],
df.sum.sum[,2]),
Parameters = c(rep(c("Global", "Local", "Shifts",
"Shoulderregion", "Total"),
each = 5)))
}else{
df2 <- data.frame(category = c(df.loc.sum[,1], df.shift.sum[,1],
df.shoulder.sum[,1],df.sum.sum[,1]),
value = c(df.loc.sum[,2], df.shift.sum[,2],
df.shoulder.sum[,2], df.sum.sum[,2]),
Parameters = c(rep(c("Local", "Shift", "Shoulderregion",
"Total"), each = 4)))
}
if(z == 3){
colour <- c("coral3", "lightsteelblue4","paleturquoise3", "lightsteelblue2" )
}else{colour <- c("coral3", "lightsteelblue4", "darkseagreen3", "paleturquoise3", "lightsteelblue2" )}
plot.parameters.detail[[z]] <-
ggplot(df2, aes(x = category, y = value, fill = Parameters))+
geom_bar(stat = "identity", position = position_dodge(width = 0.9))+
theme_bw()+
geom_text(aes(label = value),
vjust = -0.5,
position = position_dodge(width = 0.9),
size = 2)+
labs(x = "Number of Parameters",
y = "Number of Proteins",
title = title[[z]])+
scale_fill_manual(values = colour)
print(plot.parameters.detail[[z]])
}
print(plot.parameters.detail[[1]]) + labs(subtitle =
paste("Figure 5: The number of Proteins for each Parameter depending on the occuring
Parameter amount is depicted.")) + theme(panel.background = element_rect(fill = "gray98")) + theme(plot.background = element_rect(fill = "gray97")) + theme(legend.background = element_rect(fill = "gray97")) + theme(legend.key = element_rect(fill = "gray98"))
df.peaks <- data.frame(cbind(globalpeak.ctrl.mvm, globalpeak.rnase.mvm, globalpeak.ctrl.zt, globalpeak.rnase.zt, globalpeak.ctrl.mms, globalpeak.rnase.mms))
plot.cluster.fractions <- list()
title <- c("Clusters of Peaks calculated after MVM","Clusters of Peaks calculated after z-Transformation", "Clusters of Peaks calculated after MMS")
res.km <- list()
for (x in 1:3){
df <- df.peaks[,(2*x -1):(2*x)]
set.seed(666)
res.km[[x]] <- kmeans(scale(df[, -5]), 4, nstart = 25)
g <- ggplot(data = df, aes(x = globalpeak.ctrl, y = globalpeak.rnase)) +
geom_point(aes(fill = factor(res.km[[x]]$cluster)),
shape = 19,
size = 3,
color = c("lightsteelblue2", "darkseagreen3","tomato1", "lightsteelblue4" )) +
labs(x = "Global Control Peaks",
y = "Global RNase Peaks",
title = title[x]) +
scale_fill_manual(values = c("lightsteelblue2", "darkseagreen3","tomato1", "lightsteelblue4" )) +
theme_bw()
g <- fviz_cluster(res.km[[x]], data = df,
geom = "point",
xlab = "Global Control Peaks",
ylab = "Global RNase Peaks",
main = title[x],
ggtheme = theme_bw()) +
scale_fill_manual(values = c("lightsteelblue2", "darkseagreen3","tomato1", "lightsteelblue4" ))
plot.cluster.fractions[[x]] <- g + theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
print(plot.cluster.fractions[[x]])
}
print(plot_RBP[[1]]) + labs(subtitle = paste("Figure 5: Categorization into shifting behaviour based on global shift.")) + theme(panel.background = element_rect(fill = "gray98")) + theme(plot.background = element_rect(fill = "gray97")) + theme(legend.background = element_rect(fill = "gray97")) + theme(legend.key = element_rect(fill = "gray98"))
print(plot_RBP[[1]] + labs(subtitle = paste("Figure 5: Categorization into shifting behaviour based on global shift.")) + theme(panel.background = element_rect(fill = "gray98")) + theme(plot.background = element_rect(fill = "gray97")) + theme(legend.background = element_rect(fill = "gray97")) + theme(legend.key = element_rect(fill = "gray98")))
print(plot.parameters.detail[[1]] + labs(subtitle =
paste("Figure 5: The number of Proteins for each Parameter depending on the occuring
Parameter amount is depicted.")) + theme(panel.background = element_rect(fill = "gray98")) + theme(plot.background = element_rect(fill = "gray97")) + theme(legend.background = element_rect(fill = "gray97")) + theme(legend.key = element_rect(fill = "gray98")))
