}
}
true.positives.regression.shift[z] <- counter
}
# true.positives.regression.shift
# Number of wrongly assigned (false positives) RBPs with parameters
false.positives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.regression[[z]]) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
false.positives.regression.shift[z] <- counter
}
false.positives.regression.shift
number.observed.nonRBPs.regression
# Number of correctly assigned non-RBPs (true negatives) with parameters
true.negatives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.regression[[z]]) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
true.negatives.regression.shift[z] <- counter
}
true.negatives.regression.shift
# Number of wrongly assigned non-RBPs (true negatives) with parameters
false.negatives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.regression[[z]]) {
if (i %in% rownames(rdeep)) {
counter <- counter + 1
}
}
false.negatives.regression.shift[z] <- counter
}
# false.negatives.regression.shift
fnr.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fnr.regression.shift[x] <- false.negatives.regression.shift[x]/(false.negatives.regression.shift[x] + true.positives.regression.shift[x])
}
fnr.regression.shift
fpr.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fpr.regression.shift[x] <- false.positives.regression.shift[x]/(false.positives.regression.shift[x]+true.negatives.regression.shift[x])
}
fpr.regression.shift
precision.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.regression.shift[x] <- true.positives.regression.shift[x]/(true.positives.regression.shift[x] + false.positives.regression.shift[x])
}
precision.regression.shift
#for the results of our parameters
summary.numbers.regression <- rbind(true.positives.regression.shift, false.positives.regression.shift, true.negatives.regression.shift, false.negatives.regression.shift)
rownames(summary.numbers.regression) = c("True Positives","False Positives", "True Negatives", "False Negatives")
summary.rates.regression.shift <- rbind(fnr.regression.shift , fpr.regression.shift, precision.regression.shift)
rownames(summary.rates.regression.shift) = c("FNR", "FPR", "Precision")
View(summary.numbers.regression)
View(summary.rates.regression.shift)
#for the results of our parameters
summary.numbers.regression <- rbind(true.positives.regression.shift, false.positives.regression.shift, true.negatives.regression.shift, false.negatives.regression.shift)
rownames(summary.numbers.regression) = c("True Positives","False Positives", "True Negatives", "False Negatives")
summary.rates.regression.shift <- rbind(fnr.regression.shift , fpr.regression.shift, precision.regression.shift)
rownames(summary.rates.regression.shift) = c("FNR", "FPR", "Precision")
summary.numbers.regression
summary.rates.regression.shift
summary.numbers.regression
summary.rates.regression.shift
save.image("C:/Users/tinel/OneDrive/Dokumente/RUPRECHT-KARLS-UNIVERSITÄT HEIDELBERG/MOBI/HOCHSCHULSEMESTER4/DATAANALYSIS/Workspace with regression.RData")
as.tabel(summary.numbers.regression)
tabel(summary.numbers.regression)
as,tabel(summary.numbers.regression)
as.tabel(summary.numbers.regression)
as.table(summary.numbers.regression)
as.table(summary.numbers.regression)
as.table(summary.numbers.regression,)
as.table.default(summary.numbers.regression)
class(summary.numbers.regression)
summary.rates.regression.shift
kable(summary.numbers.regression)
install.packages("knitr")
install.packages("gt")
gt(summary.numbers.regression) %>% tab_header(title = "Table x: Identified and True RDeep for last third of the dataset by linear regression.")
gt(summary.numbers.regression) %>%
tab_header(
title = "Table x: Identified and True RDeep for last third of the dataset by linear regression.")
install.packages("magrittr")
gt(summary.numbers.regression) %>%
tab_header(
title = "Table x: Identified and True RDeep for last third of the dataset by linear regression.")
install.packages("magrittr", dependencies = TRUE)
gt(summary.numbers.regression) %>%
tab_header(
title = "Table x: Identified and True RDeep for last third of the dataset by linear regression.")
install.packages("magrittr", dependencies = TRUE)
gt(summary.numbers.regression) %>%
tab_header(
title = "Table x: Identified and True RDeep for last third of the dataset by linear regression.")
knitr::opts_chunk$set(echo = FALSE, results='hide')
knitr::kable(summary.numbers.regression)
knitr::kable(summary.rates.regression.shift)
library("kableExtra")
summary.numbers.parameters0 <- kable(summary.numbers.parameters)
table.summary.numbers.parameters <- kable_styling(summary.numbers.parameters0, "striped", full_width = FALSE)
summary.rates.parameters.rounded <- round(summary.rates.parameters,4)
summary.rates.parameters0 <- kable(summary.rates.parameters.rounded)
table.summary.rates.parameters <- kable_styling(summary.rates.parameters0, "striped", full_width = FALSE)
cat("<div class='row'>\n")
cat("<div class='column'>\n")
print(table.summary.numbers.parameters, row.names = FALSE)
cat("</div>\n")
cat("<div class='column'>\n")
print(table.summary.rates.parameters, row.names = FALSE)
cat("</div>\n")
cat("</div>\n")
library("kableExtra")
summary.numbers.regression0 <- kable(summary.numbers.regression)
table.summary.numbers.regression <- kable_styling(summary.numbers.regression0, "striped", full_width = FALSE)
summary.rates.regression.shift0 <- kable(summary.rates.regression.shift)
table.summary.rates.regression.shift <- kable_styling(summary.rates.regression.shift0, "striped", full_width = FALSE)
cat("<div class='row'>\n")
cat("<div class='column'>\n")
print(table.summary.numbers.regression, row.names = FALSE)
cat("</div>\n")
cat("<div class='column'>\n")
print(table.summary.rates.regression.shift, row.names = FALSE)
cat("</div>\n")
cat("</div>\n")
knitr::opts_chunk$set(echo = FALSE, results='hide')
library("kableExtra")
summary.numbers.regression0 <- kable(summary.numbers.regression)
table.summary.numbers.regression <- kable_styling(summary.numbers.regression0, "striped", full_width = FALSE)
summary.rates.regression.shift0 <- kable(summary.rates.regression.shift)
table.summary.rates.regression.shift <- kable_styling(summary.rates.regression.shift0, "striped", full_width = FALSE)
cat("<div class='row'>\n")
cat("<div class='column'>\n")
print(table.summary.numbers.regression, row.names = FALSE)
cat("</div>\n")
cat("<div class='column'>\n")
print(table.summary.rates.regression.shift, row.names = FALSE)
cat("</div>\n")
cat("</div>\n")
knitr::opts_chunk$set(echo = FALSE, results='hide')
load("Environment.RData")
knitr::opts_chunk$set(echo = TRUE, results='hide')
load("Environment.RData")
knitr::opts_chunk$set(echo = FALSE, results='hide')
load("Environment.RData")
knitr::opts_chunk$set(echo = FALSE, results='hide')
load("Environment.RData")
knitr::opts_chunk$set(echo = FALSE, results='hide')
load("Environment.RData")
knitr::opts_chunk$set(echo = FALSE, results='hide')
load("Environment.RData")
save.image("C:/Users/tinel/OneDrive/Dokumente/RUPRECHT-KARLS-UNIVERSITÄT HEIDELBERG/MOBI/HOCHSCHULSEMESTER4/DATAANALYSIS/topic03_team04/Environment.RData")
knitr::opts_chunk$set(echo = FALSE, results='hide')
load("Environment.RData")
knitr::opts_chunk$set(echo = FALSE, results='hide')
load("Environment.RData")
knitr::opts_chunk$set(echo = TRUE)
rdeep <- read.csv('RBP2GO_Human_database_RBPs.csv', header=TRUE, row.names=1, sep = ";")
text <- "Table_HS_Non_RBP.txt"
csv <- "Table_HS_Non_RBP.csv"
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
# CSV-Datei schreiben
write.csv(non.rdeep.text,csv, row.names = FALSE)
non.rdeep <- read.csv(csv)
# the proteins identified as RNA-dependent by our four parameters:
comp.mvm.parameters <- shift_mvm
comp.zt.parameters <- shift_zt
comp.mms.parameters <- shift_mms
rownames(comp.mvm.parameters) = rownames(parameters.mms)
rownames(comp.zt.parameters) = rownames(parameters.mms)
rownames(comp.mms.parameters) = rownames(parameters.mms)
names.rdp.mvm.parameters <- rownames(comp.mvm.parameters)[which(comp.mvm.parameters == 1)]
names.rdp.zt.parameters <- rownames(comp.zt.parameters)[which(comp.zt.parameters == 1)]
names.rdp.mms.parameters <- rownames(comp.mms.parameters)[which(comp.mms.parameters == 1)]
names.rdp.parameters <- list(names.rdp.mvm.parameters, names.rdp.zt.parameters, names.rdp.mms.parameters)
number.observed.RBPs.parameters <- c(length(names.rdp.mvm.parameters), length(names.rdp.zt.parameters), length(names.rdp.mms.parameters))
# the proteins identified as non-RNA-dependent by our four parameters:
names.nrdp.mvm.parameters <- rownames(comp.mvm.parameters)[which(comp.mvm.parameters == 0)]
names.nrdp.zt.parameters <- rownames(comp.zt.parameters)[which(comp.zt.parameters == 0)]
names.nrdp.mms.parameters <- rownames(comp.mms.parameters)[which(comp.mms.parameters == 0)]
names.nrdp.parameters <- list(names.nrdp.mvm.parameters, names.nrdp.zt.parameters, names.nrdp.mms.parameters)
number.observed.non.RBPs.parameters <- c(length(names.nrdp.mvm.parameters), length(names.nrdp.zt.parameters), length(names.nrdp.mms.parameters))
# the proteins identified as RNA-dependent by kmeans-clustering:
comp.mvm.kmeans <- shift.kmeans[[1]]
comp.zt.kmeans <- shift.kmeans[[2]]
comp.mms.kmeans <- shift.kmeans[[3]]
names.rdp.mvm.kmeans <- rownames(comp.mvm.kmeans)[which(comp.mvm.kmeans == 1)]
names.rdp.zt.kmeans <- rownames(comp.zt.kmeans)[which(comp.zt.kmeans == 1)]
names.rdp.mms.kmeans <- rownames(comp.mms.kmeans)[which(comp.mms.kmeans == 1)]
names.rdp.kmeans <- list(names.rdp.mvm.kmeans, names.rdp.zt.kmeans, names.rdp.mms.kmeans)
number.observed.RBPs.kmeans <- c(length(names.rdp.mvm.kmeans), length(names.rdp.zt.kmeans), length(names.rdp.mms.kmeans))
# the proteins identified as non-RNA-dependent by kmeans-clustering:
names.nrdp.mvm.kmeans <- rownames(comp.mvm.kmeans)[which(comp.mvm.kmeans == 0)]
names.nrdp.zt.kmeans <- rownames(comp.zt.kmeans)[which(comp.zt.kmeans == 0)]
names.nrdp.mms.kmeans <- rownames(comp.mms.kmeans)[which(comp.mms.kmeans == 0)]
names.nrdp.kmeans <- list(names.nrdp.mvm.kmeans, names.nrdp.zt.kmeans, names.nrdp.mms.kmeans)
number.observed.non.RBPs.kmeans <- c(length(names.nrdp.mvm.kmeans), length(names.nrdp.zt.kmeans), length(names.nrdp.mms.kmeans))
# the proteins identified as RNA-dependent by the global shift parameter
comp.glob <- shift_named
for(x in 1:3){
for(y in 1:dim(comp.glob)[1]){
if (shift_named[y,x] == "no shift"){
comp.glob[y,x] <- 0
}else{comp.glob[y,x] <- 1}
}
}
names.rdp.mvm.glob <- rownames(as.data.frame(comp.glob[,1]))[which(as.data.frame(comp.glob[,1]) == 1)]
names.rdp.zt.glob <- rownames(as.data.frame(comp.glob[,2]))[which(as.data.frame(comp.glob[,2]) == 1)]
names.rdp.mms.glob <- rownames(as.data.frame(comp.glob[,3]))[which(as.data.frame(comp.glob[,3]) == 1)]
names.rdp.glob <- list(names.rdp.mvm.glob, names.rdp.zt.glob, names.rdp.mms.glob)
number.observed.RBPs.glob <- c(length(names.rdp.mvm.glob), length(names.rdp.zt.glob), length(names.rdp.mms.glob))
print(number.observed.RBPs.glob)
# the proteins identified as non-RNA-dependent by our four parameters:
names.nrdp.mvm.glob <- rownames(as.data.frame(comp.glob[,1]))[which(as.data.frame(comp.glob[,1]) == 0)]
names.nrdp.zt.glob <- rownames(as.data.frame(comp.glob[,2]))[which(as.data.frame(comp.glob[,2]) == 0)]
names.nrdp.mms.glob <- rownames(as.data.frame(comp.glob[,3]))[which(as.data.frame(comp.glob[,3]) == 0)]
names.nrdp.glob <- list(names.nrdp.mvm.glob, names.nrdp.zt.glob, names.nrdp.mms.glob)
number.observed.non.RBPs.glob <- c(length(names.nrdp.mvm.glob), length(names.nrdp.zt.glob), length(names.nrdp.mms.glob))
# the proteins identified as RNA-dependent by our four parameters:
comp.mvm.parameters <- shift_mvm
comp.zt.parameters <- shift_zt
comp.mms.parameters <- shift_mms
rownames(comp.mvm.parameters) = rownames(parameters.mms)
rownames(comp.zt.parameters) = rownames(parameters.mms)
rownames(comp.mms.parameters) = rownames(parameters.mms)
names.rdp.mvm.parameters <- rownames(comp.mvm.parameters)[which(comp.mvm.parameters == 1)]
names.rdp.zt.parameters <- rownames(comp.zt.parameters)[which(comp.zt.parameters == 1)]
names.rdp.mms.parameters <- rownames(comp.mms.parameters)[which(comp.mms.parameters == 1)]
names.rdp.parameters <- list(names.rdp.mvm.parameters, names.rdp.zt.parameters, names.rdp.mms.parameters)
number.observed.RBPs.parameters <- c(length(names.rdp.mvm.parameters), length(names.rdp.zt.parameters), length(names.rdp.mms.parameters))
# the proteins identified as non-RNA-dependent by our four parameters:
names.nrdp.mvm.parameters <- rownames(comp.mvm.parameters)[which(comp.mvm.parameters == 0)]
names.nrdp.zt.parameters <- rownames(comp.zt.parameters)[which(comp.zt.parameters == 0)]
names.nrdp.mms.parameters <- rownames(comp.mms.parameters)[which(comp.mms.parameters == 0)]
names.nrdp.parameters <- list(names.nrdp.mvm.parameters, names.nrdp.zt.parameters, names.nrdp.mms.parameters)
number.observed.non.RBPs.parameters <- c(length(names.nrdp.mvm.parameters), length(names.nrdp.zt.parameters), length(names.nrdp.mms.parameters))
# the proteins identified as RNA-dependent by kmeans-clustering:
comp.mvm.kmeans <- shift.kmeans[[1]]
comp.zt.kmeans <- shift.kmeans[[2]]
comp.mms.kmeans <- shift.kmeans[[3]]
names.rdp.mvm.kmeans <- rownames(comp.mvm.kmeans)[which(comp.mvm.kmeans == 1)]
names.rdp.zt.kmeans <- rownames(comp.zt.kmeans)[which(comp.zt.kmeans == 1)]
names.rdp.mms.kmeans <- rownames(comp.mms.kmeans)[which(comp.mms.kmeans == 1)]
names.rdp.kmeans <- list(names.rdp.mvm.kmeans, names.rdp.zt.kmeans, names.rdp.mms.kmeans)
number.observed.RBPs.kmeans <- c(length(names.rdp.mvm.kmeans), length(names.rdp.zt.kmeans), length(names.rdp.mms.kmeans))
# the proteins identified as non-RNA-dependent by kmeans-clustering:
names.nrdp.mvm.kmeans <- rownames(comp.mvm.kmeans)[which(comp.mvm.kmeans == 0)]
names.nrdp.zt.kmeans <- rownames(comp.zt.kmeans)[which(comp.zt.kmeans == 0)]
names.nrdp.mms.kmeans <- rownames(comp.mms.kmeans)[which(comp.mms.kmeans == 0)]
names.nrdp.kmeans <- list(names.nrdp.mvm.kmeans, names.nrdp.zt.kmeans, names.nrdp.mms.kmeans)
number.observed.non.RBPs.kmeans <- c(length(names.nrdp.mvm.kmeans), length(names.nrdp.zt.kmeans), length(names.nrdp.mms.kmeans))
# the proteins identified as RNA-dependent by the global shift parameter
comp.glob <- shift_named
for(x in 1:3){
for(y in 1:dim(comp.glob)[1]){
if (shift_named[y,x] == "no shift"){
comp.glob[y,x] <- 0
}else{comp.glob[y,x] <- 1}
}
}
names.rdp.mvm.glob <- rownames(as.data.frame(comp.glob[,1]))[which(as.data.frame(comp.glob[,1]) == 1)]
names.rdp.zt.glob <- rownames(as.data.frame(comp.glob[,2]))[which(as.data.frame(comp.glob[,2]) == 1)]
names.rdp.mms.glob <- rownames(as.data.frame(comp.glob[,3]))[which(as.data.frame(comp.glob[,3]) == 1)]
names.rdp.glob <- list(names.rdp.mvm.glob, names.rdp.zt.glob, names.rdp.mms.glob)
number.observed.RBPs.glob <- c(length(names.rdp.mvm.glob), length(names.rdp.zt.glob), length(names.rdp.mms.glob))
print(number.observed.RBPs.glob)
# the proteins identified as non-RNA-dependent by our four parameters:
names.nrdp.mvm.glob <- rownames(as.data.frame(comp.glob[,1]))[which(as.data.frame(comp.glob[,1]) == 0)]
names.nrdp.zt.glob <- rownames(as.data.frame(comp.glob[,2]))[which(as.data.frame(comp.glob[,2]) == 0)]
names.nrdp.mms.glob <- rownames(as.data.frame(comp.glob[,3]))[which(as.data.frame(comp.glob[,3]) == 0)]
names.nrdp.glob <- list(names.nrdp.mvm.glob, names.nrdp.zt.glob, names.nrdp.mms.glob)
number.observed.non.RBPs.glob <- c(length(names.nrdp.mvm.glob), length(names.nrdp.zt.glob), length(names.nrdp.mms.glob))
#Number of correctly assigned (true positives) RBPs with parameters
true.positives.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.parameters[[z]]) {
if (i %in% rownames(rdeep)) {
counter <- counter + 1
}
}
true.positives.parameters[z] <- counter
}
#Number of correctly assigned (true positives) RBPs with kmeans
true.positives.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.kmeans[[z]]) {
if (i %in% rownames(rdeep)) {
counter <- counter + 1
}
}
true.positives.kmeans[z] <- counter
}
#Number of correctly assigned (true positives) RBPs with global shift
true.positives.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.glob[[z]]) {
if (i %in% rownames(rdeep)) {
counter <- counter + 1
}
}
true.positives.glob[z] <- counter
}
# Number of wrongly assigned (false positives) RBPs with parameters
false.positives.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.parameters[[z]]) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
false.positives.parameters[z] <- counter
}
# Number of wrongly assigned (false positives) RBPs with kmeans
false.positives.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.kmeans[[z]]) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
false.positives.kmeans[z] <- counter
}
# Number of wrongly assigned (false positives) RBPs with global shift
false.positives.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.glob[[z]]) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
false.positives.glob[z] <- counter
}
# Number of correctly assigned non-RBPs (true negatives) with parameters
true.negatives.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.parameters[[z]]) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
true.negatives.parameters[z] <- counter
}
# Number of correctly assigned non-RBPs (true negatives) with kmeans
true.negatives.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.kmeans[[z]]) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
true.negatives.kmeans[z] <- counter
}
# Number of correctly assigned non-RBPs (true negatives) with global shift
true.negatives.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.glob[[z]]) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
true.negatives.glob[z] <- counter
}
# Number of wrongly assigned non-RBPs (true negatives) with parameters
false.negatives.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.parameters[[z]]) {
if (i %in% rownames(rdeep)) {
counter <- counter + 1
}
}
false.negatives.parameters[z] <- counter
}
#Number of correctly assigned (true positives) RBPs with parameters
false.negatives.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.kmeans[[z]]) {
if (i %in% rownames(rdeep)) {
counter <- counter + 1
}
}
false.negatives.kmeans[z] <- counter
}
#Number of correctly assigned (true positives) RBPs with global shift
false.negatives.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.glob[[z]]) {
if (i %in% rownames(rdeep)) {
counter <- counter + 1
}
}
false.negatives.glob[z] <- counter
}
fnr.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fnr.parameters[x] <- false.negatives.parameters[x]/(false.negatives.parameters[x] + true.positives.parameters[x])
}
fnr.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fnr.kmeans[x] <- false.negatives.kmeans[x]/(false.negatives.kmeans[x] + true.positives.kmeans[x])
}
fnr.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fnr.glob[x] <- false.negatives.glob[x]/(false.negatives.glob[x] + true.positives.glob[x])
}
fpr.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fpr.parameters[x] <- false.positives.parameters[x]/(false.positives.parameters[x]+true.negatives.parameters[x])
}
fpr.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fpr.kmeans[x] <- false.positives.kmeans[x]/(false.positives.kmeans[x]+true.negatives.kmeans[x])
}
fpr.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fpr.glob[x] <- false.positives.glob[x]/(false.positives.glob[x]+true.negatives.glob[x])
}
precision.parameters <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.parameters[x] <- true.positives.parameters[x]/(true.positives.parameters[x] + false.positives.parameters[x])
}
precision.kmeans <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.kmeans[x] <- true.positives.kmeans[x]/(true.positives.kmeans[x] + false.positives.kmeans[x])
}
precision.glob <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.glob[x] <- true.positives.glob[x]/(true.positives.glob[x] + false.positives.glob[x])
}
non.comparable.mvm.parameters <- rownames(comp.mvm.parameters)[which(!(rownames(comp.mvm.parameters) %in% non.rdeep$Entry_Name) & (!(rownames(comp.mvm.parameters) %in% rownames(rdeep))))]
non.comparable.zt.parameters <- rownames(comp.zt.parameters)[which(!(rownames(comp.zt.parameters) %in% non.rdeep$Entry_Name) & (!(rownames(comp.zt.parameters) %in% rownames(rdeep))))]
non.comparable.mms.parameters <- rownames(comp.mms.parameters)[which(!(rownames(comp.mms.parameters) %in% non.rdeep$Entry_Name) & (!(rownames(comp.mms.parameters) %in% rownames(rdeep))))]
non.comparable.mvm.kmeans <- rownames(comp.mvm.kmeans)[which(!(rownames(comp.mvm.kmeans) %in% non.rdeep$Entry_Name) & (!(rownames(comp.mvm.kmeans) %in% rownames(rdeep))))]
non.comparable.zt.kmeans <- rownames(comp.zt.kmeans)[which(!(rownames(comp.zt.kmeans) %in% non.rdeep$Entry_Name) & (!(rownames(comp.zt.kmeans) %in% rownames(rdeep))))]
non.comparable.mms.kmeans <- rownames(comp.mms.kmeans)[which(!(rownames(comp.mms.kmeans) %in% non.rdeep$Entry_Name) & (!(rownames(comp.mms.kmeans) %in% rownames(rdeep))))]
#shifting?
shifting.non.comparable.mvm.parameters <- comp.mvm.parameters[which(!(rownames(comp.mvm.parameters) %in% non.rdeep$Entry_Name) & (!(rownames(comp.mvm.parameters) %in% rownames(rdeep)))),]
shifting.non.comparable.zt.parameters <- comp.zt.parameters[which(!(rownames(comp.zt.parameters) %in% non.rdeep$Entry_Name) & (!(rownames(comp.zt.parameters) %in% rownames(rdeep)))),]
shifting.non.comparable.mms.parameters <- comp.mms.parameters[which(!(rownames(comp.mms.parameters) %in% non.rdeep$Entry_Name) & (!(rownames(comp.mms.parameters) %in% rownames(rdeep)))),]
shifting.non.comparable.mvm.kmeans <- comp.mvm.kmeans[which(!(rownames(comp.mvm.kmeans) %in% non.rdeep$Entry_Name) & (!(rownames(comp.mvm.kmeans) %in% rownames(rdeep)))),]
shifting.non.comparable.zt.kmeans <- comp.zt.kmeans[which(!(rownames(comp.zt.kmeans) %in% non.rdeep$Entry_Name) & (!(rownames(comp.zt.kmeans) %in% rownames(rdeep)))),]
shifting.non.comparable.mms.kmeans <- comp.mms.kmeans[which(!(rownames(comp.mms.kmeans) %in% non.rdeep$Entry_Name) & (!(rownames(comp.mms.kmeans) %in% rownames(rdeep)))),]
non.comparable.parameters <- data.frame(mvm = c(non.comparable.mvm.parameters, length(non.comparable.mvm.parameters)),
"is shift? mvm" = c(shifting.non.comparable.mvm.parameters,
sum(shifting.non.comparable.mvm.parameters)),
zt = c(non.comparable.zt.parameters, length(non.comparable.zt.parameters)),
"is shift? zt" = c(shifting.non.comparable.zt.parameters,
sum(shifting.non.comparable.zt.parameters)),
mms = c(non.comparable.mms.parameters,length(non.comparable.mms.parameters)),
"is shift? mms" = c(shifting.non.comparable.mms.parameters,
sum(shifting.non.comparable.mms.parameters)))
colnames(non.comparable.parameters) = c("mvm", "shift?", "zt", "shift?", "mms", "shift?")
non.comparable.kmeans <- data.frame(mvm = c(non.comparable.mvm.kmeans, length(non.comparable.mvm.kmeans)),
"is shift? mvm" = c(shifting.non.comparable.mvm.kmeans,
sum(shifting.non.comparable.mvm.kmeans)),
zt = c(non.comparable.zt.kmeans, length(non.comparable.zt.kmeans)),
"is shift? zt" = c(shifting.non.comparable.zt.kmeans,
sum(shifting.non.comparable.zt.kmeans)),
mms = c(non.comparable.mms.kmeans,length(non.comparable.mms.kmeans)),
"is shift? mms" = c(shifting.non.comparable.mms.kmeans,
sum(shifting.non.comparable.mms.kmeans)))
colnames(non.comparable.kmeans) = c("mvm", "shift?", "zt", "shift?", "mms", "shift?")
number.non.comparable.parameters <- data.frame(mvm = length(non.comparable.mvm.parameters),
zt = length(non.comparable.zt.parameters),
mms = length(non.comparable.mms.parameters))
number.non.comparable.kmeans <- data.frame(mvm = length(non.comparable.mvm.kmeans),
zt = length(non.comparable.zt.kmeans),
mms = length(non.comparable.mms.kmeans))
#View(non.comparable.parameters)
#View(non.comparable.kmeans)
#for the results of our parameters
summary.numbers.parameters <- rbind(true.positives.parameters, false.positives.parameters, true.negatives.parameters, false.negatives.parameters)
rownames(summary.numbers.parameters) = c("True Positives","False Positives", "True Negatives", "False Negatives")
summary.rates.parameters <- rbind(fnr.parameters , fpr.parameters, precision.parameters)
rownames(summary.rates.parameters) = c("FNR", "FPR", "Precision")
#View(summary.numbers.parameters)
#View(summary.rates.parameters)
#for the results of kmeans
summary.numbers.kmeans <- rbind(true.positives.kmeans, false.positives.kmeans, true.negatives.kmeans, false.negatives.kmeans)
rownames(summary.numbers.kmeans) = c("True Positives","False Positives", "True Negatives", "False Negatives")
summary.rates.kmeans <- rbind(fnr.kmeans , fpr.kmeans, precision.kmeans)
rownames(summary.rates.kmeans) = c("FNR", "FPR", "Precision")
#View(summary.numbers.kmeans)
#View(summary.rates.kmeans)
#for the results of global shift
summary.numbers.glob <- rbind(true.positives.glob, false.positives.glob, true.negatives.glob, false.negatives.glob)
rownames(summary.numbers.glob) = c("True Positives","False Positives", "True Negatives", "False Negatives")
summary.rates.glob <- rbind(fnr.glob , fpr.glob, precision.glob)
rownames(summary.rates.glob) = c("FNR", "FPR", "Precision")
#View(summary.numbers.glob)
#View(summary.rates.glob)
save.image("C:/Users/tinel/OneDrive/Dokumente/RUPRECHT-KARLS-UNIVERSITÄT HEIDELBERG/MOBI/HOCHSCHULSEMESTER4/DATAANALYSIS/topic03_team04/Environment.RData")
