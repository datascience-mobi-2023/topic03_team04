#if (res.km$cluster[y] == 1){
#res.km$cluster[y] <- "Light Proteins"
#}
#if (res.km$cluster[y] == 2){
#res.km$cluster[y] <- "Heavy Proteins"
#}
#if (res.km$cluster[y] == 3){
#res.km$cluster[y] <- "Medium Proteins"
#}}
g <- fviz_cluster(res.km, data = df,
geom = "point",
xlab = "Global Control Peaks",
ylab = "Global RNase Peaks",
main = title[x],
ggtheme = theme_bw())
plot.cluster.fractions[[x]] <- g + theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
print(plot.cluster.fractions[[x]])
}
library("ggpubr")
library("factoextra")
library("ggplot2")
df.peaks <- data.frame(cbind(globalpeak.ctrl.mvm, globalpeak.rnase.mvm, globalpeak.ctrl.zt, globalpeak.rnase.zt, globalpeak.ctrl.mms, globalpeak.rnase.mms))
plot.cluster.fractions <- list()
title <- c("Clusters of Peaks calculated after MVM","Clusters of Peaks calculated after z-Transformation", "Clusters of Peaks calculated after MMS")
for (x in 1:3){
df <- df.peaks[,(2*x -1):(2*x)]
set.seed(666)
res.km <- kmeans(scale(df[, -5]), 4, nstart = 25)
#for (y in 1:length(res.km$cluster)){
#if (res.km$cluster[y] == 1){
#res.km$cluster[y] <- "Light Proteins"
#}
#if (res.km$cluster[y] == 2){
#res.km$cluster[y] <- "Heavy Proteins"
#}
#if (res.km$cluster[y] == 3){
#res.km$cluster[y] <- "Medium Proteins"
#}}
g <- fviz_cluster(res.km, data = df,
geom = "point",
xlab = "Global Control Peaks",
ylab = "Global RNase Peaks",
main = title[x],
ggtheme = theme_bw())
plot.cluster.fractions[[x]] <- g + theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
print(plot.cluster.fractions[[x]])
}
library("ggpubr")
library("factoextra")
library("ggplot2")
df.peaks <- data.frame(cbind(globalpeak.ctrl.mvm, globalpeak.rnase.mvm, globalpeak.ctrl.zt, globalpeak.rnase.zt, globalpeak.ctrl.mms, globalpeak.rnase.mms))
plot.cluster.fractions <- list()
title <- c("Clusters of Peaks calculated after MVM","Clusters of Peaks calculated after z-Transformation", "Clusters of Peaks calculated after MMS")
res.km <- list()
for (x in 1:3){
df <- df.peaks[,(2*x -1):(2*x)]
set.seed(666)
res.km[[x]] <- kmeans(scale(df[, -5]), 4, nstart = 25)
#for (y in 1:length(res.km$cluster)){
#if (res.km$cluster[y] == 1){
#res.km$cluster[y] <- "Light Proteins"
#}
#if (res.km$cluster[y] == 2){
#res.km$cluster[y] <- "Heavy Proteins"
#}
#if (res.km$cluster[y] == 3){
#res.km$cluster[y] <- "Medium Proteins"
#}}
g <- fviz_cluster(res.km[[x]], data = df,
geom = "point",
xlab = "Global Control Peaks",
ylab = "Global RNase Peaks",
main = title[x],
ggtheme = theme_bw())
plot.cluster.fractions[[x]] <- g + theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
print(plot.cluster.fractions[[x]])
}
length(res.km[[1]][,1])
dim(res.km[[1]][,1])
dim(res.km[[1]][1])
length(res.km[[1]][1])
View(res.km)
View(res.km[[1]])
length(res.km[[1]]$cluster])
length(res.km[[1]]$cluster)
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.clustering <- as.data.frame(matrix(NA, ncol = 3, nrow = res.km[[1]]$cluster))
for(z in 1:3){
for (x in length(res.km[[z]]$cluster)){
if (length(res.km[[z]]$cluster) == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
View(shift.clustering)
shift.clustering <- data.frame(MVM <- rep(NA, res.km[[1]]$cluster),
zt <- rep(NA, res.km[[1]]$cluster),
MMS <- rep(NA, res.km[[1]]$cluster))
shift.clustering <- data.frame(MVM <- rep(NA, length(res.km[[1]]$cluster)),
shift.clustering <- data.frame(MVM <- rep(NA, length(res.km[[1]]$cluster)),
zt <- rep(NA, length(res.km[[1]]$cluster)),
MMS <- rep(NA, length(res.km[[1]]$cluster)))
View(shift.clustering)
length(res.km[[1]]$cluster)
shift.clustering <- data.frame(MVM <- rep(NA, 3074),
zt <- rep(NA, length(res.km[[1]]$cluster)),
MMS <- rep(NA, length(res.km[[1]]$cluster)))
View(shift.clustering)
shift.clustering <- data.frame(MVM = rep(NA, 3074),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
View(shift.clustering)
shift.clustering <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
View(shift.clustering)
for(z in 1:3){
for (x in length(res.km[[z]]$cluster)){
if (length(res.km[[z]]$cluster) == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
View(shift.clustering)
for(z in 1:3){
for (x in length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
View(shift.clustering)
(res.km[[1]]$cluster)[1]
(res.km[[1]]$cluster)[2]
which((res.km[[1]]$cluster)[2] == 2)
which((res.km[[1]]$cluster)[2] == 1)
which((res.km[[1]]$cluster) == 2)
res.km[[1]]$cluster[25] == 2
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.clustering <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
for(z in 1:3){
for (x in length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
View(shift.clustering)
which((res.km[[1]]$cluster) == cluster.nr[2])
which((res.km[[1]]$cluster) == cluster.nr[1])
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.clustering <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
View(shift.clustering)
sum(shift.clustering[,1] == 1)
sum(shift.clustering[,1] == 1)
sum(shift.clustering[,1] == 2)
sum(shift.clustering[,1] == 3)
sum(shift.clustering[,1] == 1)
sum(shift.clustering[,2] == 1)
sum(shift.clustering[,3] == 1)
View(parameters.mvm)
rownames(shift.clustering) = rownames(parameters.mms)
dim(parameters.mms)
dim(rownames((parameters.mms))
dim(rownames(parameters.mms))
rownames(parameters.mms)
length(rownames(parameters.mms))
dim(shift.clustering)
rownames(shift.clustering) = rownames(parameters.mms)
View(shift.clustering)
rownames(shift.clustering) = rownames(parameters.mms)
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.clustering <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
rownames(shift.clustering) = rownames(parameters.mms)
View(shift.clustering)
#sum(shift.clustering[,1] == 1)
#sum(shift.clustering[,2] == 1)
#sum(shift.clustering[,3] == 1)
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
shift.clustering <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.clustering <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
rownames(shift.clustering) = rownames(parameters.mms)
View(shift.clustering)
#sum(shift.clustering[,1] == 1)
#sum(shift.clustering[,2] == 1)
#sum(shift.clustering[,3] == 1)
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.clustering <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
#sum(shift.clustering[,1] == 1)
#sum(shift.clustering[,2] == 1)
#sum(shift.clustering[,3] == 1)
length(res.km[[1]]$cluster)
knitr::opts_chunk$set(echo = TRUE)
library("ggpubr")
library("factoextra")
library("ggplot2")
df <- data.frame(cbind(shoulderregion.zt.v, shoulderregion.zt.v))
res.km <- kmeans(scale(df[, -5]), 3, nstart = 25, algorithm = "Hartigan-Wong")
g <- fviz_cluster(res.km, data = df,
geom = "point",
xlab = "Shoulderregion",
ylab = "Shoulderregion",
main = "Clusters of Shoulderregions",
ggtheme = theme_bw(),)
g + theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
library("ggpubr")
library("factoextra")
library("ggplot2")
df.precipitation <- data.frame(cbind(precipitated.mvm.v, precipitated.mvm.v, precipitated.zt.v, precipitated.zt.v, precipitated.mms.v, precipitated.mms.v))
plot.cluster.precipitated <- list()
for (x in 1:3){
df <- df.precipitation[,(2*x-1):(2*x)]
res.km <-
kmeans(scale(df[, -5]), 2, nstart = 25, algorithm = "Hartigan-Wong")
title <- c("Clusters of Precipitation calculated after MVM",
"Clusters of Precipitation calculated after z-Transformation",
"Clusters of Precipitation calculated after MMS")
g <- fviz_cluster(res.km, data = df,
geom = "point",
xlab = "Precipitation",
ylab = "Precipitation",
main = title[x],
ggtheme = theme_bw(),)
plot.cluster.precipitated[[x]]<-
g #+ theme(axis.text.x = element_blank(),
#        axis.text.y = element_blank(),
#       axis.ticks = element_blank())
print(plot.cluster.precipitated[[x]])
}
library("ggpubr")
library("factoextra")
library("ggplot2")
df.shifts <- data.frame(cbind(shift_mvm_global, shift_mvm_global, shift_zt_global, shift_zt_global, shift_mms_global, shift_mms_global))
plot.cluster.shifts <- list()
title <- c("Clusters of Peaks calculated after MVM", "Clusters of Peaks calculated after z-Transformation", "Clusters of Peaks calculated after MMS")
for (x in 1:3){
df <- df.shifts[,(2*x-1):(2*x)]
res.km <- kmeans(scale(df[, -5]), 3, nstart = 25, algorithm = "Hartigan-Wong")
plot.cluster.shifts[[x]] <- fviz_cluster(res.km, data = df,
geom = "point",
xlab = "Global Shift",
ylab = "Global Shift",
main = title[x],
ggtheme = theme_bw())
print(plot.cluster.shifts[[x]])
}
library("ggpubr")
library("factoextra")
library("ggplot2")
df.shifts <- data.frame(cbind(shift_mvm_global, shift_mvm_global, shift_zt_global, shift_zt_global, shift_mms_global, shift_mms_global))
plot.cluster.shifts <- list()
title <- c("Clusters of Peaks calculated after MVM", "Clusters of Peaks calculated after z-Transformation", "Clusters of Peaks calculated after MMS")
for (x in 1:3){
df <- df.shifts[,(2*x-1):(2*x)]
res.km <- kmeans(scale(df[, -5]), 4, nstart = 25, algorithm = "Hartigan-Wong")
plot.cluster.shifts[[x]] <- fviz_cluster(res.km, data = df,
geom = "point",
xlab = "Global Shift",
ylab = "Global Shift",
main = title[x],
ggtheme = theme_bw())
print(plot.cluster.shifts[[x]])
}
library("ggpubr")
library("factoextra")
library("ggplot2")
df.shifts <- data.frame(cbind(shift_mvm_global, shift_mvm_global, shift_zt_global, shift_zt_global, shift_mms_global, shift_mms_global))
plot.cluster.shifts <- list()
title <- c("Clusters of Peaks calculated after MVM", "Clusters of Peaks calculated after z-Transformation", "Clusters of Peaks calculated after MMS")
for (x in 1:3){
df <- df.shifts[,(2*x-1):(2*x)]
res.km <- kmeans(scale(df[, -5]), 3, nstart = 25, algorithm = "Hartigan-Wong")
plot.cluster.shifts[[x]] <- fviz_cluster(res.km, data = df,
geom = "point",
xlab = "Global Shift",
ylab = "Global Shift",
main = title[x],
ggtheme = theme_bw())
print(plot.cluster.shifts[[x]])
}
knitr::opts_chunk$set(echo = TRUE)
rdeep <- read.csv('RBP2GO_Human_database_RBPs.csv', header=TRUE, row.names=1, sep = ";")
View(rdeep)
View(shift.clustering)
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.clustering <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
library("ggpubr")
library("factoextra")
library("ggplot2")
df.peaks <- data.frame(cbind(globalpeak.ctrl.mvm, globalpeak.rnase.mvm, globalpeak.ctrl.zt, globalpeak.rnase.zt, globalpeak.ctrl.mms, globalpeak.rnase.mms))
plot.cluster.fractions <- list()
title <- c("Clusters of Peaks calculated after MVM","Clusters of Peaks calculated after z-Transformation", "Clusters of Peaks calculated after MMS")
res.km <- list()
for (x in 1:3){
df <- df.peaks[,(2*x -1):(2*x)]
set.seed(666)
res.km[[x]] <- kmeans(scale(df[, -5]), 4, nstart = 25)
#for (y in 1:length(res.km$cluster)){
#if (res.km$cluster[y] == 1){
#res.km$cluster[y] <- "Light Proteins"
#}
#if (res.km$cluster[y] == 2){
#res.km$cluster[y] <- "Heavy Proteins"
#}
#if (res.km$cluster[y] == 3){
#res.km$cluster[y] <- "Medium Proteins"
#}}
g <- fviz_cluster(res.km[[x]], data = df,
geom = "point",
xlab = "Global Control Peaks",
ylab = "Global RNase Peaks",
main = title[x],
ggtheme = theme_bw())
plot.cluster.fractions[[x]] <- g + theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
print(plot.cluster.fractions[[x]])
}
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.clustering <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
rownames(shift.clustering) = rownames(parameters.mms)
View(shift.clustering)
#sum(shift.clustering[,1] == 1)
#sum(shift.clustering[,2] == 1)
#sum(shift.clustering[,3] == 1)
text <- "Table_HS_Non_RBP.txt"
csv <- "Table_HS_Non_RBP.csv"
View(text)
View(csv)
View(non.rdeep.text)
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
text <- "Table_HS_Non_RBP.txt"
csv <- "Table_HS_Non_RBP.csv"
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
# CSV-Datei schreiben
write.csv(non.rdeep.text,csv, row.names = FALSE)
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
rdeep <- read.csv('RBP2GO_Human_database_RBPs.csv', header=TRUE, row.names=1, sep = ";")
text <- "Table_HS_Non_RBP.txt"
csv <- "Table_HS_Non_RBP.csv"
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
getwd()
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.kmeans <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.kmeans[x,z] <- 1
}else{shift.kmeans[x,z] <- 0}
}}
rownames(shift.kmeans) = rownames(parameters.mms)
View(shift.kmeans)
#sum(shift.kmeans[,1] == 1)
#sum(shift.kmeans[,2] == 1)
#sum(shift.kmeans[,3] == 1)
# the proteins identified by our four parameters:
View(shift_mvm)
shift_mvm <- as.data.frame(shift.vector.mvm)
shift_zt <- as.data.frame(shift.vector.zt)
shift_mms <- as.data.frame(shift.vector.mms)
# the proteins identified by our four parameters:
View(shift_mvm)
dim(shift_mvm)
# the proteins identified by kmeans-clustering:
View(shift.kmeans)
# the proteins identified by our four parameters:
View(shift_mvm)
shift_zt
shift_mms
dim(shift_zt)
dim(shift_mms)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(shift_mvm, shift_zt, shift_mms)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(MVM = shift_mvm,
zt = shift_zt,
MMS = shift_mms)
View(shift.parameters)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(MVM = shift_mvm,
zt = shift_zt,
MMS = shift_mms)
View(shift.parameters)
# the proteins identified by kmeans-clustering:
View(shift.kmeans)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(MVM <- shift_mvm,
zt = shift_zt,
MMS = shift_mms)
View(shift.parameters)
# the proteins identified by kmeans-clustering:
View(shift.kmeans)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(MVM <- shift_mvm$shift.vector.mvm,
zt = shift_zt,
MMS = shift_mms)
View(shift.parameters)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(MVM <- shift_mvm,
zt = shift_zt,
MMS = shift_mms)
colnames(shift.parameters) = c("MVM", "zt", "MMS")
rownames(shift.parameters) = rownames(shift.kemans)
View(shift.parameters)
rownames(shift.parameters) = rownames(shift.kemans)
rownames(shift.parameters) = rownames(shift.kmeans)
View(shift.parameters)
counter <- 0
for (i in rownames.zt) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
knitr::opts_chunk$set(echo = TRUE)
comp.parameters <- shift.parameters
# the proteins identified by kmeans-clustering:
comp.kmeans <- shift.kmeans
