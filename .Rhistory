rnase.cor.naremoved <-
cbind(rnase.cor.rep1.rep2.naremoved <-
sapply(seq.int(dim(rnase.rep1.naremoved)[1]), function(x) cor(as.numeric(rnase.rep1.naremoved[x,]), as.numeric(rnase.rep2.naremoved[x,]))),
rnase.cor.rep2.rep3.naremoved <-
sapply(seq.int(dim(rnase.rep1.naremoved)[1]), function(x) cor(as.numeric(rnase.rep2.naremoved[x,]), as.numeric(rnase.rep3.naremoved[x,]))),
rnase.cor.rep1.rep3.naremoved <-
sapply(seq.int(dim(rnase.rep1.naremoved)[1]), function(x) cor(as.numeric(rnase.rep1.naremoved[x,]), as.numeric(rnase.rep3.naremoved[x,]))))
#View(ctrl.cor.naremoved)
non.reproducible.ctrl <- which(rowSums(ctrl.cor.naremoved<0.9)>2)
#length(non.reproducible.ctrl)
non.reproducible.rnase <- which(rowSums(rnase.cor.naremoved<0.9)>2)
#length(non.reproducible.rnase)
non.reproducible <- unique(c(which(rowSums(ctrl.cor.naremoved<0.9)>2), which(rowSums(rnase.cor.naremoved<0.9)>2)))
#length(non.reproducible)
length(non.reproducible.rnase)
length(non.reproducible.ctrl)
length(non.reproducible)
ctrl.rep <- MS.Table.naremoved[-non.reproducible,1:75]
rnase.rep <- MS.Table.naremoved[-non.reproducible,76:150]
ctrl.cor.removed <- ctrl.cor.naremoved [-non.reproducible,]
rnase.cor.removed <- rnase.cor.naremoved [-non.reproducible,]
for (x in 1:dim(ctrl.rep)[1]){
if (ctrl.cor.removed[x, 1] < 0.9) {
if (ctrl.cor.removed[x, 3] < 0.9){
ctrl.rep[x, 1:25] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep[x, 26:50] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep[x, 51:75] <- NA
}
}
}
for (x in 1:dim(rnase.rep)[1]){
if (rnase.cor.removed[x, 1] < 0.9) {
if (rnase.cor.removed[x, 3] < 0.9){
rnase.rep[x, 1:25] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep[x, 26:50] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep[x, 51:75] <- NA
}
}
}
#Nr <- c(1:dim(rnase.rep)[1])
#rnase.with.proteinnumbers <- cbind(Nr, rnase.rep[,1:25], Nr, rnase.rep[,26:50], Nr, rnase.rep[,51:75])
#View(rnase.with.proteinnumbers)
ctrl.clean <- ctrl.rep
rnase.clean <- rnase.rep
ctrl.rep1 <- ctrl.clean[,1:25]
ctrl.rep2 <- ctrl.clean[,26:50]
ctrl.rep3 <- ctrl.clean[,51:75]
rnase.rep1 <- rnase.clean[,1:25]
rnase.rep2 <- rnase.clean[,26:50]
rnase.rep3 <- rnase.clean[,51:75]
# Control Replicate 1 MVM
ctrl.rep1.mvm.norm <- t(apply(ctrl.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# View(ctrl.rep1.mvm.norm)
# Control Replicate 2 MVM
ctrl.rep2.mvm.norm <- t(apply(ctrl.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# Control Replicate 3 MVM
ctrl.rep3.mvm.norm <- t(apply(ctrl.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 1 MVM
rnase.rep1.mvm.norm <- t(apply(rnase.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 2 MVM
rnase.rep2.mvm.norm <- t(apply(rnase.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 3 MVM
rnase.rep3.mvm.norm <- t(apply(rnase.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
r1c <- ctrl.rep1.mvm.norm
r2c <- ctrl.rep2.mvm.norm
r3c <- ctrl.rep3.mvm.norm
r1c0 <- ctrl.rep1.mvm.norm
r2c0 <- ctrl.rep2.mvm.norm
r3c0 <- ctrl.rep3.mvm.norm
r1c0[is.na(r1c)] <- 0
r2c0[is.na(r2c)] <- 0
r3c0[is.na(r3c)] <- 0
ctrl.mvm.reduced <-  (r1c0 + r2c0 + r3c0)/(3-((sum(as.numeric(is.na(r1c[x,])) + as.numeric(is.na(r2c[x,])) + as.numeric(is.na(r3c[x,]))))/25))
#View(ctrl.mvm.reduced)
r1r <- rnase.rep1.mvm.norm
r2r <- rnase.rep2.mvm.norm
r3r <- rnase.rep3.mvm.norm
r1r0 <- rnase.rep1.mvm.norm
r2r0 <- rnase.rep2.mvm.norm
r3r0 <- rnase.rep3.mvm.norm
r1r0[is.na(r1r)] <- 0
r2r0[is.na(r2r)] <- 0
r3r0[is.na(r3r)] <- 0
rnase.mvm.reduced <-  (r1r0 + r2r0 + r3r0)/(3 - ((sum(as.numeric(is.na(r1r[x,])) + as.numeric(is.na(r2r[x,])) + as.numeric(is.na(r3r[x,]))))/25))
#View(rnase.mvm.reduced)
rnase.mvm.scaled =
sweep(rnase.mvm.reduced,1,100/rowSums(rnase.mvm.reduced),'*')
ctrl.mvm.scaled =
sweep(ctrl.mvm.reduced,1,100/rowSums(ctrl.mvm.reduced),'*')
# Check if the two data frames are identical
is_identical <- identical(ctrl.mvm.reduced, ctrl.mvm.scaled)
# Print the result
if (is_identical) {
print("The data frames are identical.")
} else {
print("The data frames are not identical.")
}
ctrl.mvm <- ctrl.mvm.scaled
rnase.mvm <- rnase.mvm.scaled
#View(ctrl.mvm)
#View(rnase.mvm)
ctrl.mvm <- ctrl.mvm.scaled
rnase.mvm <- rnase.mvm.scaled
View(ctrl.mvm)
View(rnase.mvm)
ctrl.rep <- MS.Table.naremoved[-non.reproducible,1:75]
rnase.rep <- MS.Table.naremoved[-non.reproducible,76:150]
ctrl.cor.removed <- ctrl.cor.naremoved [-non.reproducible,]
rnase.cor.removed <- rnase.cor.naremoved [-non.reproducible,]
View(ctrl.cor.removed)
View(ctrl.rep)
View(non.reproducible)
non.reproducible
non.reproducible.ctrl <- which(rowSums(ctrl.cor.naremoved<0.9)>2)
#length(non.reproducible.ctrl)
non.reproducible.rnase <- which(rowSums(rnase.cor.naremoved<0.9)>2)
#length(non.reproducible.rnase)
non.reproducible <- unique(which(rowSums(ctrl.cor.naremoved<0.9)>2), which(rowSums(rnase.cor.naremoved<0.9)>2))
#length(non.reproducible)
length(non.reproducible.rnase)
length(non.reproducible.ctrl)
length(non.reproducible)
non.reproducible.ctrl <- which(rowSums(ctrl.cor.naremoved<0.9)>2)
#length(non.reproducible.ctrl)
non.reproducible.rnase <- which(rowSums(rnase.cor.naremoved<0.9)>2)
#length(non.reproducible.rnase)
non.reproducible <- unique(c(which(rowSums(ctrl.cor.naremoved<0.9)>2), which(rowSums(rnase.cor.naremoved<0.9)>2)))
non.reproducible <- order(non.reproducible)
#length(non.reproducible)
length(non.reproducible.rnase)
length(non.reproducible.ctrl)
length(non.reproducible)
View(non.reproducible)
non.reproducible
non.reproducible.ctrl <- which(rowSums(ctrl.cor.naremoved<0.9)>2)
#length(non.reproducible.ctrl)
non.reproducible.rnase <- which(rowSums(rnase.cor.naremoved<0.9)>2)
#length(non.reproducible.rnase)
non.reproducible <- unique(c(which(rowSums(ctrl.cor.naremoved<0.9)>2), which(rowSums(rnase.cor.naremoved<0.9)>2)))
#length(non.reproducible)
length(non.reproducible.rnase)
length(non.reproducible.ctrl)
length(non.reproducible)
ctrl.rep <- MS.Table.naremoved[-non.reproducible,1:75]
rnase.rep <- MS.Table.naremoved[-non.reproducible,76:150]
ctrl.cor.removed <- ctrl.cor.naremoved [-non.reproducible,]
rnase.cor.removed <- rnase.cor.naremoved [-non.reproducible,]
View(ctrl.rep)
View(non.reproducible)
non.reproducible.ctrl <- which(rowSums(ctrl.cor.naremoved<0.9)>2)
#length(non.reproducible.ctrl)
non.reproducible.rnase <- which(rowSums(rnase.cor.naremoved<0.9)>2)
#length(non.reproducible.rnase)
non.reproducible <- unique(c(which(rowSums(ctrl.cor.naremoved<0.9)>2), which(rowSums(rnase.cor.naremoved<0.9)>2)))
#length(non.reproducible)
length(non.reproducible.rnase)
length(non.reproducible.ctrl)
length(non.reproducible)
ctrl.rep <- MS.Table.naremoved[-non.reproducible,1:75]
rnase.rep <- MS.Table.naremoved[-non.reproducible,76:150]
ctrl.cor.removed <- ctrl.cor.naremoved [-non.reproducible,]
rnase.cor.removed <- rnase.cor.naremoved [-non.reproducible,]
View(ctrl.rep)
View(non.reproducible)
View(ctrl.rep)
ctrl.rep <- MS.Table.naremoved[-non.reproducible,1:75]
rnase.rep <- MS.Table.naremoved[-non.reproducible,76:150]
ctrl.cor.removed <- ctrl.cor.naremoved [-non.reproducible,]
rnase.cor.removed <- rnase.cor.naremoved [-non.reproducible,]
View(ctrl.rep)
View(MS.Table.naremoved[,1:75])
View(non.reproducible)
for (x in 1:dim(ctrl.rep)[1]){
if (ctrl.cor.removed[x, 1] < 0.9) {
if (ctrl.cor.removed[x, 3] < 0.9){
ctrl.rep[x, 1:25] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep[x, 26:50] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep[x, 51:75] <- NA
}
}
}
for (x in 1:dim(rnase.rep)[1]){
if (rnase.cor.removed[x, 1] < 0.9) {
if (rnase.cor.removed[x, 3] < 0.9){
rnase.rep[x, 1:25] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep[x, 26:50] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep[x, 51:75] <- NA
}
}
}
#Nr <- c(1:dim(rnase.rep)[1])
#rnase.with.proteinnumbers <- cbind(Nr, rnase.rep[,1:25], Nr, rnase.rep[,26:50], Nr, rnase.rep[,51:75])
#View(rnase.with.proteinnumbers)
ctrl.clean <- ctrl.rep
rnase.clean <- rnase.rep
ctrl.rep1 <- ctrl.clean[,1:25]
ctrl.rep2 <- ctrl.clean[,26:50]
ctrl.rep3 <- ctrl.clean[,51:75]
rnase.rep1 <- rnase.clean[,1:25]
rnase.rep2 <- rnase.clean[,26:50]
rnase.rep3 <- rnase.clean[,51:75]
# Control Replicate 1 MVM
ctrl.rep1.mvm.norm <- t(apply(ctrl.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# View(ctrl.rep1.mvm.norm)
# Control Replicate 2 MVM
ctrl.rep2.mvm.norm <- t(apply(ctrl.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# Control Replicate 3 MVM
ctrl.rep3.mvm.norm <- t(apply(ctrl.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 1 MVM
rnase.rep1.mvm.norm <- t(apply(rnase.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 2 MVM
rnase.rep2.mvm.norm <- t(apply(rnase.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 3 MVM
rnase.rep3.mvm.norm <- t(apply(rnase.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
r1c <- ctrl.rep1.mvm.norm
r2c <- ctrl.rep2.mvm.norm
r3c <- ctrl.rep3.mvm.norm
r1c0 <- ctrl.rep1.mvm.norm
r2c0 <- ctrl.rep2.mvm.norm
r3c0 <- ctrl.rep3.mvm.norm
r1c0[is.na(r1c)] <- 0
r2c0[is.na(r2c)] <- 0
r3c0[is.na(r3c)] <- 0
ctrl.mvm.reduced <-  (r1c0 + r2c0 + r3c0)/(3-((sum(as.numeric(is.na(r1c[x,])) + as.numeric(is.na(r2c[x,])) + as.numeric(is.na(r3c[x,]))))/25))
#View(ctrl.mvm.reduced)
r1r <- rnase.rep1.mvm.norm
r2r <- rnase.rep2.mvm.norm
r3r <- rnase.rep3.mvm.norm
r1r0 <- rnase.rep1.mvm.norm
r2r0 <- rnase.rep2.mvm.norm
r3r0 <- rnase.rep3.mvm.norm
r1r0[is.na(r1r)] <- 0
r2r0[is.na(r2r)] <- 0
r3r0[is.na(r3r)] <- 0
rnase.mvm.reduced <-  (r1r0 + r2r0 + r3r0)/(3 - ((sum(as.numeric(is.na(r1r[x,])) + as.numeric(is.na(r2r[x,])) + as.numeric(is.na(r3r[x,]))))/25))
#View(rnase.mvm.reduced)
ctrl.mvm.scaled =
sweep(ctrl.mvm.reduced,1,100/rowSums(ctrl.mvm.reduced),'*')
# Check if the two data frames are identical
is_identical <- identical(ctrl.mvm.reduced, ctrl.mvm.scaled)
# Print the result
if (is_identical) {
print("The data frames are identical.")
} else {
print("The data frames are not identical.")
}
rnase.mvm.scaled =
sweep(rnase.mvm.reduced,1,100/rowSums(rnase.mvm.reduced),'*')
ctrl.mvm <- ctrl.mvm.scaled
rnase.mvm <- rnase.mvm.scaled
View(ctrl.mvm)
View(rnase.mvm)
ctrl.mvm <- ctrl.mvm.scaled
rnase.mvm <- rnase.mvm.scaled
View(ctrl.mvm)
View(rnase.mvm)
ctrl.reprod <- MS.Table.naremoved[-non.reproducible,1:75]
rnase.reprod <- MS.Table.naremoved[-non.reproducible,76:150]
ctrl.rep1z <- ctrl.reprod[,1:25]
ctrl.rep2z <- ctrl.reprod[,26:50]
ctrl.rep3z <- ctrl.reprod[,51:75]
rnase.rep1z <- rnase.reprod[,1:25]
rnase.rep2z <- rnase.reprod[,26:50]
rnase.rep3z <- rnase.reprod[,51:75]
sd.ctrl <- apply(ctrl.rep1z, 1, sd)
mean.ctrl.rep1 <- apply(ctrl.rep1z, 1, mean)
mean.ctrl.rep2 <- apply(ctrl.rep2z, 1, mean)
mean.ctrl.rep3 <- apply(ctrl.rep3z, 1, mean)
ctrl.rep1.meanvalue <- sweep(ctrl.rep1z,1,mean.ctrl.rep1,'-')
ctrl.rep1.zt.norm <- sweep(ctrl.rep1.meanvalue,1,sd.ctrl,'/')
ctrl.rep2.meanvalue <- sweep(ctrl.rep2z,1,mean.ctrl.rep2,'-')
ctrl.rep2.zt.norm <- sweep(ctrl.rep2.meanvalue,1,sd.ctrl,'/')
ctrl.rep3.meanvalue <- sweep(ctrl.rep3z,1,mean.ctrl.rep3,'-')
ctrl.rep3.zt.norm <- sweep(ctrl.rep3.meanvalue,1,sd.ctrl,'/')
#calculate again the min value for each protein
min.ctrl.rep1.zt.norm <- apply(ctrl.rep1.zt.norm, 1, min)
min.ctrl.rep2.zt.norm <- apply(ctrl.rep2.zt.norm, 1, min)
min.ctrl.rep3.zt.norm <- apply(ctrl.rep3.zt.norm, 1, min)
#substract the min value from each position to discard the 0
ctrl.rep1.zt.norm.pos <- sweep(ctrl.rep1.zt.norm,1,min.ctrl.rep1.zt.norm,FUN = '-')
ctrl.rep2.zt.norm.pos <- sweep(ctrl.rep2.zt.norm,1,min.ctrl.rep2.zt.norm,FUN = '-')
ctrl.rep3.zt.norm.pos <- sweep(ctrl.rep3.zt.norm,1,min.ctrl.rep3.zt.norm,FUN = '-')
sd.rnase = apply(rnase.rep1z, 1, sd)
mean.rnase.rep1 <- apply(rnase.rep1z, 1, mean)
mean.rnase.rep2 <- apply(rnase.rep2z, 1, mean)
mean.rnase.rep3 <- apply(rnase.rep3z, 1, mean)
rnase.rep1.meanvalue <- sweep(rnase.rep1z,1,mean.rnase.rep1,'-')
rnase.rep1.zt.norm <- sweep(rnase.rep1.meanvalue,1,sd.rnase,'/')
rnase.rep2.meanvalue <- sweep(rnase.rep2z,1,mean.rnase.rep2,'-')
rnase.rep2.zt.norm <- sweep(rnase.rep2.meanvalue,1,sd.rnase,'/')
rnase.rep3.meanvalue <- sweep(rnase.rep3z,1,mean.rnase.rep3,'-')
rnase.rep3.zt.norm <- sweep(rnase.rep3.meanvalue,1,sd.rnase,'/')
#calculate again the min value for each protein
min.rnase.rep1.zt.norm <- apply(rnase.rep1.zt.norm, 1, min)
min.rnase.rep2.zt.norm <- apply(rnase.rep2.zt.norm, 1, min)
min.rnase.rep3.zt.norm <- apply(rnase.rep3.zt.norm, 1, min)
#substract the min value from each position to discard the 0
rnase.rep1.zt.norm.pos <- sweep(rnase.rep1.zt.norm,1,min.rnase.rep1.zt.norm,FUN = '-')
rnase.rep2.zt.norm.pos <- sweep(rnase.rep2.zt.norm,1,min.rnase.rep2.zt.norm,FUN = '-')
rnase.rep3.zt.norm.pos <- sweep(rnase.rep3.zt.norm,1,min.rnase.rep3.zt.norm,FUN = '-')
for (x in 1:dim(ctrl.rep1.zt.norm.pos)[1]){
if (ctrl.cor.removed[x, 1] < 0.9) {
if (ctrl.cor.removed[x, 3] < 0.9){
ctrl.rep1.zt.norm.pos[x, ] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep2.zt.norm.pos[x, ] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep3.zt.norm.pos[x, ] <- NA
}
}
}
for (x in 1:dim(rnase.rep1.zt.norm.pos)[1]){
if (rnase.cor.removed[x, 1] < 0.9) {
if (rnase.cor.removed[x, 3] < 0.9){
rnase.rep1.zt.norm.pos[x, ] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep1.zt.norm.pos[x, ] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep1.zt.norm.pos[x, ] <- NA
}
}
}
Nr <- c(1:dim(rnase.rep1.zt.norm.pos)[1])
rnase.with.proteinnumbers <- cbind(Nr, rnase.rep1.zt.norm.pos, Nr, rnase.rep2.zt.norm.pos, Nr, rnase.rep3.zt.norm.pos)
View(rnase.with.proteinnumbers)
r1c <- ctrl.rep1.zt.norm.pos
r2c <- ctrl.rep2.zt.norm.pos
r3c <- ctrl.rep3.zt.norm.pos
r1c0 <- ctrl.rep1.zt.norm.pos
r2c0 <- ctrl.rep2.zt.norm.pos
r3c0 <- ctrl.rep3.zt.norm.pos
r1c0[is.na(r1c)] <- 0
r2c0[is.na(r2c)] <- 0
r3c0[is.na(r3c)] <- 0
ctrl.zt.reduced <-  (r1c0 + r2c0 + r3c0)/(3-((sum(as.numeric(is.na(r1c[x,])) + as.numeric(is.na(r2c[x,])) + as.numeric(is.na(r3c[x,]))))/25))
#View(ctrl.zt.reduced)
r1r <- rnase.rep1.zt.norm.pos
r2r <- rnase.rep2.zt.norm.pos
r3r <- rnase.rep3.zt.norm.pos
r1r0 <- rnase.rep1.zt.norm.pos
r2r0 <- rnase.rep2.zt.norm.pos
r3r0 <- rnase.rep3.zt.norm.pos
r1r0[is.na(r1r)] <- 0
r2r0[is.na(r2r)] <- 0
r3r0[is.na(r3r)] <- 0
rnase.zt.reduced <-  (r1r0 + r2r0 + r3r0)/(3 - ((sum(as.numeric(is.na(r1r[x,])) + as.numeric(is.na(r2r[x,])) + as.numeric(is.na(r3r[x,]))))/25))
#View(rnase.zt.reduced)
ctrl.rep1.zt.scaled =
sweep(ctrl.rep1.zt.norm.pos,1,100/rowSums(ctrl.rep1.zt.norm.pos),'*')
# rowSums(ctrl.rep1.zt.scaled)
ctrl.rep2.zt.scaled =
sweep(ctrl.rep2.zt.norm.pos,1,100/rowSums(ctrl.rep2.zt.norm.pos),'*')
# rowSums(ctrl.rep2.zt.scaled)
ctrl.rep3.zt.scaled =
sweep(ctrl.rep3.zt.norm.pos,1,100/rowSums(ctrl.rep3.zt.norm.pos),'*')
# rowSums(ctrl.rep3.zt.scaled)
ctrl.zt.scaled =
sweep(ctrl.zt.reduced,1,100/rowSums(ctrl.zt.reduced),'*')
# rowSums(ctrl.zt.scaled)
rnase.zt.scaled =
sweep(rnase.zt.reduced,1,100/rowSums(rnase.zt.reduced),'*')
# rowSums(rnase.zt.scaled)
ctrl.zt <- ctrl.zt.scaled
rnase.zt <- rnase.zt.scaled
View(ctrl.zt)
View(rnase.zt)
# Control Replicate 1 MMS
ctrl.rep1.mms.norm <- t(apply(ctrl.rep1, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# Control Replicate 2 MMS
ctrl.rep2.mms.norm <- t(apply(ctrl.rep2, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# Control Replicate 3 MMS
ctrl.rep3.mms.norm <- t(apply(ctrl.rep3, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# RNase Replicate 1 MMS
rnase.rep1.mms.norm <- t(apply(rnase.rep1, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# RNase Replicate 2 MMS
rnase.rep2.mms.norm <- t(apply(rnase.rep2, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# RNase Replicate 2 MMS
rnase.rep3.mms.norm <- t(apply(rnase.rep3, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
r1c <- ctrl.rep1.mms.norm
r2c <- ctrl.rep2.mms.norm
r3c <- ctrl.rep3.mms.norm
r1c0 <- ctrl.rep1.mms.norm
r2c0 <- ctrl.rep2.mms.norm
r3c0 <- ctrl.rep3.mms.norm
r1c0[is.na(r1c)] <- 0
r2c0[is.na(r2c)] <- 0
r3c0[is.na(r3c)] <- 0
ctrl.mms.reduced <-  (r1c0 + r2c0 + r3c0)/(3-((sum(as.numeric(is.na(r1c[x,])) + as.numeric(is.na(r2c[x,])) + as.numeric(is.na(r3c[x,]))))/25))
#View(ctrl.mms.reduced)
r1r <- rnase.rep1.mms.norm
r2r <- rnase.rep2.mms.norm
r3r <- rnase.rep3.mms.norm
r1r0 <- rnase.rep1.mms.norm
r2r0 <- rnase.rep2.mms.norm
r3r0 <- rnase.rep3.mms.norm
r1r0[is.na(r1r)] <- 0
r2r0[is.na(r2r)] <- 0
r3r0[is.na(r3r)] <- 0
rnase.mms.reduced <-  (r1r0 + r2r0 + r3r0)/(3 - ((sum(as.numeric(is.na(r1r[x,])) + as.numeric(is.na(r2r[x,])) + as.numeric(is.na(r3r[x,]))))/25))
#View(rnase.mms.reduced)
ctrl.mms.scaled <- t(apply(ctrl.mms.reduced, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
rnase.mms.scaled <- t(apply(rnase.mms.reduced, 1, function(x){
normalized <- (x-min(x))/(max(x)-min(x))
}))
##plots of the scaled replicates
plot(rnase.rep1.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
plot(rnase.rep2.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
plot(rnase.rep3.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
ctrl.mms <- ctrl.mms.scaled
rnase.mms <- rnase.mms.scaled
View(ctrl.mms)
View(rnase.mms)
