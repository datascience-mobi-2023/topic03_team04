if (sd(values) < 1) {
indices <- c(indices, j:(j+2))
}
}
if (length(indices) == 0) {
close_values[[i]] <- numeric(0) #leere Zeile
} else {
close_values[[i]] <- indices
}
}
# View(close_values)
largevalues_without_maxima <- largevalues
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% neighbors.peaks[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {
largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][largevalues_without_maxima[[i]] %in%  close_values[[i]]]
}
# nimmt nur die large values, die nur sehr nahe beieinader sind!!
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% decreasingvalues[[i]]]}
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% increasingvalues[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary25.rnase[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary1.rnase[[i]]]}
View(largevalues_without_maxima)
find_consecutive_numbers <- function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 3)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion] + 1
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
}
shoulderregion <- lapply(largevalues_without_maxima, find_consecutive_numbers)
View(shoulderregion)
View(largevalues_without_maxima)
View(rnase.with.proteinnumbers)
library(ggplot2)
# Anzahl der Zeilen im Dataframe
num_rows <- nrow(rnase.zt)
# Erstelle einen leeren Plot für jeden Graphen
plots_RNase.zt <- list()
# Iteriere über jede Zeile und erstelle den stetigen Graphen
for (i in 1:num_rows) {
row_data_rnase <- rnase.zt[i, ]
# Überprüfe, ob genügend nicht-NA-Werte vorhanden sind
if (sum(!is.na(row_data_rnase)) >= 2) {
df <- data.frame(x = 1:length(row_data_rnase), yrnase = as.numeric(row_data_rnase))
# Erstelle den Plot mit ggplot2
p <- ggplot(df, aes(x = x, y = yrnase, color = "green")) +
geom_line() +
geom_point() +
xlab("Fractions") +
ylab("Protein amount")
plots_RNase.zt[[i]] <- p
} else {
plots_RNase.zt[[i]] <- NULL
}
}
plots_RNase.zt[[27]]
#Das ganze könnte noch enorm fehlerhaft sein! Beschreibung folgt, wenn code tatsächlich funktioniert
#decreasingvalues <- apply(rnase.zt, 1, function(i) {
#decrease_indices <- which(sapply(1:(length(i)-2), function(j) all(diff(i[j:(j+2)]) #> 0)))
#unique(c(decrease_indices - 1 , decrease_indices, decrease_indices + 1))
#})
#increasingvalues <- apply(rnase.zt, 1, function(i) {
# increase_indices <- which(sapply(1:(length(i)-2), function(j) all(diff(i[j:(j+2)]) > 0)))
# unique(c(increase_indices - 1 , increase_indices, increase_indices + 1))
#})
#nonconsecutiveindices <- list()
#for (i in 1:nrow(rnase.zt)) {
# row <- rnase.zt[i,]
#indices <- c()
# for (j in 1:(ncol(rnase.zt)-1)) {
#  values <- as.numeric(row[j:(j+1)])
# if (!(all(diff(values) > 0) || all(diff(values) < 0))) {
# indices <- c(indices, j)
# }
#}
#nonconsecutiveindices[[i]] <- indices
#}
#View(nonconsecutiveindices)
#close_values <- list()
#for (i in 1:nrow(rnase.zt)) {
#row <- rnase.zt[i,]
#indices <- c()
#for (j in 1:(ncol(rnase.zt)-2)) {
# values <- as.numeric(row[j:(j+2)])
# if (max(values[1], values[3]) != 0 && abs(values[1] - values[3]) / max(values[1], values[3]) < 0.1) {
# indices <- c(indices, j:(j+2))
# }
#}
#if (length(indices) == 0) {
#  close_values[[i]] <- numeric(0) # Verwende einen leeren Vektor statt NULL
#} else {
#   close_values[[i]] <- indices
# }
#}
close_values <- list()
for (i in 1:nrow(rnase.zt)) {
row <- rnase.zt[i,]
indices <- c()
for (j in 1:(ncol(rnase.zt)-2)) {
values <- as.numeric(row[j:(j+2)])
if (sd(values) < 1) {
indices <- c(indices, j:(j+2))
}
}
if (length(indices) == 0) {
close_values[[i]] <- numeric(0) #leere Zeile
} else {
close_values[[i]] <- indices
}
}
# View(close_values)
largevalues_without_maxima <- largevalues
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% maxpeaks[[i]]]}
largevalues_without_maxima <- largevalues
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% neighbors.peaks[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {
largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][largevalues_without_maxima[[i]] %in%  close_values[[i]]]
}
# nimmt nur die large values, die nur sehr nahe beieinader sind!!
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% decreasingvalues[[i]]]}
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% increasingvalues[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary25.rnase[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary1.rnase[[i]]]}
View(largevalues_without_maxima)
find_consecutive_numbers <- function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 3)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion] + 1
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
}
shoulderregion <- lapply(largevalues_without_maxima, find_consecutive_numbers)
View(shoulderregion)
View(largevalues_without_maxima)
View(rnase.with.proteinnumbers)
View(shoulderregion)
#Das ganze könnte noch enorm fehlerhaft sein! Beschreibung folgt, wenn code tatsächlich funktioniert
#decreasingvalues <- apply(rnase.zt, 1, function(i) {
#decrease_indices <- which(sapply(1:(length(i)-2), function(j) all(diff(i[j:(j+2)]) #> 0)))
#unique(c(decrease_indices - 1 , decrease_indices, decrease_indices + 1))
#})
#increasingvalues <- apply(rnase.zt, 1, function(i) {
# increase_indices <- which(sapply(1:(length(i)-2), function(j) all(diff(i[j:(j+2)]) > 0)))
# unique(c(increase_indices - 1 , increase_indices, increase_indices + 1))
#})
#nonconsecutiveindices <- list()
#for (i in 1:nrow(rnase.zt)) {
# row <- rnase.zt[i,]
#indices <- c()
# for (j in 1:(ncol(rnase.zt)-1)) {
#  values <- as.numeric(row[j:(j+1)])
# if (!(all(diff(values) > 0) || all(diff(values) < 0))) {
# indices <- c(indices, j)
# }
#}
#nonconsecutiveindices[[i]] <- indices
#}
#View(nonconsecutiveindices)
#close_values <- list()
#for (i in 1:nrow(rnase.zt)) {
#row <- rnase.zt[i,]
#indices <- c()
#for (j in 1:(ncol(rnase.zt)-2)) {
# values <- as.numeric(row[j:(j+2)])
# if (max(values[1], values[3]) != 0 && abs(values[1] - values[3]) / max(values[1], values[3]) < 0.1) {
# indices <- c(indices, j:(j+2))
# }
#}
#if (length(indices) == 0) {
#  close_values[[i]] <- numeric(0) # Verwende einen leeren Vektor statt NULL
#} else {
#   close_values[[i]] <- indices
# }
#}
close_values <- list()
for (i in 1:nrow(rnase.zt)) {
row <- rnase.zt[i,]
indices <- c()
for (j in 1:(ncol(rnase.zt)-2)) {
values <- as.numeric(row[j:(j+2)])
if (sd(values) < 1) {
indices <- c(indices, j:(j+2))
}
}
if (length(indices) == 0) {
close_values[[i]] <- numeric(0) #leere Zeile
} else {
close_values[[i]] <- indices
}
}
# View(close_values)
largevalues_without_maxima <- largevalues
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% maxpeaks[[i]]]}
largevalues_without_maxima <- largevalues
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% neighbors.peaks[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {
largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][largevalues_without_maxima[[i]] %in%  close_values[[i]]]
}
# nimmt nur die large values, die nur sehr nahe beieinader sind!!
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% decreasingvalues[[i]]]}
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% increasingvalues[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary25.rnase[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary1.rnase[[i]]]}
View(largevalues_without_maxima)
find_consecutive_numbers <- function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 3)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion] + 1
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
}
shoulderregion <- lapply(largevalues_without_maxima, find_consecutive_numbers)
View(shoulderregion)
View(largevalues_without_maxima)
View(rnase.with.proteinnumbers)
View(maxpeaks)
# View(ctrl.zt)
# View(rnase.zt)
Nr <- c(1:dim(rnase.zt)[1])
rnase.with.proteinnumbers <- cbind(Nr, rnase.zt)
# View(rnase.with.proteinnumbers)
Nr <- c(1:dim(ctrl.zt)[1])
ctrl.with.proteinnumbers <- cbind(Nr, ctrl.zt)
View(ctrl.with.proteinnumbers)
sd.by.row <- apply(rnase.zt, 1, function(x) sd(x[x < 8]))
mean.sd <- mean(sd.by.row)
mean.sd
rnase.zt.peaks <- rnase.zt
# View(ctrl.zt)
# View(rnase.zt)
Nr <- c(1:dim(rnase.zt)[1])
rnase.with.proteinnumbers <- cbind(Nr, rnase.zt)
# View(rnase.with.proteinnumbers)
Nr <- c(1:dim(ctrl.zt)[1])
ctrl.with.proteinnumbers <- cbind(Nr, ctrl.zt)
View(ctrl.with.proteinnumbers)
sd.by.row <- apply(rnase.zt, 1, function(x) sd(x[x < 8]))
mean.sd <- mean(sd.by.row)
mean.sd
rnase.zt.peaks <- rnase.zt
colnames(rnase.zt.peaks) <- paste0("Rnase_Fraction", seq_along(colnames(rnase.zt.peaks)) - 1)
maxpeaks <- apply(rnase.zt.peaks, 1, function(x){which.max(x)})
maxpeaks.value <- apply(rnase.zt.peaks, 1, function(x){max(x)})
min(maxpeaks.value)
peaks <- apply(rnase.zt.peaks, 1,
function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices,
function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > mean.sd]})
peaks.values <- lapply(seq_along(peaks), function(i) rnase.zt.peaks[i, peaks[[i]]])
View(peaks)
View(rnase.with.proteinnumbers)
localmaxima <- peaks
for (i in seq_along(localmaxima)) {localmaxima[[i]] <- localmaxima[[i]][!localmaxima[[i]] %in% maxpeaks[[i]]]}
largevalues <- apply(rnase.zt.peaks[,2:24], 1, function(x) {
largevalues_indices <- which(x > 4.5) + 1# to start again with 2
peak_mean <- sapply(largevalues_indices, function(i) mean(x[(i-1):(i+1)]))
largevalues_indices <- largevalues_indices[peak_mean > 4.5]
unique(c(largevalues_indices - 1 , largevalues_indices, largevalues_indices + 1))
})
neighbors.peaks <- apply(rnase.zt.peaks, 1,
function(x) { peak_indices <- which(diff(sign(diff(x))) == -2 & x[-c(1, length(x))] > 3) + 1
peak_sd <- sapply(peak_indices,function(i) sd(x[(i-1):(i+1)]))
peak_indices <- peak_indices[peak_sd > mean.sd]
c(peak_indices - 1, peak_indices, peak_indices + 1)})
fraction1.peak.rnase <- which(rnase.zt[, 1] > rnase.zt[, 2] & rnase.zt[, 1] > rnase.zt[, 3])
length(fraction1.peak.rnase)
fraction25.peak.rnase <- which(rnase.zt[, 25] > rnase.zt[, 24] & rnase.zt[, 25] > rnase.zt[, 23] & ctrl.zt[, 25] + ctrl.zt[, 24] + ctrl.zt[, 23] > 10) # wenn der peak am Ende nicht insgesamt 10 überschreitet, ist es relativ unrelevant. Scheinbar fallen viele Proteine am Ende etwas aus.
fraction25.peak.rnase
boundary1.rnase <- lapply(1:nrow(rnase.zt), function(i) {
if (rnase.zt[i, 1] > rnase.zt[i, 2] & rnase.zt[i, 1] > rnase.zt[i, 3] & (rnase.zt[i, 1] + rnase.zt[i, 2] + rnase.zt[i, 3]) > 10) {
return(c(1,2,3))
} else {
return(NA)
}
})
boundary25.rnase <-lapply(1:nrow(rnase.zt), function(i) {
if (rnase.zt[i, 25] > rnase.zt[i, 24] & rnase.zt[i, 25] > rnase.zt[i, 23] & (rnase.zt[i, 25] + rnase.zt[i, 24] + rnase.zt[i, 23]) > 10) {
return(c(25,24,23))
} else {
return(NA)
}
})
View(largevalues_without_maxima)
#Das ganze könnte noch enorm fehlerhaft sein! Beschreibung folgt, wenn code tatsächlich funktioniert
#decreasingvalues <- apply(rnase.zt, 1, function(i) {
#decrease_indices <- which(sapply(1:(length(i)-2), function(j) all(diff(i[j:(j+2)]) #> 0)))
#unique(c(decrease_indices - 1 , decrease_indices, decrease_indices + 1))
#})
#increasingvalues <- apply(rnase.zt, 1, function(i) {
# increase_indices <- which(sapply(1:(length(i)-2), function(j) all(diff(i[j:(j+2)]) > 0)))
# unique(c(increase_indices - 1 , increase_indices, increase_indices + 1))
#})
#nonconsecutiveindices <- list()
#for (i in 1:nrow(rnase.zt)) {
# row <- rnase.zt[i,]
#indices <- c()
# for (j in 1:(ncol(rnase.zt)-1)) {
#  values <- as.numeric(row[j:(j+1)])
# if (!(all(diff(values) > 0) || all(diff(values) < 0))) {
# indices <- c(indices, j)
# }
#}
#nonconsecutiveindices[[i]] <- indices
#}
#View(nonconsecutiveindices)
#close_values <- list()
#for (i in 1:nrow(rnase.zt)) {
#row <- rnase.zt[i,]
#indices <- c()
#for (j in 1:(ncol(rnase.zt)-2)) {
# values <- as.numeric(row[j:(j+2)])
# if (max(values[1], values[3]) != 0 && abs(values[1] - values[3]) / max(values[1], values[3]) < 0.1) {
# indices <- c(indices, j:(j+2))
# }
#}
#if (length(indices) == 0) {
#  close_values[[i]] <- numeric(0) # Verwende einen leeren Vektor statt NULL
#} else {
#   close_values[[i]] <- indices
# }
#}
close_values <- list()
for (i in 1:nrow(rnase.zt)) {
row <- rnase.zt[i,]
indices <- c()
for (j in 1:(ncol(rnase.zt)-2)) {
values <- as.numeric(row[j:(j+2)])
if (sd(values) < 0.8) {
indices <- c(indices, j:(j+2))
}
}
if (length(indices) == 0) {
close_values[[i]] <- numeric(0)
} else {
close_values[[i]] <- indices
}
}
View(close_values)
largevalues_without_maxima <- largevalues
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% maxpeaks[[i]]]}
largevalues_without_maxima <- largevalues
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% neighbors.peaks[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {
largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][largevalues_without_maxima[[i]] %in%  close_values[[i]]]
}
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% decreasingvalues[[i]]]}
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% increasingvalues[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary25.rnase[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary1.rnase[[i]]]}
find_consecutive_numbers <- function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 3)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion] + 1
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
}
shoulderregion <- lapply(largevalues_without_maxima, find_consecutive_numbers)
View(shoulderregion)
View(largevalues_without_maxima)
View(rnase.with.proteinnumbers)
#knitr::opts_chunk$set(echo = TRUE)
#Das ganze könnte noch enorm fehlerhaft sein! Beschreibung folgt, wenn code tatsächlich funktioniert
#decreasingvalues <- apply(rnase.zt, 1, function(i) {
#decrease_indices <- which(sapply(1:(length(i)-2), function(j) all(diff(i[j:(j+2)]) #> 0)))
#unique(c(decrease_indices - 1 , decrease_indices, decrease_indices + 1))
#})
#increasingvalues <- apply(rnase.zt, 1, function(i) {
# increase_indices <- which(sapply(1:(length(i)-2), function(j) all(diff(i[j:(j+2)]) > 0)))
# unique(c(increase_indices - 1 , increase_indices, increase_indices + 1))
#})
#nonconsecutiveindices <- list()
#for (i in 1:nrow(rnase.zt)) {
# row <- rnase.zt[i,]
#indices <- c()
# for (j in 1:(ncol(rnase.zt)-1)) {
#  values <- as.numeric(row[j:(j+1)])
# if (!(all(diff(values) > 0) || all(diff(values) < 0))) {
# indices <- c(indices, j)
# }
#}
#nonconsecutiveindices[[i]] <- indices
#}
#View(nonconsecutiveindices)
#close_values <- list()
#for (i in 1:nrow(rnase.zt)) {
#row <- rnase.zt[i,]
#indices <- c()
#for (j in 1:(ncol(rnase.zt)-2)) {
# values <- as.numeric(row[j:(j+2)])
# if (max(values[1], values[3]) != 0 && abs(values[1] - values[3]) / max(values[1], values[3]) < 0.1) {
# indices <- c(indices, j:(j+2))
# }
#}
#if (length(indices) == 0) {
#  close_values[[i]] <- numeric(0) # Verwende einen leeren Vektor statt NULL
#} else {
#   close_values[[i]] <- indices
# }
#}
close_values <- list()
for (i in 1:nrow(rnase.zt)) {
row <- rnase.zt[i,]
indices <- c()
for (j in 1:(ncol(rnase.zt)-2)) {
values <- as.numeric(row[j:(j+2)])
if (sd(values) < 0.8) {
indices <- c(indices, j:(j+2))
}
}
if (length(indices) == 0) {
close_values[[i]] <- numeric(0)
} else {
close_values[[i]] <- indices
}
}
View(close_values)
largevalues_without_maxima <- largevalues
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% maxpeaks[[i]]]}
largevalues_without_maxima <- largevalues
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% neighbors.peaks[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {
largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][largevalues_without_maxima[[i]] %in%  close_values[[i]]]
}
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% decreasingvalues[[i]]]}
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% increasingvalues[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary25.rnase[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary1.rnase[[i]]]}
find_consecutive_numbers <- function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 3)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion] + 1
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
}
shoulderregion <- lapply(largevalues_without_maxima, find_consecutive_numbers)
View(shoulderregion)
View(largevalues_without_maxima)
View(rnase.with.proteinnumbers)
knitr::opts_chunk$set(echo = TRUE)
num_rows <- nrow(rnase.mvm)
# mvm
saveRDS(globalpeak.ctrl.mvm, file = "Non_synchronized_A549_globalpeak.ctrl.mvm")
ctrl.mvm <- readRDS("Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("Non_synchronized_A549_rnase.mms")
# mvm
saveRDS(globalpeak.ctrl.mvm, file = "Non_synchronized_A549_globalpeak.ctrl.mvm")
ctrl.mvm <- readRDS("Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("Non_synchronized_A549_rnase.mms")
ctrl.mvm <- readRDS("Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("Non_synchronized_A549_rnase.mms")
#mvm
globalpeak.ctrl.mvm <- readRDS("Non_synchronized_A549_globalpeak.ctrl.mvm")
globalpeak.value.ctrl.mvm <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.mvm")
globalpeak.rnase.mvm <- readRDS("Non_synchronized_A549_globalpeak.rnase.mvm")
globalpeak.value.rnase.mvm <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.mvm")
localpeaks.ctrl.mvm <- readRDS("Non_synchronized_A549_localpeaks.ctrl.mvm")
localpeaks.values.ctrl.mvm <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.mvm")
localpeaks.rnase.mvm <- readRDS("Non_synchronized_A549_localpeaks.rnase.mvm")
localpeaks.values.rnase.mvm <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.mvm")
fraction1.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mvm")
fraction25.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mvm")
fraction1.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mvm")
fraction25.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mvm")
precipitated.mvm <- readRDS("Non_synchronized_A549_precipitated.mvm")
#zt
globalpeak.ctrl.zt <- readRDS("Non_synchronized_A549_globalpeak.ctrl.zt")
globalpeak.value.ctrl.zt <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.zt")
globalpeak.rnase.zt <- readRDS("Non_synchronized_A549_globalpeak.rnase.zt")
globalpeak.value.rnase.zt <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.zt")
localpeaks.ctrl.zt <- readRDS("Non_synchronized_A549_localpeaks.ctrl.zt")
localpeaks.values.ctrl.zt <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.zt")
localpeaks.rnase.zt <- readRDS("Non_synchronized_A549_localpeaks.rnase.zt")
localpeaks.values.rnase.zt <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.zt")
fraction1.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.zt")
fraction1.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.zt")
precipitated.zt <- readRDS("Non_synchronized_A549_precipitated.zt")
