scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# Control Replicate 3 MVM
ctrl.rep3.mvm.norm <- t(apply(ctrl.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 1 MVM
rnase.rep1.mvm.norm <- t(apply(rnase.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 2 MVM
rnase.rep2.mvm.norm <- t(apply(rnase.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 3 MVM
rnase.rep3.mvm.norm <- t(apply(rnase.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
ctrl.rep1 <- ctrl.clean[,1:25]
ctrl.rep2 <- ctrl.clean[,26:50]
ctrl.rep3 <- ctrl.clean[,51:75]
rnase.rep1 <- rnase.clean[,1:25]
rnase.rep2 <- rnase.clean[,26:50]
rnase.rep3 <- rnase.clean[,51:75]
MS_Table_Ctrl <-MS_Table_reordered[,1:75]
#View(MS_Table_Ctrl)
MS_Table_RNase <-MS_Table_reordered[,76:150]
#View(MS_Table_RNase)
ctrl.rep1.reprod <- MS_Table_reordered[,1:25]
ctrl.rep2.reprod <- MS_Table_reordered[,26:50]
ctrl.rep3.reprod <- MS_Table_reordered[,51:75]
rnase.rep1.reprod <- MS_Table_reordered[,76:100]
rnase.rep2.reprod <- MS_Table_reordered[,101:125]
rnase.rep3.reprod <- MS_Table_reordered[,126:150]
ctrl.cor <-
cbind(ctrl.cor.rep1.rep2 <-
sapply(seq.int(dim(ctrl.rep1.reprod)[1]), function(x) cor(as.numeric(ctrl.rep1.reprod[x,]), as.numeric(ctrl.rep2.reprod[x,]))),
ctrl.cor.rep2.rep3 <-
sapply(seq.int(dim(ctrl.rep1.reprod)[1]), function(x) cor(as.numeric(ctrl.rep2.reprod[x,]), as.numeric(ctrl.rep3.reprod[x,]))),
ctrl.cor.rep1.rep3 <-
sapply(seq.int(dim(ctrl.rep1.reprod)[1]), function(x) cor(as.numeric(ctrl.rep1.reprod[x,]), as.numeric(ctrl.rep3.reprod[x,]))))
rnase.cor <-
cbind(rnase.cor.rep1.rep2 <-
sapply(seq.int(dim(rnase.rep1.reprod)[1]), function(x) cor(as.numeric(rnase.rep1.reprod[x,]), as.numeric(rnase.rep2.reprod[x,]))),
rnase.cor.rep2.rep3 <-
sapply(seq.int(dim(rnase.rep1.reprod)[1]), function(x) cor(as.numeric(rnase.rep2.reprod[x,]), as.numeric(rnase.rep3.reprod[x,]))),
rnase.cor.rep1.rep3 <-
sapply(seq.int(dim(rnase.rep1.reprod)[1]), function(x) cor(as.numeric(rnase.rep1.reprod[x,]), as.numeric(rnase.rep3.reprod[x,]))))
ctrl.rnase.cor <- cbind(ctrl.cor,rnase.cor)
total.na <- which(rowSums(is.na(ctrl.rnase.cor)) > 0)
length(total.na)
MS.Table.naremoved <- MS_Table_reordered[-total.na,]
ctrl.rep1.naremoved <- MS.Table.naremoved[,1:25]
ctrl.rep2.naremoved <- MS.Table.naremoved[,26:50]
ctrl.rep3.naremoved <- MS.Table.naremoved[,51:75]
rnase.rep1.naremoved <- MS.Table.naremoved[,76:100]
rnase.rep2.naremoved <- MS.Table.naremoved[,101:125]
rnase.rep3.naremoved <- MS.Table.naremoved[,126:150]
ctrl.cor.naremoved <-
cbind(ctrl.cor.rep1.rep2.naremoved <-
sapply(seq.int(dim(ctrl.rep1.naremoved)[1]), function(x) cor(as.numeric(ctrl.rep1.naremoved[x,]), as.numeric(ctrl.rep2.naremoved[x,]))),
ctrl.cor.rep2.rep3.naremoved <-
sapply(seq.int(dim(ctrl.rep1.naremoved)[1]), function(x) cor(as.numeric(ctrl.rep2.naremoved[x,]), as.numeric(ctrl.rep3.naremoved[x,]))),
ctrl.cor.rep1.rep3.naremoved <-
sapply(seq.int(dim(ctrl.rep1.naremoved)[1]), function(x) cor(as.numeric(ctrl.rep1.naremoved[x,]), as.numeric(ctrl.rep3.naremoved[x,]))))
rnase.cor.naremoved <-
cbind(rnase.cor.rep1.rep2.naremoved <-
sapply(seq.int(dim(rnase.rep1.naremoved)[1]), function(x) cor(as.numeric(rnase.rep1.naremoved[x,]), as.numeric(rnase.rep2.naremoved[x,]))),
rnase.cor.rep2.rep3.naremoved <-
sapply(seq.int(dim(rnase.rep1.naremoved)[1]), function(x) cor(as.numeric(rnase.rep2.naremoved[x,]), as.numeric(rnase.rep3.naremoved[x,]))),
rnase.cor.rep1.rep3.naremoved <-
sapply(seq.int(dim(rnase.rep1.naremoved)[1]), function(x) cor(as.numeric(rnase.rep1.naremoved[x,]), as.numeric(rnase.rep3.naremoved[x,]))))
View(ctrl.cor.naremoved)
library(ggplot2)
ctrl.cor.data.frame.naremoved <- data.frame(c(ctrl.cor.naremoved[,1],ctrl.cor.naremoved[,2],ctrl.cor.naremoved[,3]))
colnames(ctrl.cor.data.frame.naremoved) <- "correlation"
ggplot(ctrl.cor.data.frame.naremoved, aes(x=correlation)) + geom_histogram()
non.reproducible.ctrl <- which(rowSums(ctrl.cor.naremoved<0.9)>2)
#length(non.reproducible.ctrl)
non.reproducible.rnase <- which(rowSums(rnase.cor.naremoved<0.9)>2)
#length(non.reproducible.rnase)
non.reproducible <- unique(which(rowSums(ctrl.cor.naremoved<0.9)>2), which(rowSums(rnase.cor.naremoved<0.9)>2))
#length(non.reproducible)
#View(rnase.cor.naremoved)
length(non.reproducible)
ctrl.rep <- MS.Table.naremoved[-non.reproducible,1:75]
rnase.rep <- MS.Table.naremoved[-non.reproducible,76:150]
ctrl.cor.removed <- ctrl.cor.naremoved [-non.reproducible,]
rnase.cor.removed <- rnase.cor.naremoved [-non.reproducible,]
ctrl.rep <- MS.Table.naremoved[-non.reproducible,1:75]
rnase.rep <- MS.Table.naremoved[-non.reproducible,76:150]
ctrl.cor.removed <- ctrl.cor.naremoved [-non.reproducible, 1:75]
ctrl.rep <- MS.Table.naremoved[-non.reproducible,1:75]
rnase.rep <- MS.Table.naremoved[-non.reproducible,76:150]
ctrl.cor.removed <- ctrl.cor.naremoved [-non.reproducible,]
rnase.cor.removed <- rnase.cor.naremoved [-non.reproducible,]
for (x in 1:dim(ctrl.rep)[1]){
if (ctrl.cor.removed[x, 1] < 0.9) {
if (ctrl.cor.removed[x, 3] < 0.9){
ctrl.rep[x, 1:25] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep[x, 26:50] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep[x, 51:75] <- NA
}
}
}
for (x in 1:dim(rnase.rep)[1]){
if (rnase.cor.removed[x, 1] < 0.9) {
if (rnase.cor.removed[x, 3] < 0.9){
rnase.rep[x, 1:25] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep[x, 26:50] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep[x, 51:75] <- NA
}
}
}
Nr <- c(1:dim(rnase.rep)[1])
rnase.with.proteinnumbers <- cbind(Nr, rnase.rep[,1:25], Nr, rnase.rep[,26:50], Nr, rnase.rep[,51:75])
View(rnase.with.proteinnumbers)
dim(rnase.rep)
for (x in 1:dim(ctrl.rep)[1]){
if (ctrl.cor.removed[x, 1] < 0.9) {
if (ctrl.cor.removed[x, 3] < 0.9){
ctrl.rep[x, 1:25] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep[x, 26:50] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep[x, 51:75] <- NA
}
}
}
for (x in 1:dim(rnase.rep)[1]){
if (rnase.cor.removed[x, 1] < 0.9) {
if (rnase.cor.removed[x, 3] < 0.9){
rnase.rep[x, 1:25] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep[x, 26:50] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep[x, 51:75] <- NA
}
}
}
Nr <- c(1:dim(rnase.rep)[1])
rnase.with.proteinnumbers <- cbind(Nr, rnase.rep[,1:25], Nr, rnase.rep[,26:50], Nr, rnase.rep[,51:75])
View(rnase.with.proteinnumbers)
dim(rnase.rep)
ctrl.clean <- ctrl.rep
rnase.clean <- rnase.rep
View(rnase.clean)
ctrl.rep1 <- ctrl.clean[,1:25]
ctrl.rep2 <- ctrl.clean[,26:50]
ctrl.rep3 <- ctrl.clean[,51:75]
rnase.rep1 <- rnase.clean[,1:25]
rnase.rep2 <- rnase.clean[,26:50]
rnase.rep3 <- rnase.clean[,51:75]
# Control Replicate 1 MVM
ctrl.rep1.mvm.norm <- t(apply(ctrl.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# View(ctrl.rep1.mvm.norm)
# Control Replicate 2 MVM
ctrl.rep2.mvm.norm <- t(apply(ctrl.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# Control Replicate 3 MVM
ctrl.rep3.mvm.norm <- t(apply(ctrl.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 1 MVM
rnase.rep1.mvm.norm <- t(apply(rnase.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 2 MVM
rnase.rep2.mvm.norm <- t(apply(rnase.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 3 MVM
rnase.rep3.mvm.norm <- t(apply(rnase.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
ctrl.mvm.reduced =
(ctrl.rep1.mvm.norm + ctrl.rep2.mvm.norm + ctrl.rep3.mvm.norm)/3
rnase.mvm.reduced =
(rnase.rep1.mvm.norm + rnase.rep2.mvm.norm + rnase.rep3.mvm.norm)/3
ctrl.mvm.scaled =
sweep(ctrl.mvm.reduced,1,100/rowSums(ctrl.mvm.reduced),'*')
# Check if the two data frames are identical
is_identical <- identical(ctrl.mvm.reduced, ctrl.mvm.scaled)
# Print the result
if (is_identical) {
print("The data frames are identical.")
} else {
print("The data frames are not identical.")
}
rnase.mvm.scaled =
sweep(rnase.mvm.reduced,1,100/rowSums(rnase.mvm.reduced),'*')
ctrl.mvm.reduced =
(ctrl.rep1.mvm.norm + ctrl.rep2.mvm.norm + ctrl.rep3.mvm.norm)/3
rnase.mvm.reduced =
(rnase.rep1.mvm.norm + rnase.rep2.mvm.norm + rnase.rep3.mvm.norm)/3
View(rnase.mvm.reduced)
View(ctrl.rep1.mvm.norm)
View(ctrl.rep1.mvm.norm)
View(rnase.rep1.mvm.norm)
View(rnase.rep3.mvm.norm)
View(rnase.mvm.reduced)
sum = (which(is.na(ctrl.rep1.mvm.norm)) + which(is.na(ctrl.rep2.mvm.norm)) + which(is.na(ctrl.rep3.mvm.norm)))
rep1 <- ctrl.rep1.mvm.norm
is.na(rep1) <- 0
rep1
rep3 <- rnase.rep3.mvm.norm
is.na(rep3) <- 0
View(rep3)
View(rnase.rep3.mvm.norm )
rep3 <- rnase.rep3.mvm.norm
rep3[is.na(rep3) <- 0]
View(rep3)
View(rnase.rep3.mvm.norm )
rep3[is.na(rep3) <- 0]
View(rep3)
rep3 <- rnase.rep3.mvm.norm
rep3[is.na(rep3)] <- 0
View(rep3)
View(rnase.rep3.mvm.norm )
ctrl.mvm.reduced =
(ctrl.rep1.mvm.norm[is.na(ctrl.rep1.mvm.norm)] <- 0 + ctrl.rep2.mvm.norm + ctrl.rep3.mvm.norm)/3
rnase.mvm.reduced =
(rnase.rep1.mvm.norm + rnase.rep2.mvm.norm + rnase.rep3.mvm.norm)/3
View(rnase.mvm.reduced)
ctrl.mvm.reduced =
(ctrl.rep1.mvm.norm[is.na(ctrl.rep1.mvm.norm)] <- 0 + ctrl.rep2.mvm.norm + ctrl.rep3.mvm.norm)
ctrl.mvm.reduced =
(ctrl.rep1.mvm.norm  + ctrl.rep2.mvm.norm + ctrl.rep3.mvm.norm)
ctrl.mvm.reduced =
(ctrl.rep1.mvm.norm[is.na(ctrl.rep1.mvm.norm)] <- 0  + ctrl.rep2.mvm.norm[is.na(ctrl.rep2.mvm.norm)] <- 0 + ctrl.rep3.mvm.norm[is.na(ctrl.rep3.mvm.norm)] <- 0)
ctrl.mvm.reduced =
((ctrl.rep1.mvm.norm[is.na(ctrl.rep1.mvm.norm)] <- 0)  + (ctrl.rep2.mvm.norm[is.na(ctrl.rep2.mvm.norm)] <- 0) + (ctrl.rep3.mvm.norm[is.na(ctrl.rep3.mvm.norm)] <- 0))
ctrl.mvm.reduced = apply(ctrl.rep1.mvm.norm, 1, function(x){
((ctrl.rep1.mvm.norm[is.na(ctrl.rep1.mvm.norm)] <- 0)  + (ctrl.rep2.mvm.norm[is.na(ctrl.rep2.mvm.norm)] <- 0) + (ctrl.rep3.mvm.norm[is.na(ctrl.rep3.mvm.norm)] <- 0))
})
sum(is.na(ctrl.rep1.mvm.norm[1,]))
sum(is.na(rnase.rep1.mvm.norm[1,]) + is.na(rnase.rep1.mvm.norm[2,]) + is.na(rnase.rep1.mvm.norm[3,]))
sum(is.na(rnase.rep1.mvm.norm[1,]) + is.na(rnase.rep2.mvm.norm[1,]) + is.na(rnase.rep3.mvm.norm[1,]))
sum(is.na(rnase.rep1.mvm.norm[1,]) + is.na(rnase.rep2.mvm.norm[1,]) + is.na(rnase.rep3.mvm.norm[1,]))/25
ctrl.mvm.reduced = apply(ctrl.rep1.mvm.norm, 1, function(x){
((ctrl.rep1.mvm.norm[is.na(ctrl.rep1.mvm.norm)] <- 0)  + (ctrl.rep2.mvm.norm[is.na(ctrl.rep2.mvm.norm)] <- 0) + (ctrl.rep3.mvm.norm[is.na(ctrl.rep3.mvm.norm)] <- 0))/(sum(is.na(rnase.rep1.mvm.norm[1,]) + is.na(rnase.rep2.mvm.norm[1,]) + is.na(rnase.rep3.mvm.norm[1,]))/25)
})
ctrl.mvm.reduced = apply(ctrl.rep1.mvm.norm, 1, function(x){
((ctrl.rep1.mvm.norm[is.na(ctrl.rep1.mvm.norm)] <- 0)  + (ctrl.rep2.mvm.norm[is.na(ctrl.rep2.mvm.norm)] <- 0) + (ctrl.rep3.mvm.norm[is.na(ctrl.rep3.mvm.norm)] <- 0))/(sum(is.na(rnase.rep1.mvm.norm[x,]) + is.na(rnase.rep2.mvm.norm[x,]) + is.na(rnase.rep3.mvm.norm[x,]))/25)
})
rnase.mvm.reduced =
(rnase.rep1.mvm.norm + rnase.rep2.mvm.norm + rnase.rep3.mvm.norm)/3
View(rnase.mvm.reduced)
View(ctrl.mvm.reduced)
ctrl.mvm.reduced = apply(ctrl.rep1.mvm.norm, 1, function(x){
((ctrl.rep1.mvm.norm[is.na(ctrl.rep1.mvm.norm)] <- 0)  + (ctrl.rep2.mvm.norm[is.na(ctrl.rep2.mvm.norm)] <- 0) + (ctrl.rep3.mvm.norm[is.na(ctrl.rep3.mvm.norm)] <- 0))/(sum(is.na(rnase.rep1.mvm.norm[x,]) + is.na(rnase.rep2.mvm.norm[x,]) + is.na(rnase.rep3.mvm.norm[x,]))/25)
})
ctrl.mvm.reduced = apply(ctrl.rep1.mvm.norm, 1, function(x){
((ctrl.rep1.mvm.norm[is.na(ctrl.rep1.mvm.norm)] <- 0)  + (ctrl.rep2.mvm.norm[is.na(ctrl.rep2.mvm.norm)] <- 0) + (ctrl.rep3.mvm.norm[is.na(ctrl.rep3.mvm.norm)] <- 0))/(sum(is.na(rnase.rep1.mvm.norm[x,]) + is.na(rnase.rep2.mvm.norm[x,]) + is.na(rnase.rep3.mvm.norm[x,]))/25)
})
View(ctrl.mvm.reduced)
r1c <- ctrl.rep1.mvm.norm
r2c <- ctrl.rep2.mvm.norm
r3c <- ctrl.rep3.mvm.norm
ctrl.mvm.reduced = apply(r1c, 1, function(x){
((r1c[is.na(r1c)] <- 0)  + (r2c[is.na(r2c)] <- 0) + (r3c[is.na(r3c)] <- 0))
/(sum(is.na(r1c[x,]) + is.na(r2c[x,]) + is.na(r3c[x,]))/25)
r1c <- ctrl.rep1.mvm.norm
r2c <- ctrl.rep2.mvm.norm
r3c <- ctrl.rep3.mvm.norm
ctrl.mvm.reduced = apply(r1c, 1, function(x){
((r1c[is.na(r1c)] <- 0)  + (r2c[is.na(r2c)] <- 0) + (r3c[is.na(r3c)] <- 0))/(sum(is.na(r1c[x,]) + is.na(r2c[x,]) + is.na(r3c[x,]))/25)
})
View(ctrl.mvm.reduced)
x <- apply(r1c, 1, function(x){
(sum(is.na(r1c[x,]) + is.na(r2c[x,]) + is.na(r3c[x,]))/25)
})
View(x)
View(y)
y <- apply(r1c, 1, function(x){
((r1c[is.na(r1c)] <- 0)  + (r2c[is.na(r2c)] <- 0) + (r3c[is.na(r3c)] <- 0))
})
y <- apply(r1c, 1, function(x){
((r1c[is.na(r1c)] <- 0)  + (r2c[is.na(r2c)] <- 0) + (r3c[is.na(r3c)] <- 0))
})
View(y)
x <- 1
X <-   (sum(is.na(r1c[x,]) + is.na(r2c[x,]) + is.na(r3c[x,]))/25)
View(X)
ctrl.mvm.reduced = apply(ctrl.rep1.mvm.norm, 1, function(x){
((ctrl.rep1.mvm.norm[is.na(ctrl.rep1.mvm.norm)] <- 0)  + (ctrl.rep2.mvm.norm[is.na(ctrl.rep2.mvm.norm)] <- 0) + (ctrl.rep3.mvm.norm[is.na(ctrl.rep3.mvm.norm)] <- 0))/(sum(is.na(rnase.rep1.mvm.norm[x,]) + is.na(rnase.rep2.mvm.norm[x,]) + is.na(rnase.rep3.mvm.norm[x,]))/25)
})
rnase.mvm.reduced =
(rnase.rep1.mvm.norm + rnase.rep2.mvm.norm + rnase.rep3.mvm.norm)/3
View(ctrl.mvm.reduced)
is.na(r1c)
r1c
r1c <- ctrl.rep1.mvm.norm
r1c
ctrl.rep1 <- ctrl.clean[,1:25]
ctrl.rep2 <- ctrl.clean[,26:50]
ctrl.rep3 <- ctrl.clean[,51:75]
rnase.rep1 <- rnase.clean[,1:25]
rnase.rep2 <- rnase.clean[,26:50]
rnase.rep3 <- rnase.clean[,51:75]
# Control Replicate 1 MVM
ctrl.rep1.mvm.norm <- t(apply(ctrl.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# View(ctrl.rep1.mvm.norm)
# Control Replicate 2 MVM
ctrl.rep2.mvm.norm <- t(apply(ctrl.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# Control Replicate 3 MVM
ctrl.rep3.mvm.norm <- t(apply(ctrl.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 1 MVM
rnase.rep1.mvm.norm <- t(apply(rnase.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 2 MVM
rnase.rep2.mvm.norm <- t(apply(rnase.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 3 MVM
rnase.rep3.mvm.norm <- t(apply(rnase.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
r1c <- ctrl.rep1.mvm.norm
r1c
r1c <- ctrl.rep1.mvm.norm
r2c <- ctrl.rep2.mvm.norm
r3c <- ctrl.rep3.mvm.norm
ctrl.mvm.reduced = apply(r1c, 1, function(x){
((r1c[is.na(r1c)] <- 0)  + (r2c[is.na(r2c)] <- 0) + (r3c[is.na(r3c)] <- 0))/(sum(is.na(r1c[x,]) + is.na(r2c[x,]) + is.na(r3c[x,]))/25)
})
ctrl.mvm.reduced = apply(r1c, 1, function(x){
((r1c[is.na(r1c)] <- 0)  + (r2c[is.na(r2c)] <- 0) + (r3c[is.na(r3c)] <- 0))/(sum(is.na(r1c[x,]) + is.na(r2c[x,]) + is.na(r3c[x,]))/25)
})
View(ctrl.mvm.reduced)
View(r1c[is.na(r1c)] <- 0)
r1c <- ctrl.rep1.mvm.norm
r1c[is.na(r1c)] <- 0
View(r1c)
r1c <- ctrl.rep1.mvm.norm
r2c <- ctrl.rep2.mvm.norm
r3c <- ctrl.rep3.mvm.norm
r1c[is.na(r1c)] <- 0
r2c[is.na(r2c)] <- 0
r3c[is.na(r3c)] <- 0
View(l)
l <- (r1c + r2c + r3c)
View(l)
#Nr <- c(1:dim(rnase.rep)[1])
#rnase.with.proteinnumbers <- cbind(Nr, rnase.rep[,1:25], Nr, rnase.rep[,26:50], Nr, rnase.rep[,51:75])
View(rnase.with.proteinnumbers)
dim(l)
ctrl.rep1.reprod <- MS_Table_reordered[,1:25]
ctrl.rep2.reprod <- MS_Table_reordered[,26:50]
ctrl.rep3.reprod <- MS_Table_reordered[,51:75]
rnase.rep1.reprod <- MS_Table_reordered[,76:100]
rnase.rep2.reprod <- MS_Table_reordered[,101:125]
rnase.rep3.reprod <- MS_Table_reordered[,126:150]
ctrl.cor <-
cbind(ctrl.cor.rep1.rep2 <-
sapply(seq.int(dim(ctrl.rep1.reprod)[1]), function(x) cor(as.numeric(ctrl.rep1.reprod[x,]), as.numeric(ctrl.rep2.reprod[x,]))),
ctrl.cor.rep2.rep3 <-
sapply(seq.int(dim(ctrl.rep1.reprod)[1]), function(x) cor(as.numeric(ctrl.rep2.reprod[x,]), as.numeric(ctrl.rep3.reprod[x,]))),
ctrl.cor.rep1.rep3 <-
sapply(seq.int(dim(ctrl.rep1.reprod)[1]), function(x) cor(as.numeric(ctrl.rep1.reprod[x,]), as.numeric(ctrl.rep3.reprod[x,]))))
rnase.cor <-
cbind(rnase.cor.rep1.rep2 <-
sapply(seq.int(dim(rnase.rep1.reprod)[1]), function(x) cor(as.numeric(rnase.rep1.reprod[x,]), as.numeric(rnase.rep2.reprod[x,]))),
rnase.cor.rep2.rep3 <-
sapply(seq.int(dim(rnase.rep1.reprod)[1]), function(x) cor(as.numeric(rnase.rep2.reprod[x,]), as.numeric(rnase.rep3.reprod[x,]))),
rnase.cor.rep1.rep3 <-
sapply(seq.int(dim(rnase.rep1.reprod)[1]), function(x) cor(as.numeric(rnase.rep1.reprod[x,]), as.numeric(rnase.rep3.reprod[x,]))))
ctrl.rnase.cor <- cbind(ctrl.cor,rnase.cor)
total.na <- which(rowSums(is.na(ctrl.rnase.cor)) > 0)
length(total.na)
MS.Table.naremoved <- MS_Table_reordered[-total.na,]
ctrl.rep1.naremoved <- MS.Table.naremoved[,1:25]
ctrl.rep2.naremoved <- MS.Table.naremoved[,26:50]
ctrl.rep3.naremoved <- MS.Table.naremoved[,51:75]
rnase.rep1.naremoved <- MS.Table.naremoved[,76:100]
rnase.rep2.naremoved <- MS.Table.naremoved[,101:125]
rnase.rep3.naremoved <- MS.Table.naremoved[,126:150]
ctrl.cor.naremoved <-
cbind(ctrl.cor.rep1.rep2.naremoved <-
sapply(seq.int(dim(ctrl.rep1.naremoved)[1]), function(x) cor(as.numeric(ctrl.rep1.naremoved[x,]), as.numeric(ctrl.rep2.naremoved[x,]))),
ctrl.cor.rep2.rep3.naremoved <-
sapply(seq.int(dim(ctrl.rep1.naremoved)[1]), function(x) cor(as.numeric(ctrl.rep2.naremoved[x,]), as.numeric(ctrl.rep3.naremoved[x,]))),
ctrl.cor.rep1.rep3.naremoved <-
sapply(seq.int(dim(ctrl.rep1.naremoved)[1]), function(x) cor(as.numeric(ctrl.rep1.naremoved[x,]), as.numeric(ctrl.rep3.naremoved[x,]))))
rnase.cor.naremoved <-
cbind(rnase.cor.rep1.rep2.naremoved <-
sapply(seq.int(dim(rnase.rep1.naremoved)[1]), function(x) cor(as.numeric(rnase.rep1.naremoved[x,]), as.numeric(rnase.rep2.naremoved[x,]))),
rnase.cor.rep2.rep3.naremoved <-
sapply(seq.int(dim(rnase.rep1.naremoved)[1]), function(x) cor(as.numeric(rnase.rep2.naremoved[x,]), as.numeric(rnase.rep3.naremoved[x,]))),
rnase.cor.rep1.rep3.naremoved <-
sapply(seq.int(dim(rnase.rep1.naremoved)[1]), function(x) cor(as.numeric(rnase.rep1.naremoved[x,]), as.numeric(rnase.rep3.naremoved[x,]))))
#View(ctrl.cor.naremoved)
non.reproducible.ctrl <- which(rowSums(ctrl.cor.naremoved<0.9)>2)
#length(non.reproducible.ctrl)
non.reproducible.rnase <- which(rowSums(rnase.cor.naremoved<0.9)>2)
#length(non.reproducible.rnase)
non.reproducible <- unique(which(rowSums(ctrl.cor.naremoved<0.9)>2), which(rowSums(rnase.cor.naremoved<0.9)>2))
#length(non.reproducible)
#View(rnase.cor.naremoved)
length(non.reproducible)
ctrl.rep <- MS.Table.naremoved[-non.reproducible,1:75]
rnase.rep <- MS.Table.naremoved[-non.reproducible,76:150]
ctrl.cor.removed <- ctrl.cor.naremoved [-non.reproducible,]
rnase.cor.removed <- rnase.cor.naremoved [-non.reproducible,]
for (x in 1:dim(ctrl.rep)[1]){
if (ctrl.cor.removed[x, 1] < 0.9) {
if (ctrl.cor.removed[x, 3] < 0.9){
ctrl.rep[x, 1:25] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep[x, 26:50] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
ctrl.rep[x, 51:75] <- NA
}
}
}
for (x in 1:dim(rnase.rep)[1]){
if (rnase.cor.removed[x, 1] < 0.9) {
if (rnase.cor.removed[x, 3] < 0.9){
rnase.rep[x, 1:25] <- NA
}
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep[x, 26:50] <- NA
}}
if (rnase.cor.removed[x, 3] < 0.9) {
if (rnase.cor.removed[x, 2] < 0.9){
rnase.rep[x, 51:75] <- NA
}
}
}
#Nr <- c(1:dim(rnase.rep)[1])
#rnase.with.proteinnumbers <- cbind(Nr, rnase.rep[,1:25], Nr, rnase.rep[,26:50], Nr, rnase.rep[,51:75])
View(rnase.with.proteinnumbers)
#dim(rnase.rep)
View(non.reproducible)
