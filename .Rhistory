}
rnase.mvm =
sweep(MS_Table_RNase_reduced,1,100/rowSums(MS_Table_RNase_reduced),'*')
knitr::opts_chunk$set(echo = TRUE)
tinytex::install_tinytex()
MS_Table <- read.delim('https://www.dropbox.com/s/vm3lxljjm9chau8/RDeeP_A549_NS.csv?dl=1', header=TRUE, row.names=1, sep = ";")
MS_Table <- read.delim('https://www.dropbox.com/s/vm3lxljjm9chau8/RDeeP_A549_NS.csv?dl=1', header=TRUE, row.names=1, sep = ";")
dim(MS_Table)
head(rownames(MS_Table))
head(colnames(MS_Table))
sum(apply(MS_Table, 1, anyNA)) == 0
sum(is.na(MS_Table)) == 0
sum(apply(MS_Table, 1, is.numeric)) == nrow(MS_Table)
min(MS_Table)
sum(apply(MS_Table,1,sum)==0)
MS_Table_reordered <- MS_Table[, c(
paste0("Fraction", 1:25, "_Ctrl_Rep1"),
paste0("Fraction", 1:25, "_Ctrl_Rep2"),
paste0("Fraction", 1:25, "_Ctrl_Rep3"),
paste0("Fraction", 1:25, "_RNase_Rep1"),
paste0("Fraction", 1:25, "_RNase_Rep2"),
paste0("Fraction", 1:25, "_RNase_Rep3")
)]
# View(MS_Table_reordered)
sum(apply(MS_Table_reordered, 2, is.numeric)) == ncol(MS_Table)
MS_Table_Ctrl <-MS_Table_reordered[,1:75]
#View(MS_Table_Ctrl)
MS_Table_RNase <-MS_Table_reordered[,76:150]
#View(MS_Table_RNase)
MS_Table_Ctrl <-MS_Table_reordered[,1:75]
#View(MS_Table_Ctrl)
MS_Table_RNase <-MS_Table_reordered[,76:150]
#View(MS_Table_RNase)
num_rows <- nrow(MS_Table_Ctrl_rep1)
# create vector
correlations <- numeric(num_rows)
for (i in 1:num_rows) {
# select row i from MS_Table_Ctrl_rep1 and MS_Table_Ctrl_rep2
row_rep1 <- as.numeric(MS_Table_Ctrl_rep1[i, ])
# Der Fehler war, dass die Rows nicht als Vector, sondern als Dataframe eingelesen wurden -> Sobald der Type richtig ist, kann er auch die Correlation ausrechnen.
# Als weiterer Hinweis jedoch: Die Operation könnte etwas länger dauern, wenn ihrs für alle dfs macht.
row_rep2 <- as.numeric(MS_Table_Ctrl_rep2[i, ])
correlation <- cor(row_rep1, row_rep2, method = "pearson")
correlations[i] <- correlation
}
# show result
correlations
#Achtung: funktioniert nicht, aber ich weiß nicht warum Fehlermeldung auftritt
ctrl.rep1 <-MS_Table_reordered[,1:25]
ctrl.rep2 <-MS_Table_reordered[,26:50]
ctrl.rep3 <-MS_Table_reordered[,51:75]
rnase.rep1 <-MS_Table_reordered[,76:100]
rnase.rep2 <-MS_Table_reordered[,101:125]
rnase.rep3 <-MS_Table_reordered[,126:150]
# Control Replicate 1 MVM
ctrl.rep1.mvm.norm <- t(apply(ctrl.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# View(ctrl.rep1.mvm.norm)
# Control Replicate 2 MVM
ctrl.rep2.mvm.norm <- t(apply(ctrl.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# Control Replicate 3 MVM
ctrl.rep3.mvm.norm <- t(apply(ctrl.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 1 MVM
rnase.rep1.mvm.norm <- t(apply(rnase.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 2 MVM
rnase.rep2.mvm.norm <- t(apply(rnase.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 3 MVM
rnase.rep3.mvm.norm <- t(apply(rnase.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
ctrl.mvm.merged =
(ctrl.rep1.mvm.norm + ctrl.rep2.mvm.norm + ctrl.rep3.mvm.norm)/3
rnase.mvm.merged =
(rnase.rep1.mvm.norm + rnase.rep2.mvm.norm + rnase.rep3.mvm.norm)/3
ctrl.mvm =
sweep(ctrl.mvm.merged,1,100/rowSums(ctrl.mvm.merged),'*')
# Check if the two data frames are identical
is_identical <- identical(ctrl.mvm.merged, MS_Table_Ctrl_scaled)
# Print the result
if (is_identical) {
print("The data frames are identical.")
} else {
print("The data frames are not identical.")
}
rnase.mvm =
sweep(rnase.mvm.merged,1,100/rowSums(rnase.mvm.merged),'*')
# Control Replicate 1 MMS
ctrl.rep1.mms.norm <- t(apply(ctrl.rep1, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# Control Replicate 2 MMS
ctrl.rep2.mms.norm <- t(apply(ctrl.rep2, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# Control Replicate 3 MMS
ctrl.rep3.mms.norm <- t(apply(ctrl.rep3, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# RNase Replicate 1 MMS
rnase.rep1.mms.norm <- t(apply(rnase.rep1, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# RNase Replicate 2 MMS
rnase.rep2.mms.norm <- t(apply(rnase.rep2, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# RNase Replicate 2 MMS
rnase.rep3.mms.norm <- t(apply(rnase.rep3, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
test_matrix <- matrix(c(1,45,3,8,27,4,79,30,0,100,99,50,0,76,1,4,6,3,8,7,3), byrow = TRUE, nrow = 3)
test_normalized <- t(apply(test_matrix, 1, function(x){
normalized <- (x-min(x))/(max(x)-min(x))
}))
#test_matrix
#test_normalized
ctrl.mms.merged <- ((ctrl.rep1.mms.norm + ctrl.rep2.mms.norm + ctrl.rep3.mms.norm)/3)
rnase.mms.merged <- ((rnase.rep1.mms.norm + rnase.rep2.mms.norm + rnase.rep3.mms.norm)/3)
ctrl.mms <- t(apply(ctrl.mms.merged, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
rnase.mms <- t(apply(rnase.mms.merged, 1, function(x){
normalized <- (x-min(x))/(max(x)-min(x))
}))
##plots of the scaled replicates
#plot(rnase.rep1.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
#plot(rnase.rep2.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
#plot(rnase.rep3.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
##plot of the merged ctrl
#plot(rnase.mms.merged[1,], xlab="fraction", ylab="protein amount", col="red", pch=20)
##plot of the merged and scaled ctrl
#plot(rnase.mms[1,], xlab="fraction", ylab="protein amount", col="blue", pch=20)
ctrl.mvm =
sweep(ctrl.mvm.merged,1,100/rowSums(ctrl.mvm.merged),'*')
# Check if the two data frames are identical
is_identical <- identical(ctrl.mvm.merged, ctrl.mvm)
# Print the result
if (is_identical) {
print("The data frames are identical.")
} else {
print("The data frames are not identical.")
}
ctrl.mms.scaled <- t(apply(ctrl.mms.merged, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
rnase.mms.scaled <- t(apply(rnase.mms.merged, 1, function(x){
normalized <- (x-min(x))/(max(x)-min(x))
}))
##plots of the scaled replicates
plot(rnase.rep1.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
plot(rnase.rep2.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
plot(rnase.rep3.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
##plot of the merged ctrl
plot(rnase.mms.merged[1,], xlab="fraction", ylab="protein amount", col="red", pch=20)
##plot of the merged and scaled ctrl
plot(rnase.mms.scaled[1,], xlab="fraction", ylab="protein amount", col="blue", pch=20)
##plots of the scaled replicates
plot(rnase.rep1.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
plot(rnase.rep2.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
plot(rnase.rep3.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
##plot of the merged ctrl
plot(rnase.mms.merged[1,], xlab="fraction", ylab="protein amount", col="red", pch=20)
##plot of the merged and scaled ctrl
plot(rnase.mms.scaled[1,], xlab="fraction", ylab="protein amount", col="blue", pch=20)
ctrl.mms <- ctrl.mms.scaled
rnase.mms <- rnase.mms.scaled
sd.ctrl = apply(ctrl.rep1, 1, sd)
mean.ctrl.rep1 = apply(ctrl.rep1, 1, mean)
mean.ctrl.rep2 = apply(ctrl.rep2, 1, mean)
mean.ctrl.rep3 = apply(ctrl.rep3, 1, mean)
ctrl.rep1.meanvalue = sweep(ctrl.rep1,1,mean.ctrl.rep1,'-')
ctrl1.zs.norm = sweep(ctrl1.meanvalue,1,sd.ctrl,'/')
knitr::opts_chunk$set(echo = TRUE)
sd_MS_Table_Ctrl = apply(MS_Table_Ctrl, 1, sd)
mean_MS_Table_Ctrl_rep1 = apply(MS_Table_Ctrl_rep1, 1, mean)
mean_MS_Table_Ctrl_rep2 = apply(MS_Table_Ctrl_rep2, 1, mean)
mean_MS_Table_Ctrl_rep3 = apply(MS_Table_Ctrl_rep3, 1, mean)
ctrl1_meanvalue = sweep(MS_Table_Ctrl_rep1,1,mean_MS_Table_Ctrl_rep1,'-')
ctrl1_normalized = sweep(ctrl1_meanvalue,1,sd_MS_Table_Ctrl,'/')
ctrl2_meanvalue = sweep(MS_Table_Ctrl_rep2,1,mean_MS_Table_Ctrl_rep2,'-')
ctrl2_normalized = sweep(ctrl2_meanvalue,1,sd_MS_Table_Ctrl,'/')
ctrl3_meanvalue = sweep(MS_Table_Ctrl_rep3,1,mean_MS_Table_Ctrl_rep3,'-')
ctrl3_normalized = sweep(ctrl3_meanvalue,1,sd_MS_Table_Ctrl,'/')
#calculate again the min value for each protein
min_ctrl1_normalized = apply(ctrl1_normalized, 1, min)
min_ctrl2_normalized = apply(ctrl2_normalized, 1, min)
min_ctrl3_normalized = apply(ctrl3_normalized, 1, min)
#substract the min value from each position to discard the 0
ctrl1_normalized_pos.=
sweep(ctrl1_normalized,1,min_ctrl1_normalized,FUN = '-')
ctrl2_normalized_pos.=
sweep(ctrl2_normalized,1,min_ctrl2_normalized,FUN = '-')
ctrl3_normalized_pos.=
sweep(ctrl3_normalized,1,min_ctrl3_normalized,FUN = '-')
sd.ctrl = apply(ctrl.rep1, 1, sd)
mean.ctrl.rep1 = apply(ctrl.rep1, 1, mean)
mean.ctrl.rep2 = apply(ctrl.rep2, 1, mean)
mean.ctrl.rep3 = apply(ctrl.rep3, 1, mean)
sd.ctrl = apply(ctrl.rep1, 1, sd)
mean.ctrl.rep1 = apply(ctrl.rep1, 1, mean)
mean.ctrl.rep2 = apply(ctrl.rep2, 1, mean)
mean.ctrl.rep3 = apply(ctrl.rep3, 1, mean)
ctrl.rep1.meanvalue = sweep(ctrl.rep1,1,mean.ctrl.rep1,'-')
ctrl1.zs.norm = sweep(ctrl1.meanvalue,1,sd.ctrl,'/')
ctrl.rep1.meanvalue = sweep(ctrl.rep1,1,mean.ctrl.rep1,'-')
ctrl1.zs.norm = sweep(ctrl.rep1.meanvalue,1,sd.ctrl,'/')
ctrl.rep2.meanvalue = sweep(ctrl.rep2,1,mean.ctrl.rep2,'-')
ctrl.rep2.zs.norm = sweep(ctrl.rep2.meanvalue,1,sd.ctr1,'/')
ctrl.rep1.meanvalue = sweep(ctrl.rep1,1,mean.ctrl.rep1,'-')
ctrl1.zs.norm = sweep(ctrl.rep1.meanvalue,1,sd.ctrl,'/')
ctrl.rep2.meanvalue = sweep(ctrl.rep2,1,mean.ctrl.rep2,'-')
ctrl.rep2.zs.norm = sweep(ctrl.rep2.meanvalue,1,sd.ctrl,'/')
ctrl.rep3.meanvalue = sweep(ctrl.rep3,1,mean.ctrl.rep3,'-')
ctrl.rep3.zs.norm = sweep(ctrl.rep3.meanvalue,1,sd.ctrl,'/')
#calculate again the min value for each protein
min_ctrl1_normalized = apply(ctrl1_normalized, 1, min)
min_ctrl2_normalized = apply(ctrl2_normalized, 1, min)
min_ctrl3_normalized = apply(ctrl3_normalized, 1, min)
#substract the min value from each position to discard the 0
ctrl1_normalized_pos.=
sweep(ctrl1_normalized,1,min_ctrl1_normalized,FUN = '-')
ctrl2_normalized_pos.=
sweep(ctrl2_normalized,1,min_ctrl2_normalized,FUN = '-')
ctrl3_normalized_pos.=
sweep(ctrl3_normalized,1,min_ctrl3_normalized,FUN = '-')
ctrl.rep1.meanvalue = sweep(ctrl.rep1,1,mean.ctrl.rep1,'-')
ctrl.rep1.zs.norm = sweep(ctrl.rep1.meanvalue,1,sd.ctrl,'/')
ctrl.rep2.meanvalue = sweep(ctrl.rep2,1,mean.ctrl.rep2,'-')
ctrl.rep2.zs.norm = sweep(ctrl.rep2.meanvalue,1,sd.ctrl,'/')
ctrl.rep3.meanvalue = sweep(ctrl.rep3,1,mean.ctrl.rep3,'-')
ctrl.rep3.zs.norm = sweep(ctrl.rep3.meanvalue,1,sd.ctrl,'/')
#calculate again the min value for each protein
min_ctrl1_normalized = apply(ctrl1_normalized, 1, min)
min_ctrl2_normalized = apply(ctrl2_normalized, 1, min)
min_ctrl3_normalized = apply(ctrl3_normalized, 1, min)
#substract the min value from each position to discard the 0
ctrl1_normalized_pos.=
sweep(ctrl1_normalized,1,min_ctrl1_normalized,FUN = '-')
ctrl2_normalized_pos.=
sweep(ctrl2_normalized,1,min_ctrl2_normalized,FUN = '-')
ctrl3_normalized_pos.=
sweep(ctrl3_normalized,1,min_ctrl3_normalized,FUN = '-')
ctrl.rep1.meanvalue <- sweep(ctrl.rep1,1,mean.ctrl.rep1,'-')
ctrl.rep1.zs.norm <- sweep(ctrl.rep1.meanvalue,1,sd.ctrl,'/')
ctrl.rep2.meanvalue <- sweep(ctrl.rep2,1,mean.ctrl.rep2,'-')
ctrl.rep2.zs.norm <- sweep(ctrl.rep2.meanvalue,1,sd.ctrl,'/')
ctrl.rep3.meanvalue <- sweep(ctrl.rep3,1,mean.ctrl.rep3,'-')
ctrl.rep3.zs.norm <- sweep(ctrl.rep3.meanvalue,1,sd.ctrl,'/')
#calculate again the min value for each protein
min.ctrl.rep1.zs.norm <- apply(ctrl.rep1.zs.norm, 1, min)
min.ctrl.rep2.zs.norm = apply(ctrl.rep2.zs.norm, 1, min)
min.ctrl.rep3.zs.norm = apply(ctrl.rep3.zs.norm, 1, min)
#substract the min value from each position to discard the 0
ctrl1_normalized_pos.=
sweep(ctrl1_normalized,1,min_ctrl1_normalized,FUN = '-')
ctrl2_normalized_pos.=
sweep(ctrl2_normalized,1,min_ctrl2_normalized,FUN = '-')
ctrl3_normalized_pos.=
sweep(ctrl3_normalized,1,min_ctrl3_normalized,FUN = '-')
ctrl.rep1.meanvalue <- sweep(ctrl.rep1,1,mean.ctrl.rep1,'-')
ctrl.rep1.zs.norm <- sweep(ctrl.rep1.meanvalue,1,sd.ctrl,'/')
ctrl.rep2.meanvalue <- sweep(ctrl.rep2,1,mean.ctrl.rep2,'-')
ctrl.rep2.zs.norm <- sweep(ctrl.rep2.meanvalue,1,sd.ctrl,'/')
ctrl.rep3.meanvalue <- sweep(ctrl.rep3,1,mean.ctrl.rep3,'-')
ctrl.rep3.zs.norm <- sweep(ctrl.rep3.meanvalue,1,sd.ctrl,'/')
#calculate again the min value for each protein
min.ctrl.rep1.zs.norm <- apply(ctrl.rep1.zs.norm, 1, min)
min.ctrl.rep2.zs.norm <- apply(ctrl.rep2.zs.norm, 1, min)
min.ctrl.rep3.zs.norm <- apply(ctrl.rep3.zs.norm, 1, min)
#substract the min value from each position to discard the 0
ctrl.rep1.norm.pos <- sweep(ctrl.rep1.zs.norm,1,min.ctrl.rep1.zs.norm,FUN = '-')
ctrl.rep2.norm.pos <- sweep(ctrl.rep2.zs.norm,1,min.ctrl.rep2.zs.norm,FUN = '-')
ctrl.rep3.norm.pos <- sweep(ctrl.rep3.zs.norm,1,min.ctrl.rep3.zs.norm,FUN = '-')
dim(MS_Table)
head(rownames(MS_Table))
head(colnames(MS_Table))
sum(apply(MS_Table, 1, anyNA)) == 0
sum(is.na(MS_Table)) == 0
ctrl.rep1 <-MS_Table_reordered[,1:25]
ctrl.rep2 <-MS_Table_reordered[,26:50]
ctrl.rep3 <-MS_Table_reordered[,51:75]
rnase.rep1 <-MS_Table_reordered[,76:100]
rnase.rep2 <-MS_Table_reordered[,101:125]
rnase.rep3 <-MS_Table_reordered[,126:150]
# Control Replicate 1 MVM
ctrl.rep1.mvm.norm <- t(apply(ctrl.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# View(ctrl.rep1.mvm.norm)
# Control Replicate 2 MVM
ctrl.rep2.mvm.norm <- t(apply(ctrl.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# Control Replicate 3 MVM
ctrl.rep3.mvm.norm <- t(apply(ctrl.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 1 MVM
rnase.rep1.mvm.norm <- t(apply(rnase.rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 2 MVM
rnase.rep2.mvm.norm <- t(apply(rnase.rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# RNase Replicate 3 MVM
rnase.rep3.mvm.norm <- t(apply(rnase.rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
ctrl.mvm.reduced =
(ctrl.rep1.mvm.norm + ctrl.rep2.mvm.norm + ctrl.rep3.mvm.norm)/3
rnase.mvm.reduced =
(rnase.rep1.mvm.norm + rnase.rep2.mvm.norm + rnase.rep3.mvm.norm)/3
ctrl.mvm.reduced =
(ctrl.rep1.mvm.norm + ctrl.rep2.mvm.norm + ctrl.rep3.mvm.norm)/3
rnase.mvm.reduced =
(rnase.rep1.mvm.norm + rnase.rep2.mvm.norm + rnase.rep3.mvm.norm)/3
ctrl.mvm.scaled =
sweep(ctrl.mvm.reduced,1,100/rowSums(ctrl.mvm.reduced),'*')
# Check if the two data frames are identical
is_identical <- identical(ctrl.mvm.reduced, ctrl.mvm)
# Print the result
if (is_identical) {
print("The data frames are identical.")
} else {
print("The data frames are not identical.")
}
rnase.mvm.scaled =
sweep(rnase.mvm.reduced,1,100/rowSums(rnase.mvm.reduced),'*')
rnase.mvm.scaled =
sweep(rnase.mvm.reduced,1,100/rowSums(rnase.mvm.reduced),'*')
ctrl.mvm <- ctrl.mvm.scaled
rnase.mvm <- rnase.mvm.scaled
m <- matrix(1:6, nrow = 2)
m
# Subtract the mean of each column from the corresponding elements in the matrix
swept_matrix <- sweep(m, 2, colMeans(m), FUN = "-")
print(swept_matrix)
applied_matrix <- apply(m, 2, function(x) x - mean(x))
print(applied_matrix)
sd.ctrl <- apply(ctrl.rep1, 1, sd)
mean.ctrl.rep1 <- apply(ctrl.rep1, 1, mean)
mean.ctrl.rep2 <- apply(ctrl.rep2, 1, mean)
mean.ctrl.rep3 <- apply(ctrl.rep3, 1, mean)
ctrl.rep1.meanvalue <- sweep(ctrl.rep1,1,mean.ctrl.rep1,'-')
ctrl.rep1.zt.norm <- sweep(ctrl.rep1.meanvalue,1,sd.ctrl,'/')
ctrl.rep2.meanvalue <- sweep(ctrl.rep2,1,mean.ctrl.rep2,'-')
ctrl.rep2.zt.norm <- sweep(ctrl.rep2.meanvalue,1,sd.ctrl,'/')
ctrl.rep3.meanvalue <- sweep(ctrl.rep3,1,mean.ctrl.rep3,'-')
ctrl.rep3.zt.norm <- sweep(ctrl.rep3.meanvalue,1,sd.ctrl,'/')
#calculate again the min value for each protein
min.ctrl.rep1.zt.norm <- apply(ctrl.rep1.zt.norm, 1, min)
min.ctrl.rep2.zt.norm <- apply(ctrl.rep2.zt.norm, 1, min)
min.ctrl.rep3.zt.norm <- apply(ctrl.rep3.zt.norm, 1, min)
#substract the min value from each position to discard the 0
ctrl.rep1.zt.norm.pos <- sweep(ctrl.rep1.zt.norm,1,min.ctrl.rep1.zt.norm,FUN = '-')
ctrl.rep2.zt.norm.pos <- sweep(ctrl.rep2.zt.norm,1,min.ctrl.rep2.zt.norm,FUN = '-')
ctrl.rep3.zt.norm.pos <- sweep(ctrl.rep3.zt.norm,1,min.ctrl.rep3.zt.norm,FUN = '-')
sd.rnase = apply(rnase.rep1, 1, sd)
mean.rnase.rep1 <- apply(rnase.rep1, 1, mean)
mean.rnase.rep2 <- apply(rnase.rep2, 1, mean)
mean.rnase.rep3 <- apply(rnase.rep3, 1, mean)
rnase.rep1.meanvalue <- sweep(rnase.rep1,1,mean.rnase.rep1,'-')
rnase.rep1.zt.norm <- sweep(rnase.rep1.meanvalue,1,sd.rnase,'/')
rnase.rep2.meanvalue <- sweep(rnase.rep2,1,mean.rnase.rep2,'-')
rnase.rep2.zt.norm <- sweep(rnase.rep2.meanvalue,1,sd.rnase,'/')
rnase.rep3.meanvalue <- sweep(rnase.rep3,1,mean.rnase.rep3,'-')
rnase.rep3.zt.norm <- sweep(rnase.rep3.meanvalue,1,sd.rnase,'/')
#calculate again the min value for each protein
min.rnase.rep1.zt.norm <- apply(rnase.rep1.zt.norm, 1, min)
min.rnase.rep2.zt.norm <- apply(rnase.rep2.zt.norm, 1, min)
min.rnase.rep3.zt.norm <- apply(rnase.rep3.zt.norm, 1, min)
#substract the min value from each position to discard the 0
rnase.rep1.zt.norm.pos <- sweep(rnase.rep1.zt.norm,1,min.rnase.rep1.zt.norm,FUN = '-')
rnase.rep2.zt.norm.pos <- sweep(rnase.rep2.zt.norm,1,min.rnase.rep2.zt.norm,FUN = '-')
rnase.rep3.zt.norm.pos <- sweep(rnase.rep3.zt.norm,1,min.rnase.rep3.zt.norm,FUN = '-')
ctrl.zt.reduced <- (ctrl.rep1.norm.zt.pos + ctrl.rep2.norm.zt.pos + ctrl.rep3.zt.norm.pos)/3
ctrl.rep1.meanvalue <- sweep(ctrl.rep1,1,mean.ctrl.rep1,'-')
ctrl.rep1.zt.norm <- sweep(ctrl.rep1.meanvalue,1,sd.ctrl,'/')
ctrl.rep2.meanvalue <- sweep(ctrl.rep2,1,mean.ctrl.rep2,'-')
ctrl.rep2.zt.norm <- sweep(ctrl.rep2.meanvalue,1,sd.ctrl,'/')
ctrl.rep3.meanvalue <- sweep(ctrl.rep3,1,mean.ctrl.rep3,'-')
ctrl.rep3.zt.norm <- sweep(ctrl.rep3.meanvalue,1,sd.ctrl,'/')
#calculate again the min value for each protein
min.ctrl.rep1.zt.norm <- apply(ctrl.rep1.zt.norm, 1, min)
min.ctrl.rep2.zt.norm <- apply(ctrl.rep2.zt.norm, 1, min)
min.ctrl.rep3.zt.norm <- apply(ctrl.rep3.zt.norm, 1, min)
#substract the min value from each position to discard the 0
ctrl.rep1.zt.norm.pos <- sweep(ctrl.rep1.zt.norm,1,min.ctrl.rep1.zt.norm,FUN = '-')
ctrl.rep2.zt.norm.pos <- sweep(ctrl.rep2.zt.norm,1,min.ctrl.rep2.zt.norm,FUN = '-')
ctrl.rep3.zt.norm.pos <- sweep(ctrl.rep3.zt.norm,1,min.ctrl.rep3.zt.norm,FUN = '-')
ctrl.zt.reduced <- (ctrl.rep1.zt.norm.pos + ctrl.rep2.zt.norm.pos + ctrl.rep3.zt.norm.pos)/3
rnase.zt.reduced <- (rnase.rep1.zt.norm.pos + rnase.rep2.zt.norm.pos + rnase.rep3.zt.norm.pos)/3
ctrl.rep1.zt.scaled =
sweep(ctrl.rep1.norm.zt.pos,1,100/rowSums(ctrl.rep1.zt.norm.pos),'*')
ctrl.rep1.zt.scaled =
sweep(ctrl.rep1.zt.norm.pos,1,100/rowSums(ctrl.rep1.zt.norm.pos),'*')
# rowSums(ctrl.rep1.zt.scaled)
ctrl.rep2.zt.scaled =
sweep(ctrl.rep2.zt.norm.pos,1,100/rowSums(ctrl.rep2.zt.norm.pos),'*')
# rowSums(ctrl.rep2.zt.scaled)
ctrl.rep3.zt.scaled =
sweep(ctrl.rep3.zt.norm.pos,1,100/rowSums(ctrl.rep3.zt.norm.pos),'*')
# rowSums(ctrl.rep3.zt.scaled)
ctrl.zt.scaled =
sweep(ctrl.zt.reduced,1,100/rowSums(ctrl.zt.reduced),'*')
# rowSums(ctrl.zt.scaled)
rnase.rep1.zt.scaled =
sweep(rnase.rep1.zt.norm.pos,1,100/rowSums(rnase.rep1.zt.norm.pos),'*')
# rowSums(rnase.rep1.zt.scaled)
rnase.rep2.zt.scaled =
sweep(rnase.rep2.zt.norm.pos,1,100/rowSums(rnase.rep2.zt.norm.pos),'*')
# rowSums(rnase.rep2.zt.scaled)
rnase.rep3.zt.scaled =
sweep(rnase.rep3.zt.norm.pos,1,100/rowSums(rnase.rep3.zt.norm.pos),'*')
# rowSums(rnase.rep3.zt.scaled)
rnase.zt.scaled =
sweep(rnase.zt.reduced,1,100/rowSums(rnase.zt.reduced),'*')
# rowSums(rnase.zt.scaled)
# Control Replicate 1 MMS
ctrl.rep1.mms.norm <- t(apply(ctrl.rep1, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# Control Replicate 2 MMS
ctrl.rep2.mms.norm <- t(apply(ctrl.rep2, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# Control Replicate 3 MMS
ctrl.rep3.mms.norm <- t(apply(ctrl.rep3, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# RNase Replicate 1 MMS
rnase.rep1.mms.norm <- t(apply(rnase.rep1, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# RNase Replicate 2 MMS
rnase.rep2.mms.norm <- t(apply(rnase.rep2, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
# RNase Replicate 2 MMS
rnase.rep3.mms.norm <- t(apply(rnase.rep3, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
test_matrix <- matrix(c(1,45,3,8,27,4,79,30,0,100,99,50,0,76,1,4,6,3,8,7,3), byrow = TRUE, nrow = 3)
test_normalized <- t(apply(test_matrix, 1, function(x){
normalized <- (x-min(x))/(max(x)-min(x))
}))
#test_matrix
#test_normalized
ctrl.mms.reduced <- ((ctrl.rep1.mms.norm + ctrl.rep2.mms.norm + ctrl.rep3.mms.norm)/3)
rnase.mms.reduced <- ((rnase.rep1.mms.norm + rnase.rep2.mms.norm + rnase.rep3.mms.norm)/3)
ctrl.mms.scaled <- t(apply(ctrl.mms.reduced, 1, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
}))
rnase.mms.scaled <- t(apply(rnase.mms.reduced, 1, function(x){
normalized <- (x-min(x))/(max(x)-min(x))
}))
##plots of the scaled replicates
plot(rnase.rep1.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
plot(rnase.rep2.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
plot(rnase.rep3.mms.norm[1,], xlab="fraction", ylab="protein amount", col="green", pch=20)
##plot of the merged ctrl
plot(rnase.mms.reduced[1,], xlab="fraction", ylab="protein amount", col="red", pch=20)
##plot of the merged and scaled ctrl
plot(rnase.mms.scaled[1,], xlab="fraction", ylab="protein amount", col="blue", pch=20)
ctrl.mms <- ctrl.mms.scaled
rnase.mms <- rnase.mms.scaled
