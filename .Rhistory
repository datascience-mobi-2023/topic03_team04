axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = stat(count), y = ..count..),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
#Variablen der Normalisierungsmethode hier eintragen:
peak.ctrl <- peak.mms.ctrl
peak.rnase <- peak.mms.rnase
cluster <- km.mms$cluster
#abhängig davon ob es drei oder vier cluster gibt werden unterschiedliche Vektoren verwendet:
if (n == 3){
col <- c("springgreen", "violetred1", "cyan")
vjust <- c(1, -0.5, -0.5)
labels <- c("no shift", "left shift", "right shift")
}
if (n == 4){
col <- c("springgreen", "violetred1", "cyan", "orange")
vjust <- c(-0.5, -0.5, -0.5, -0.5)
labels <- c("left shift", "right shift", "no shift", "precipitated")
}
library("ggplot2")
#hier wird ein Datframe mit allen für den dotplot relevanten daten erstellt
peaks <- data.frame(peak.ctrl, peak.rnase, cluster)
#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
#Variablen der Normalisierungsmethode hier eintragen:
peak.ctrl <- peak.mvm.ctrl
knitr::opts_chunk$set(echo = TRUE)
precipitated.mms
#mms
globalpeak.ctrl.mms <- readRDS("Non_synchronized_A549_globalpeak.ctrl.mms")
globalpeak.value.ctrl.mms <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.mms")
globalpeak.rnase.mms <- readRDS("Non_synchronized_A549_globalpeak.rnase.mms")
globalpeak.value.rnase.mms <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.mms")
localpeaks.ctrl.mms <- readRDS("Non_synchronized_A549_localpeaks.ctrl.mms")
localpeaks.values.ctrl.mms <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.mms")
localpeaks.rnase.mms <- readRDS("Non_synchronized_A549_localpeaks.rnase.mms")
localpeaks.values.rnase.mms <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.mms")
fraction1.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mms")
fraction25.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mms")
fraction1.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mms")
fraction25.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mms")
precipitated.mms <- readRDS("Non_synchronized_A549_precipitated.mms")
precipitated.mms
length(shift_mms_named[shift_mms_named == "right shift"])
# Anzahl der Zeilen im Dataframe
num_rows <- nrow(ctrl.mvm)
# Tabelle zum Speichern der Parameter
parameter_gaussian_ctrl.mvm_table <- data.frame(a = numeric(),
mu = numeric(),
sigma = numeric())
# Iteriere über jede Zeile
for (i in 1:num_rows) {
x <- c(1:25)
y <- as.numeric(ctrl.mvm[i,])
# Gaussfunktion: f(x) = a * exp(-((x - mu)^2) / (2 * sigma^2))
gauss <- function(x, a, mu, sigma) {
return(a * exp(-((x - mu)^2) / (2 * sigma^2)))
}
#Finden der besten Parameter für die Gaussfunktion, um die Datenpunkte anzupassen
fit_function <- function(params) {
a <- params[1]
mu <- params[2]
sigma <- params[3]
# Berechne die Summe der quadrierten Abweichungen zwischen der Gaussfunktion und den Datenpunkten
squared_diff <- (gauss(x, a, mu, sigma) - y)^2
sum_squared_diff <- sum(squared_diff)
return(sum_squared_diff)
}
# Schätze die Parameter, die die besten Anpassungswerte liefern
initial_params <- c(1, 3, 1)  # Startwerte für die Parameter a, mu und sigma
optimized_params <- optim(initial_params, fit_function)$par
# Speichere die geschätzten Parameter in der Tabelle
parameter_gaussian_ctrl.mvm_table <- rbind(parameter_gaussian_ctrl.mvm_table, optimized_params)
}
num_rows <- nrow(rnase.mvm)
parameter_gaussian_rnase.mvm_table <- data.frame(a = numeric(),
mu = numeric(),
sigma = numeric())
for (i in 1:num_rows) {
x <- c(1:25)
y <- as.numeric(rnase.mvm[i,])
gauss <- function(x, a, mu, sigma) {
return(a * exp(-((x - mu)^2) / (2 * sigma^2)))
}
fit_function <- function(params) {
a <- params[1]
mu <- params[2]
sigma <- params[3]
squared_diff <- (gauss(x, a, mu, sigma) - y)^2
sum_squared_diff <- sum(squared_diff)
return(sum_squared_diff)
}
initial_params <- c(1, 3, 1)
optimized_params <- optim(initial_params, fit_function)$par
parameter_gaussian_rnase.mvm_table <- rbind(parameter_gaussian_rnase.mvm_table, optimized_params)
}
num_rows <- nrow(rnase.mvm)
parameter_gaussian_rnase.mvm_table <- data.frame(a = numeric(),
mu = numeric(),
sigma = numeric())
for (i in 1:num_rows) {
x <- c(1:25)
y <- as.numeric(rnase.mvm[i,])
gauss <- function(x, a, mu, sigma) {
return(a * exp(-((x - mu)^2) / (2 * sigma^2)))
}
fit_function <- function(params) {
a <- params[1]
mu <- params[2]
sigma <- params[3]
squared_diff <- (gauss(x, a, mu, sigma) - y)^2
sum_squared_diff <- sum(squared_diff)
return(sum_squared_diff)
}
initial_params <- c(1, 3, 1)
optimized_params <- optim(initial_params, fit_function)$par
parameter_gaussian_rnase.mvm_table <- rbind(parameter_gaussian_rnase.mvm_table, optimized_params)
}
num_rows <- nrow(ctrl.zt)
parameter_gaussian_ctrl.zt_table <- data.frame(a = numeric(),
mu = numeric(),
sigma = numeric())
for (i in 1:num_rows) {
x <- c(1:25)
y <- as.numeric(ctrl.zt[i,])
gauss <- function(x, a, mu, sigma) {
return(a * exp(-((x - mu)^2) / (2 * sigma^2)))
}
fit_function <- function(params) {
a <- params[1]
mu <- params[2]
sigma <- params[3]
squared_diff <- (gauss(x, a, mu, sigma) - y)^2
sum_squared_diff <- sum(squared_diff)
return(sum_squared_diff)
}
initial_params <- c(1, 3, 1)
optimized_params <- optim(initial_params, fit_function)$par
parameter_gaussian_ctrl.zt_table <- rbind(parameter_gaussian_ctrl.zt_table, optimized_params)
}
num_rows <- nrow(rnase.zt)
parameter_gaussian_rnase.zt_table <- data.frame(a = numeric(),
mu = numeric(),
sigma = numeric())
for (i in 1:num_rows) {
x <- c(1:25)
y <- as.numeric(rnase.zt[i,])
gauss <- function(x, a, mu, sigma) {
return(a * exp(-((x - mu)^2) / (2 * sigma^2)))
}
fit_function <- function(params) {
a <- params[1]
mu <- params[2]
sigma <- params[3]
squared_diff <- (gauss(x, a, mu, sigma) - y)^2
sum_squared_diff <- sum(squared_diff)
return(sum_squared_diff)
}
initial_params <- c(1, 3, 1)
optimized_params <- optim(initial_params, fit_function)$par
parameter_gaussian_rnase.zt_table <- rbind(parameter_gaussian_rnase.zt_table, optimized_params)
}
num_rows <- nrow(ctrl.mms)
parameter_gaussian_ctrl.mms_table <- data.frame(a = numeric(),
mu = numeric(),
sigma = numeric())
for (i in 1:num_rows) {
x <- c(1:25)
y <- as.numeric(ctrl.mms[i,])
gauss <- function(x, a, mu, sigma) {
return(a * exp(-((x - mu)^2) / (2 * sigma^2)))
}
fit_function <- function(params) {
a <- params[1]
mu <- params[2]
sigma <- params[3]
squared_diff <- (gauss(x, a, mu, sigma) - y)^2
sum_squared_diff <- sum(squared_diff)
return(sum_squared_diff)
}
initial_params <- c(1, 3, 1)
optimized_params <- optim(initial_params, fit_function)$par
parameter_gaussian_ctrl.mms_table <- rbind(parameter_gaussian_ctrl.mms_table, optimized_params)
}
num_rows <- nrow(rnase.mvm)
parameter_gaussian_rnase.mvm_table <- data.frame(a = numeric(),
mu = numeric(),
sigma = numeric())
for (i in 1:num_rows) {
x <- c(1:25)
y <- as.numeric(rnase.mvm[i,])
gauss <- function(x, a, mu, sigma) {
return(a * exp(-((x - mu)^2) / (2 * sigma^2)))
}
fit_function <- function(params) {
a <- params[1]
mu <- params[2]
sigma <- params[3]
squared_diff <- (gauss(x, a, mu, sigma) - y)^2
sum_squared_diff <- sum(squared_diff)
return(sum_squared_diff)
}
initial_params <- c(1, 3, 1)
optimized_params <- optim(initial_params, fit_function)$par
parameter_gaussian_rnase.mvm_table <- rbind(parameter_gaussian_rnase.mvm_table, optimized_params)
}
ctrl.mvm <- readRDS("Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("Non_synchronized_A549_rnase.mms")
#mvm
globalpeak.ctrl.mvm <- readRDS("Non_synchronized_A549_globalpeak.ctrl.mvm")
globalpeak.value.ctrl.mvm <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.mvm")
globalpeak.rnase.mvm <- readRDS("Non_synchronized_A549_globalpeak.rnase.mvm")
globalpeak.value.rnase.mvm <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.mvm")
localpeaks.ctrl.mvm <- readRDS("Non_synchronized_A549_localpeaks.ctrl.mvm")
localpeaks.values.ctrl.mvm <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.mvm")
localpeaks.rnase.mvm <- readRDS("Non_synchronized_A549_localpeaks.rnase.mvm")
localpeaks.values.rnase.mvm <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.mvm")
fraction1.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mvm")
fraction25.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mvm")
fraction1.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mvm")
fraction25.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mvm")
precipitated.mvm <- readRDS("Non_synchronized_A549_precipitated.mvm")
#zt
globalpeak.ctrl.zt <- readRDS("Non_synchronized_A549_globalpeak.ctrl.zt")
globalpeak.value.ctrl.zt <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.zt")
globalpeak.rnase.zt <- readRDS("Non_synchronized_A549_globalpeak.rnase.zt")
globalpeak.value.rnase.zt <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.zt")
localpeaks.ctrl.zt <- readRDS("Non_synchronized_A549_localpeaks.ctrl.zt")
localpeaks.values.ctrl.zt <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.zt")
localpeaks.rnase.zt <- readRDS("Non_synchronized_A549_localpeaks.rnase.zt")
localpeaks.values.rnase.zt <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.zt")
fraction1.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.zt")
fraction1.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.zt")
precipitated.zt <- readRDS("Non_synchronized_A549_precipitated.zt")
#mms
globalpeak.ctrl.mms <- readRDS("Non_synchronized_A549_globalpeak.ctrl.mms")
globalpeak.value.ctrl.mms <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.mms")
globalpeak.rnase.mms <- readRDS("Non_synchronized_A549_globalpeak.rnase.mms")
globalpeak.value.rnase.mms <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.mms")
localpeaks.ctrl.mms <- readRDS("Non_synchronized_A549_localpeaks.ctrl.mms")
localpeaks.values.ctrl.mms <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.mms")
localpeaks.rnase.mms <- readRDS("Non_synchronized_A549_localpeaks.rnase.mms")
localpeaks.values.rnase.mms <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.mms")
fraction1.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mms")
fraction25.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mms")
fraction1.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mms")
fraction25.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mms")
precipitated.mms <- readRDS("Non_synchronized_A549_precipitated.mms")
n = 2
shift_mvm_global <- globalpeak.rnase.mvm - globalpeak.ctrl.mvm
shift_mvm_named <- shift_mvm_global
for (i in 1:nrow(rnase.mvm)) {
if (i %in% precipitated.mvm) {shift_mvm_named[i] <- "precipitated"}
else if (shift_mvm_global [i] < (-n)){shift_mvm_named [i] <- "right shift"}
else if (shift_mvm_global [i] > n){shift_mvm_named [i] <- "left shift"}
else (shift_mvm_named [i] <- "no shift")
}
# View(shift_mvm_named)
length(shift_mvm_named[shift_mvm_named == "right shift"])
length(shift_mvm_named[shift_mvm_named == "no shift"])
length(shift_mvm_named[shift_mvm_named == "left shift"])
length(shift_mvm_named[shift_mvm_named == "precipitated"])
precipitated.zt
n = 2
shift_zt_global <- globalpeak.rnase.zt - globalpeak.ctrl.zt
shift_zt_named <- shift_zt_global
for (i in 1:nrow(ctrl.zt)) {
if (i %in% precipitated.zt) {shift_zt_named[i] <- "precipitated"}
else if (shift_zt_global [i] < (-n)){shift_zt_named [i] <- "right shift"}
else if (shift_zt_global [i] > n){shift_zt_named [i] <- "left shift"}
else (shift_zt_named [i] <- "no shift")
}
# View(shift_zt_named)
length(shift_zt_named[shift_zt_named == "right shift"])
length(shift_zt_named[shift_zt_named == "no shift"])
length(shift_zt_named[shift_zt_named == "left shift"])
length(shift_zt_named[shift_zt_named == "precipitated"])
precipitated.mms
n = 2
shift_mms_global <- globalpeak.rnase.mms - globalpeak.ctrl.mms
shift_mms_named <- shift_mms_global
for (i in 1:nrow(ctrl.mms)) {
if (i %in% precipitated.mms) {shift_mms_named[i] <- "precipitated"}
else if (shift_mms_global [i] < (-n)){shift_mms_named [i] <- "right shift"}
else if (shift_mms_global [i] > n){shift_mms_named [i] <- "left shift"}
else (shift_mms_named [i] <- "no shift")
}
# View(shift_mms_named)
length(shift_mms_named[shift_mms_named == "right shift"])
length(shift_mms_named[shift_mms_named == "no shift"])
length(shift_mms_named[shift_mms_named == "no shift"])
length(shift_mms_named[shift_mms_named == "left shift"])
length(shift_mms_named[shift_mms_named == "precipitated"])
gshift <- shift_mms_global
lshift <- lshift.mms
precipitated <- precipitated.mms
w.gshift <- 1
w.lshift <- 0
w.precipitated <- 0
peak.ctrl <- peak.mms.ctrl
peak.rnase <- peak.mms.rnase
parameters.raw <- cbind(gshift, lshift, precipitated)
rownames(parameters.raw) <- rownames(ctrl.mms)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
weight <- c(w.gshift, w.lshift, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
#View(parameters)
dim(parameters)
seq_along(weight)
weight <- c(w.gshift, w.lshift, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
#View(parameters)
dim(weigth)
#View(parameters)
dim(weight)
#View(parameters)
length(weight)
for (i in length(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
#View(parameters)
weight
parameters.scaled[,1]*weight[1]
View(parameters)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
#shift of local maxima
lshift.mms <- sample(1:100, length(shift.mms), replace = TRUE)
#overlap
overlap.mms <- sample(1:100, length(shift.mms), replace = TRUE)
#precipitated
precipitated.mms <- sample(1:2, length(shift.mms), replace = TRUE)
weight <- c(w.gshift, w.lshift, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
gshift <- shift_mms_global
lshift <- lshift.mms
precipitated <- precipitated.mms
w.gshift <- 1
w.lshift <- 5
w.precipitated <- 5
peak.ctrl <- peak.mms.ctrl
peak.rnase <- peak.mms.rnase
parameters.raw <- cbind(gshift, lshift, precipitated)
rownames(parameters.raw) <- rownames(ctrl.mms)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
weight <- c(w.gshift, w.lshift, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
parameters <- parameters.scaled
View(parameters)
View(parameters)
weight <- c(w.gshift, w.lshift, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
parameters <- parameters.scaled
View(parameters)
weight <- c(w.gshift, w.lshift, w.precipitated)
parameters <- parameters.scaled
for (i in seq_along(weight)){
parameters[,i] <- parameters.scaled[,i]*weight[i]
}
View(parameters)
parameters.raw <- cbind(gshift, lshift, precipitated)
rownames(parameters.raw) <- rownames(ctrl.mms)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
weight <- c(w.gshift, w.lshift, w.precipitated)
parameters <- parameters.scaled
for (i in seq_along(weight)){
parameters[,i] <- parameters.scaled[,i]*weight[i]
}
View(parameters)
weight <- c(w.gshift, w.lshift, w.precipitated)
parameters <- parameters.scaled
for (i in seq_along(weight)){
parameters[,i] <- parameters.scaled[,i]*weight[i]
}
View(parameters)
weight <- c(w.gshift, w.lshift, w.precipitated)
parameters <- parameters.scaled
for (i in seq_along(weight)){
parameters[,i] <- parameters.scaled[,i]*weight[i]
}
View(parameters)
wss <- sapply(1:5, function(x){
kmeans(parameters, centers = x, nstart = 100)$tot.withinss
})
library("ggplot2")
wss.df <- data.frame(values = wss)
ggplot(wss.df, aes(x = 1:length(wss), y = values))+
geom_line(col = "mediumvioletred")+
geom_point(col = "midnightblue")+
labs(x = "Number of clusters", y = "number of assigned proteins")+
theme(panel.border = element_rect(color="grey", fill = NA))
cluster <- km.mms$cluster
#abhängig davon ob es drei oder vier cluster gibt werden unterschiedliche Vektoren verwendet:
if (n == 3){
col <- c("springgreen", "violetred1", "cyan")
vjust <- c(1, -0.5, -0.5)
labels <- c("no shift", "left shift", "right shift")
}
if (n == 4){
col <- c("springgreen", "violetred1", "cyan", "orange")
vjust <- c(-0.5, -0.5, -0.5, -0.5)
labels <- c("left shift", "right shift", "no shift", "precipitated")
}
library("ggplot2")
#hier wird ein Datframe mit allen für den dotplot relevanten daten erstellt
peaks <- data.frame(peak.ctrl, peak.rnase, cluster)
#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
gshift <- shift_mvm_global
lshift <- lshift.mvm
