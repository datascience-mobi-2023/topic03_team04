for(i in 1:nrow(predictions_zt_2)) {
for(j in 1:ncol(predictions_zt_2)){
if(predictions_zt_2[i,j] > 2) {
predictions_zt_rdeep[i,j] <- 1
}  else if(predictions_zt_2[i,j] < (-2)) {
predictions_zt_rdeep[i,j] <- (-1)
} else {predictions_zt_rdeep[i,j] <- 0
}
}
}
rownames(predictions_zt_rdeep) <- rownames(rnase.zt[2501:3074, ])
# print(summary(model_zt_all_2))
# View(predictions_zt_rdeep)
train_zt_2 <- data.frame(Korrelation_2 = correlation.zt[1:2500, ], Shift_2 = shift.amount[1:2500, ])
model_zt_all_2 <- lm(Shift_2 ~ Korrelation_2, data = train_zt_2)
test_zt_2 <- data.frame(Korrelation_2 = correlation.zt[2501:3074, ])
predictions_zt_2 <- as.data.frame(predict(model_zt_all_2, newdata = test_zt_2))
predictions_zt_rdeep <- matrix(0, nrow = nrow(predictions_zt_2), ncol = ncol(predictions_zt_2))
for(i in 1:nrow(predictions_zt_2)) {
for(j in 1:ncol(predictions_zt_2)){
if(predictions_zt_2[i,j] > 2) {
predictions_zt_rdeep[i,j] <- 1
}  else if(predictions_zt_2[i,j] < (-2)) {
predictions_zt_rdeep[i,j] <- (-1)
} else {predictions_zt_rdeep[i,j] <- 0
}
}
}
rownames(predictions_zt_rdeep) <- rownames(rnase.zt[2501:3074, ])
# print(summary(model_zt_all_2))
# View(predictions_zt_rdeep)
x <- train_zt_2$Korrelation_2
y <- train_zt_2$Shift_2
plot(x, y, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(x), max(x)), ylim = c(min(y), max(y)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_zt_all_2, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
abline(h = - 2.5, col = "green4", lwd = 2)
test_x <- test_zt_2$Korrelation_2
predicted_y <- predict(model_zt_all_2, newdata = test_zt_2)
points(test_x, predicted_y, col = "lightblue", pch = 16, cex = 0.9)
legend("topleft", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
shift.amount.plot = abs(data.frame(shift_zt_global))
train_zt_plot <- data.frame(Korrelation_plot = correlation.zt[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
model_zt_all_plot <- lm(Shift_plot ~ Korrelation_plot, data = train_zt_plot)
test_zt_plot <- data.frame(Korrelation_plot = correlation.zt[2501:3074, ])
predictions_zt_plot <- as.data.frame(predict(model_zt_all_plot, newdata = test_zt_plot))
rownames(predictions_zt_plot) <- rownames(rnase.zt[2501:3074, ])
px <- train_zt_plot$Korrelation_plot
py <- train_zt_plot$Shift_plot
plot(px, py, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(px), max(px)), ylim = c(min(py), max(py)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_zt_all_plot, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
test_px <- test_zt_plot$Korrelation_plot
predicted_py <- predict(model_zt_all_plot, newdata = test_zt_plot)
points(test_px, predicted_py, col = "lightblue", pch = 16, cex = 0.9)
legend("topright", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
shift.amount.plot = abs(data.frame(shift_zt_global))
train_zt_plot <- data.frame(Korrelation_plot = correlation.zt[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
model_zt_all_plot <- lm(Shift_plot ~ Korrelation_plot, data = train_zt_plot)
test_zt_plot <- data.frame(Korrelation_plot = correlation.zt[2501:3074, ])
predictions_zt_plot <- as.data.frame(predict(model_zt_all_plot, newdata = test_zt_plot))
rownames(predictions_zt_plot) <- rownames(rnase.zt[2501:3074, ])
px <- train_zt_plot$Korrelation_plot
py <- train_zt_plot$Shift_plot
plot(px, py, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(px), max(px)), ylim = c(min(py), max(py)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_zt_all_plot, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
test_px <- test_zt_plot$Korrelation_plot
predicted_py <- predict(model_zt_all_plot, newdata = test_zt_plot)
points(test_px, predicted_py, col = "lightblue", pch = 16, cex = 0.9)
legend("topright", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
shift.amount.plot = abs(data.frame(shift_zt_global))
train_zt_plot <- data.frame(Korrelation_plot = correlation.zt[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
model_zt_all_plot <- lm(Shift_plot ~ Korrelation_plot, data = train_zt_plot)
test_zt_plot <- data.frame(Korrelation_plot = correlation.zt[2501:3074, ])
predictions_zt_plot <- as.data.frame(predict(model_zt_all_plot, newdata = test_zt_plot))
rownames(predictions_zt_plot) <- rownames(rnase.zt[2501:3074, ])
px <- train_zt_plot$Korrelation_plot
py <- train_zt_plot$Shift_plot
plot(px, py, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(px), max(px)), ylim = c(min(py), max(py)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_zt_all_plot, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
test_px <- test_zt_plot$Korrelation_plot
predicted_py <- predict(model_zt_all_plot, newdata = test_zt_plot)
points(test_px, predicted_py, col = "lightblue", pch = 16, cex = 0.9)
legend("topright", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
shift.amount.plot = abs(data.frame(shift_zt_global))
train_zt_plot <- data.frame(Korrelation_plot = correlation.zt[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
model_zt_all_plot <- lm(Shift_plot ~ Korrelation_plot, data = train_zt_plot)
test_zt_plot <- data.frame(Korrelation_plot = correlation.zt[2501:3074, ])
predictions_zt_plot <- as.data.frame(predict(model_zt_all_plot, newdata = test_zt_plot))
rownames(predictions_zt_plot) <- rownames(rnase.zt[2501:3074, ])
px <- train_zt_plot$Korrelation_plot
py <- train_zt_plot$Shift_plot
plot(px, py, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift [Fraction]", xlim = c(min(px), max(px)), ylim = c(min(py), max(py)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_zt_all_plot, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
test_px <- test_zt_plot$Korrelation_plot
predicted_py <- predict(model_zt_all_plot, newdata = test_zt_plot)
points(test_px, predicted_py, col = "lightblue", pch = 16, cex = 0.9)
legend("topright", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
#for the results of our parameters
summary.numbers.regression <- rbind(true.positives.regression.shift, false.positives.regression.shift, true.negatives.regression.shift, false.negatives.regression.shift)
#for the results of our parameters
summary.numbers.regression <- rbind(true.positives.regression.shift, false.positives.regression.shift, true.negatives.regression.shift, false.negatives.regression.shift)
# Number of wrongly assigned (false positives) RBPs with parameters
false.positives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.regression[[z]]) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
false.positives.regression.shift[z] <- counter
}
predictions_mms_rdeep_shift <- matrix(0, nrow = nrow(predictions_mms_plot), ncol = ncol(predictions_mms_plot))
train_mms <- data.frame(Korrelation = correlation.mms[1:2500, ], Shift = shift_mms[1:2500, ])
shift.amount = data.frame(shift_mms_global)
correlation.mms <-as.data.frame( sapply(1:nrow(ctrl.mms), function(i) cor(ctrl.mms[i, ], rnase.mms[i, ])))
rownames(correlation.mms) <- rownames(rnase.mms)
train_mms_2 <- data.frame(Korrelation_2 = correlation.mms[1:2500, ], Shift_2 = shift.amount[1:2500, ])
model_mms_all_2 <- lm(Shift_2 ~ Korrelation_2, data = train_mms_2)
test_mms_2 <- data.frame(Korrelation_2 = correlation.mms[2501:3074, ])
predictions_mms_2 <- as.data.frame(predict(model_mms_all_2, newdata = test_mms_2))
predictions_mms_rdeep <- matrix(0, nrow = nrow(predictions_mms_2), ncol = ncol(predictions_mms_2))
for(i in 1:nrow(predictions_mms_2)) {
for(j in 1:ncol(predictions_mms_2)){
if(predictions_mms_2[i,j] > 2) {
predictions_mms_rdeep[i,j] <- 1
}  else if(predictions_mms_2[i,j] < (-2)) {
predictions_mms_rdeep[i,j] <- (-1)
} else {predictions_mms_rdeep[i,j] <- 0
}
}
}
rownames(predictions_mms_rdeep) <- rownames(rnase.mms[2501:3074, ])
# print(summary(model_mms_all_2))
# View(predictions_mms_rdeep)
x <- train_mms_2$Korrelation_2
y <- train_mms_2$Shift_2
plot(x, y, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(x), max(x)), ylim = c(min(y), max(y)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_mms_all_2, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
abline(h = - 2.5, col = "green4", lwd = 2)
test_x <- test_mms_2$Korrelation_2
predicted_y <- predict(model_mms_all_2, newdata = test_mms_2)
points(test_x, predicted_y, col = "lightblue", pch = 16, cex = 0.9)
legend("topleft", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
shift.amount.plot = abs(data.frame(shift_mms_global))
train_mms_plot <- data.frame(Korrelation_plot = correlation.mvm[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
shift.amount = data.frame(shift_mvm_global)
correlation.mvm <-as.data.frame( sapply(1:nrow(ctrl.mvm), function(i) cor(ctrl.mvm[i, ], rnase.mvm[i, ])))
rownames(correlation.mvm) <- rownames(rnase.mvm)
train_mvm_2 <- data.frame(Korrelation_2 = correlation.mvm[1:2500, ], Shift_2 = shift.amount[1:2500, ])
model_mvm_all_2 <- lm(Shift_2 ~ Korrelation_2, data = train_mvm_2)
test_mvm_2 <- data.frame(Korrelation_2 = correlation.mvm[2501:3074, ])
predictions_mvm_2 <- as.data.frame(predict(model_mvm_all_2, newdata = test_mvm_2))
predictions_mvm_rdeep <- matrix(0, nrow = nrow(predictions_mvm_2), ncol = ncol(predictions_mvm_2))
for(i in 1:nrow(predictions_mvm_2)) {
for(j in 1:ncol(predictions_mvm_2)){
if(predictions_mvm_2[i,j] > 2) {
predictions_mvm_rdeep[i,j] <- 1
}  else if(predictions_mvm_2[i,j] < (-2)) {
predictions_mvm_rdeep[i,j] <- (-1)
} else {predictions_mvm_rdeep[i,j] <- 0
}
}
}
rownames(predictions_mvm_rdeep) <- rownames(rnase.mvm[2501:3074, ])
# print(summary(model_mvm_all_2))
# View(predictions_mvm_rdeep)
x <- train_mvm_2$Korrelation_2
y <- train_mvm_2$Shift_2
plot(x, y, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(x), max(x)), ylim = c(min(y), max(y)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_mvm_all_2, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
abline(h = - 2.5, col = "green4", lwd = 2)
test_x <- test_mvm_2$Korrelation_2
predicted_y <- predict(model_mvm_all_2, newdata = test_mvm_2)
points(test_x, predicted_y, col = "lightblue", pch = 16, cex = 0.9)
legend("topleft", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
shift.amount.plot = abs(data.frame(shift_mvm_global))
train_mvm_plot <- data.frame(Korrelation_plot = correlation.mvm[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
model_mvm_all_plot <- lm(Shift_plot ~ Korrelation_plot, data = train_mvm_plot)
test_mvm_plot <- data.frame(Korrelation_plot = correlation.mvm[2501:3074, ])
predictions_mvm_plot <- as.data.frame(predict(model_mvm_all_plot, newdata = test_mvm_plot))
rownames(predictions_mvm_plot) <- rownames(rnase.mvm[2501:3074, ])
px <- train_mvm_plot$Korrelation_plot
py <- train_mvm_plot$Shift_plot
plot(px, py, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(px), max(px)), ylim = c(min(py), max(py)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_mvm_all_plot, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
test_px <- test_mvm_plot$Korrelation_plot
predicted_py <- predict(model_mvm_all_plot, newdata = test_mvm_plot)
points(test_px, predicted_py, col = "lightblue", pch = 16, cex = 0.9)
legend("topright", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
train_mvm <- data.frame(Korrelation = correlation.mvm[1:2500, ], Shift = shift_mvm[1:2500, ])
model_mvm_all <- lm(Shift ~ Korrelation, data = train_mvm)
test_mvm <- data.frame(Korrelation = correlation.mvm[2501:3074, ])
predictions_mvm <- as.data.frame(predict(model_mvm_all, newdata = test_mvm))
rounded_predictions_mvm_all <- round(predictions_mvm)
rownames(rounded_predictions_mvm_all) <- rownames(rnase.mvm[2501:3074, ])
print(summary(model_mvm_all))
#print(rounded_predictions_mvm_all)
shift.amount = data.frame(shift_mvm_global)
correlation.zt <-as.data.frame(sapply(1:nrow(ctrl.zt), function(i) cor(as.numeric(ctrl.zt[i, ]), as.numeric(rnase.zt[i, ]))))
rownames(correlation.zt) <- rownames(rnase.zt)
train_zt_2 <- data.frame(Korrelation_2 = correlation.zt[1:2500, ], Shift_2 = shift.amount[1:2500, ])
model_zt_all_2 <- lm(Shift_2 ~ Korrelation_2, data = train_zt_2)
test_zt_2 <- data.frame(Korrelation_2 = correlation.zt[2501:3074, ])
predictions_zt_2 <- as.data.frame(predict(model_zt_all_2, newdata = test_zt_2))
predictions_zt_rdeep <- matrix(0, nrow = nrow(predictions_zt_2), ncol = ncol(predictions_zt_2))
for(i in 1:nrow(predictions_zt_2)) {
for(j in 1:ncol(predictions_zt_2)){
if(predictions_zt_2[i,j] > 2) {
predictions_zt_rdeep[i,j] <- 1
}  else if(predictions_zt_2[i,j] < (-2)) {
predictions_zt_rdeep[i,j] <- (-1)
} else {predictions_zt_rdeep[i,j] <- 0
}
}
}
rownames(predictions_zt_rdeep) <- rownames(rnase.zt[2501:3074, ])
# print(summary(model_zt_all_2))
# View(predictions_zt_rdeep)
x <- train_zt_2$Korrelation_2
y <- train_zt_2$Shift_2
plot(x, y, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(x), max(x)), ylim = c(min(y), max(y)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_zt_all_2, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
abline(h = - 2.5, col = "green4", lwd = 2)
test_x <- test_zt_2$Korrelation_2
predicted_y <- predict(model_zt_all_2, newdata = test_zt_2)
points(test_x, predicted_y, col = "lightblue", pch = 16, cex = 0.9)
legend("topleft", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
shift.amount.plot = abs(data.frame(shift_zt_global))
train_zt_plot <- data.frame(Korrelation_plot = correlation.zt[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
model_zt_all_plot <- lm(Shift_plot ~ Korrelation_plot, data = train_zt_plot)
test_zt_plot <- data.frame(Korrelation_plot = correlation.zt[2501:3074, ])
predictions_zt_plot <- as.data.frame(predict(model_zt_all_plot, newdata = test_zt_plot))
rownames(predictions_zt_plot) <- rownames(rnase.zt[2501:3074, ])
px <- train_zt_plot$Korrelation_plot
py <- train_zt_plot$Shift_plot
plot(px, py, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(px), max(px)), ylim = c(min(py), max(py)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_zt_all_plot, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
test_px <- test_zt_plot$Korrelation_plot
predicted_py <- predict(model_zt_all_plot, newdata = test_zt_plot)
points(test_px, predicted_py, col = "lightblue", pch = 16, cex = 0.9)
legend("topright", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
train_zt <- data.frame(Korrelation_zt = correlation.zt[1:2500, ], Shift = shift_zt[1:2500, ])
model_zt_all <- lm(Shift ~ Korrelation_zt, data = train_zt)
test_zt <- data.frame(Korrelation_zt = correlation.zt[2501:3074, ])
predictions_zt <- as.data.frame(predict(model_zt_all, newdata = test_zt))
rounded_predictions_zt_all <- round(predictions_zt)
rownames(rounded_predictions_zt_all) <- rownames(rnase.zt[2501:3074, ])
print(summary(model_zt_all))
#print(rounded_predictions_zt_all)
shift.amount = data.frame(shift_mms_global)
correlation.mms <-as.data.frame( sapply(1:nrow(ctrl.mms), function(i) cor(ctrl.mms[i, ], rnase.mms[i, ])))
rownames(correlation.mms) <- rownames(rnase.mms)
train_mms_2 <- data.frame(Korrelation_2 = correlation.mms[1:2500, ], Shift_2 = shift.amount[1:2500, ])
model_mms_all_2 <- lm(Shift_2 ~ Korrelation_2, data = train_mms_2)
test_mms_2 <- data.frame(Korrelation_2 = correlation.mms[2501:3074, ])
predictions_mms_2 <- as.data.frame(predict(model_mms_all_2, newdata = test_mms_2))
predictions_mms_rdeep <- matrix(0, nrow = nrow(predictions_mms_2), ncol = ncol(predictions_mms_2))
for(i in 1:nrow(predictions_mms_2)) {
for(j in 1:ncol(predictions_mms_2)){
if(predictions_mms_2[i,j] > 2) {
predictions_mms_rdeep[i,j] <- 1
}  else if(predictions_mms_2[i,j] < (-2)) {
predictions_mms_rdeep[i,j] <- (-1)
} else {predictions_mms_rdeep[i,j] <- 0
}
}
}
rownames(predictions_mms_rdeep) <- rownames(rnase.mms[2501:3074, ])
# print(summary(model_mms_all_2))
# View(predictions_mms_rdeep)
x <- train_mms_2$Korrelation_2
y <- train_mms_2$Shift_2
plot(x, y, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(x), max(x)), ylim = c(min(y), max(y)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_mms_all_2, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
abline(h = - 2.5, col = "green4", lwd = 2)
test_x <- test_mms_2$Korrelation_2
predicted_y <- predict(model_mms_all_2, newdata = test_mms_2)
points(test_x, predicted_y, col = "lightblue", pch = 16, cex = 0.9)
legend("topleft", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
shift.amount.plot = abs(data.frame(shift_mms_global))
train_mms_plot <- data.frame(Korrelation_plot = correlation.mvm[1:2500, ], Shift_plot = shift.amount.plot[1:2500, ])
model_mms_all_plot <- lm(Shift_plot ~ Korrelation_plot, data = train_mms_plot)
test_mms_plot <- data.frame(Korrelation_plot = correlation.mms[2501:3074, ])
predictions_mms_plot <- as.data.frame(predict(model_mms_all_plot, newdata = test_mms_plot))
rownames(predictions_mms_plot) <- rownames(rnase.mms[2501:3074, ])
px <- train_mms_plot$Korrelation_plot
py <- train_mms_plot$Shift_plot
plot(px, py, main = "Regression Analysis", xlab = "Correlation - Ctrl and RNase", ylab = "Shift in Fraction", xlim = c(min(px), max(px)), ylim = c(min(py), max(py)), pch = 16, cex = 0.9, cex.main = 0.97, cex.lab = 0.9, col = "darkgrey")
abline(model_mms_all_plot, col = "red", lwd = 2)
abline(h = 2.5, col = "green4", lwd = 2)
test_px <- test_mms_plot$Korrelation_plot
predicted_py <- predict(model_mms_all_plot, newdata = test_mms_plot)
points(test_px, predicted_py, col = "lightblue", pch = 16, cex = 0.9)
legend("topright", legend = c("Trained Data", "Predicted Data", "Regression Curve", "Threshold"),col = c("darkgrey", "lightblue", "red", "green4"), pch = c(16, 16, NA, NA), lty = c(NA, NA, 1, 1), cex = 0.8)
train_mms <- data.frame(Korrelation = correlation.mms[1:2500, ], Shift = shift_mms[1:2500, ])
model_mms_all <- lm(Shift ~ Korrelation, data = train_mms)
test_mms <- data.frame(Korrelation = correlation.mms[2501:3074, ])
predictions_mms <- as.data.frame(predict(model_mms_all, newdata = test_mms))
rounded_predictions_mms_all <- round(predictions_mms)
rownames(rounded_predictions_mms_all) <- rownames(rnase.mms[2501:3074, ])
print(summary(model_mms_all))
#print(rounded_predictions_mms_all)
predictions_mms_rdeep_shift <- matrix(0, nrow = nrow(predictions_mms_plot), ncol = ncol(predictions_mms_plot))
for(i in 1:nrow(predictions_mms_plot)) {
for(j in 1:ncol(predictions_mms_plot)){
if(predictions_mms_plot[i,j] > 2) {
predictions_mms_rdeep_shift[i,j] <- 1
} else if (predictions_mms_plot[i,j] < 2) {
predictions_mms_rdeep_shift[i,j] <- 0
}
}
}
rownames(predictions_mms_rdeep_shift) <- rownames(rnase.mms[2501:3074, ])
# predictions_mms_rdeep_shift
predictions_zt_rdeep_shift <- matrix(0, nrow = nrow(predictions_zt_plot), ncol = ncol(predictions_zt_plot))
for(i in 1:nrow(predictions_zt_plot)) {
for(j in 1:ncol(predictions_zt_plot)){
if(predictions_zt_plot[i,j] > 2) {
predictions_zt_rdeep_shift[i,j] <- 1
} else if (predictions_zt_plot[i,j] < 2) {
predictions_zt_rdeep_shift[i,j] <- 0
}
}
}
rownames(predictions_zt_rdeep_shift) <- rownames(rnase.zt[2501:3074, ])
predictions_zt_rdeep_shift
predictions_mvm_rdeep_shift <- matrix(0, nrow = nrow(predictions_mvm_plot), ncol = ncol(predictions_mvm_plot))
for(i in 1:nrow(predictions_mvm_plot)) {
for(j in 1:ncol(predictions_mvm_plot)){
if(predictions_mvm_plot[i,j] > 2) {
predictions_mvm_rdeep_shift[i,j] <- 1
} else if (predictions_mvm_plot[i,j] < 2) {
predictions_mvm_rdeep_shift[i,j] <- 0
}
}
}
rownames(predictions_mvm_rdeep_shift) <- rownames(rnase.mvm[2501:3074, ])
names.rdp.mvm.regression <- rownames(predictions_mvm_rdeep_shift)[which(predictions_mvm_rdeep_shift == 1)]
names.rdp.zt.regression <- rownames(predictions_zt_rdeep_shift)[which(predictions_zt_rdeep_shift == 1)]
names.rdp.mms.regression <- rownames(predictions_mms_rdeep_shift)[which(predictions_mms_rdeep_shift == 1)]
names.rdp.regression <- list(names.rdp.mvm.regression, names.rdp.zt.regression, names.rdp.mms.regression)
number.observed.RBPs.regression <- c(length(names.rdp.mvm.regression), length(names.rdp.zt.regression), length(names.rdp.mms.regression))
names.nrdp.mvm.regression <- rownames(predictions_mvm_rdeep_shift)[which(predictions_mvm_rdeep_shift == 0)]
names.nrdp.zt.regression <- rownames(predictions_zt_rdeep_shift)[which(predictions_zt_rdeep_shift == 0)]
names.nrdp.mms.regression <- rownames(predictions_mms_rdeep_shift)[which(predictions_mms_rdeep_shift == 0)]
names.nrdp.regression <- list(names.nrdp.mvm.regression, names.nrdp.zt.regression, names.nrdp.mms.regression)
number.observed.nonRBPs.regression <- c(length(names.nrdp.mvm.regression), length(names.nrdp.zt.regression), length(names.nrdp.mms.regression))
#Number of correctly assigned (true positives) RBPs with parameters
true.positives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.regression[[z]]) {
if (i %in% rownames(rdeep)) {
counter <- counter + 1
}
}
true.positives.regression.shift[z] <- counter
}
# true.positives.regression.shift
# Number of wrongly assigned (false positives) RBPs with parameters
false.positives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.rdp.regression[[z]]) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
false.positives.regression.shift[z] <- counter
}
false.positives.regression.shift
number.observed.nonRBPs.regression
# Number of correctly assigned non-RBPs (true negatives) with parameters
true.negatives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.regression[[z]]) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
true.negatives.regression.shift[z] <- counter
}
true.negatives.regression.shift
# Number of wrongly assigned non-RBPs (true negatives) with parameters
false.negatives.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(z in 1:3){
counter <- 0
for (i in names.nrdp.regression[[z]]) {
if (i %in% rownames(rdeep)) {
counter <- counter + 1
}
}
false.negatives.regression.shift[z] <- counter
}
# false.negatives.regression.shift
fnr.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fnr.regression.shift[x] <- false.negatives.regression.shift[x]/(false.negatives.regression.shift[x] + true.positives.regression.shift[x])
}
fnr.regression.shift
fpr.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
fpr.regression.shift[x] <- false.positives.regression.shift[x]/(false.positives.regression.shift[x]+true.negatives.regression.shift[x])
}
fpr.regression.shift
precision.regression.shift <- data.frame(mvm = c(0), zt = c(0), mms = c(0))
for(x in 1:3){
precision.regression.shift[x] <- true.positives.regression.shift[x]/(true.positives.regression.shift[x] + false.positives.regression.shift[x])
}
precision.regression.shift
#for the results of our parameters
summary.numbers.regression <- rbind(true.positives.regression.shift, false.positives.regression.shift, true.negatives.regression.shift, false.negatives.regression.shift)
rownames(summary.numbers.regression) = c("True Positives","False Positives", "True Negatives", "False Negatives")
summary.rates.regression.shift <- rbind(fnr.regression.shift , fpr.regression.shift, precision.regression.shift)
rownames(summary.rates.regression.shift) = c("FNR", "FPR", "Precision")
View(summary.numbers.regression)
View(summary.rates.regression.shift)
#for the results of our parameters
summary.numbers.regression <- rbind(true.positives.regression.shift, false.positives.regression.shift, true.negatives.regression.shift, false.negatives.regression.shift)
rownames(summary.numbers.regression) = c("True Positives","False Positives", "True Negatives", "False Negatives")
summary.rates.regression.shift <- rbind(fnr.regression.shift , fpr.regression.shift, precision.regression.shift)
rownames(summary.rates.regression.shift) = c("FNR", "FPR", "Precision")
summary.numbers.regression
summary.rates.regression.shift
summary.numbers.regression
summary.rates.regression.shift
save.image("C:/Users/tinel/OneDrive/Dokumente/RUPRECHT-KARLS-UNIVERSITÄT HEIDELBERG/MOBI/HOCHSCHULSEMESTER4/DATAANALYSIS/Workspace with regression.RData")
as.tabel(summary.numbers.regression)
tabel(summary.numbers.regression)
as,tabel(summary.numbers.regression)
as.tabel(summary.numbers.regression)
as.table(summary.numbers.regression)
as.table(summary.numbers.regression)
as.table(summary.numbers.regression,)
as.table.default(summary.numbers.regression)
class(summary.numbers.regression)
summary.rates.regression.shift
kable(summary.numbers.regression)
install.packages("knitr")
install.packages("gt")
gt(summary.numbers.regression) %>% tab_header(title = "Table x: Identified and True RDeep for last third of the dataset by linear regression.")
gt(summary.numbers.regression) %>%
tab_header(
title = "Table x: Identified and True RDeep for last third of the dataset by linear regression.")
install.packages("magrittr")
gt(summary.numbers.regression) %>%
tab_header(
title = "Table x: Identified and True RDeep for last third of the dataset by linear regression.")
install.packages("magrittr", dependencies = TRUE)
gt(summary.numbers.regression) %>%
tab_header(
title = "Table x: Identified and True RDeep for last third of the dataset by linear regression.")
install.packages("magrittr", dependencies = TRUE)
gt(summary.numbers.regression) %>%
tab_header(
title = "Table x: Identified and True RDeep for last third of the dataset by linear regression.")
knitr::opts_chunk$set(echo = FALSE, results='hide')
knitr::kable(summary.numbers.regression)
knitr::kable(summary.rates.regression.shift)
library("kableExtra")
summary.numbers.parameters0 <- kable(summary.numbers.parameters)
table.summary.numbers.parameters <- kable_styling(summary.numbers.parameters0, "striped", full_width = FALSE)
summary.rates.parameters.rounded <- round(summary.rates.parameters,4)
summary.rates.parameters0 <- kable(summary.rates.parameters.rounded)
table.summary.rates.parameters <- kable_styling(summary.rates.parameters0, "striped", full_width = FALSE)
cat("<div class='row'>\n")
cat("<div class='column'>\n")
print(table.summary.numbers.parameters, row.names = FALSE)
cat("</div>\n")
cat("<div class='column'>\n")
print(table.summary.rates.parameters, row.names = FALSE)
cat("</div>\n")
cat("</div>\n")
library("kableExtra")
summary.numbers.regression0 <- kable(summary.numbers.regression)
table.summary.numbers.regression <- kable_styling(summary.numbers.regression0, "striped", full_width = FALSE)
summary.rates.regression.shift0 <- kable(summary.rates.regression.shift)
table.summary.rates.regression.shift <- kable_styling(summary.rates.regression.shift0, "striped", full_width = FALSE)
cat("<div class='row'>\n")
cat("<div class='column'>\n")
print(table.summary.numbers.regression, row.names = FALSE)
cat("</div>\n")
cat("<div class='column'>\n")
print(table.summary.rates.regression.shift, row.names = FALSE)
cat("</div>\n")
cat("</div>\n")
knitr::opts_chunk$set(echo = FALSE, results='hide')
library("kableExtra")
summary.numbers.regression0 <- kable(summary.numbers.regression)
table.summary.numbers.regression <- kable_styling(summary.numbers.regression0, "striped", full_width = FALSE)
summary.rates.regression.shift0 <- kable(summary.rates.regression.shift)
table.summary.rates.regression.shift <- kable_styling(summary.rates.regression.shift0, "striped", full_width = FALSE)
cat("<div class='row'>\n")
cat("<div class='column'>\n")
print(table.summary.numbers.regression, row.names = FALSE)
cat("</div>\n")
cat("<div class='column'>\n")
print(table.summary.rates.regression.shift, row.names = FALSE)
cat("</div>\n")
cat("</div>\n")
