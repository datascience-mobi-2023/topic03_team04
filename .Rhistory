<<<<<<< HEAD
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% decreasingvalues[[i]]]}
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% increasingvalues[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary25.rnase[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary1.rnase[[i]]]}
find_consecutive_numbers <- function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 3)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion] + 1
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
}
shoulderregion <- lapply(largevalues_without_maxima, find_consecutive_numbers)
View(shoulderregion)
View(largevalues_without_maxima)
View(rnase.with.proteinnumbers)
#knitr::opts_chunk$set(echo = TRUE)
#Das ganze könnte noch enorm fehlerhaft sein! Beschreibung folgt, wenn code tatsächlich funktioniert
#decreasingvalues <- apply(rnase.zt, 1, function(i) {
#decrease_indices <- which(sapply(1:(length(i)-2), function(j) all(diff(i[j:(j+2)]) #> 0)))
#unique(c(decrease_indices - 1 , decrease_indices, decrease_indices + 1))
#})
#increasingvalues <- apply(rnase.zt, 1, function(i) {
# increase_indices <- which(sapply(1:(length(i)-2), function(j) all(diff(i[j:(j+2)]) > 0)))
# unique(c(increase_indices - 1 , increase_indices, increase_indices + 1))
#})
#nonconsecutiveindices <- list()
#for (i in 1:nrow(rnase.zt)) {
# row <- rnase.zt[i,]
#indices <- c()
# for (j in 1:(ncol(rnase.zt)-1)) {
#  values <- as.numeric(row[j:(j+1)])
# if (!(all(diff(values) > 0) || all(diff(values) < 0))) {
# indices <- c(indices, j)
# }
#}
#nonconsecutiveindices[[i]] <- indices
#}
#View(nonconsecutiveindices)
#close_values <- list()
#for (i in 1:nrow(rnase.zt)) {
#row <- rnase.zt[i,]
#indices <- c()
#for (j in 1:(ncol(rnase.zt)-2)) {
# values <- as.numeric(row[j:(j+2)])
# if (max(values[1], values[3]) != 0 && abs(values[1] - values[3]) / max(values[1], values[3]) < 0.1) {
# indices <- c(indices, j:(j+2))
# }
#}
#if (length(indices) == 0) {
#  close_values[[i]] <- numeric(0) # Verwende einen leeren Vektor statt NULL
#} else {
#   close_values[[i]] <- indices
# }
#}
close_values <- list()
for (i in 1:nrow(rnase.zt)) {
row <- rnase.zt[i,]
indices <- c()
for (j in 1:(ncol(rnase.zt)-2)) {
values <- as.numeric(row[j:(j+2)])
if (sd(values) < 0.8) {
indices <- c(indices, j:(j+2))
}
}
if (length(indices) == 0) {
close_values[[i]] <- numeric(0)
} else {
close_values[[i]] <- indices
}
}
View(close_values)
largevalues_without_maxima <- largevalues
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% maxpeaks[[i]]]}
largevalues_without_maxima <- largevalues
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% neighbors.peaks[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {
largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][largevalues_without_maxima[[i]] %in%  close_values[[i]]]
}
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% decreasingvalues[[i]]]}
#for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% increasingvalues[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary25.rnase[[i]]]}
for (i in seq_along(largevalues_without_maxima)) {largevalues_without_maxima[[i]] <- largevalues_without_maxima[[i]][!largevalues_without_maxima[[i]] %in% boundary1.rnase[[i]]]}
find_consecutive_numbers <- function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 3)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion] + 1
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
}
shoulderregion <- lapply(largevalues_without_maxima, find_consecutive_numbers)
View(shoulderregion)
View(largevalues_without_maxima)
View(rnase.with.proteinnumbers)
knitr::opts_chunk$set(echo = TRUE)
num_rows <- nrow(rnase.mvm)
# mvm
saveRDS(globalpeak.ctrl.mvm, file = "Non_synchronized_A549_globalpeak.ctrl.mvm")
ctrl.mvm <- readRDS("Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("Non_synchronized_A549_rnase.mms")
# mvm
saveRDS(globalpeak.ctrl.mvm, file = "Non_synchronized_A549_globalpeak.ctrl.mvm")
ctrl.mvm <- readRDS("Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("Non_synchronized_A549_rnase.mms")
ctrl.mvm <- readRDS("Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("Non_synchronized_A549_rnase.mms")
#mvm
globalpeak.ctrl.mvm <- readRDS("Non_synchronized_A549_globalpeak.ctrl.mvm")
globalpeak.value.ctrl.mvm <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.mvm")
globalpeak.rnase.mvm <- readRDS("Non_synchronized_A549_globalpeak.rnase.mvm")
globalpeak.value.rnase.mvm <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.mvm")
localpeaks.ctrl.mvm <- readRDS("Non_synchronized_A549_localpeaks.ctrl.mvm")
localpeaks.values.ctrl.mvm <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.mvm")
localpeaks.rnase.mvm <- readRDS("Non_synchronized_A549_localpeaks.rnase.mvm")
localpeaks.values.rnase.mvm <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.mvm")
fraction1.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mvm")
fraction25.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mvm")
fraction1.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mvm")
fraction25.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mvm")
precipitated.mvm <- readRDS("Non_synchronized_A549_precipitated.mvm")
#zt
globalpeak.ctrl.zt <- readRDS("Non_synchronized_A549_globalpeak.ctrl.zt")
globalpeak.value.ctrl.zt <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.zt")
globalpeak.rnase.zt <- readRDS("Non_synchronized_A549_globalpeak.rnase.zt")
globalpeak.value.rnase.zt <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.zt")
localpeaks.ctrl.zt <- readRDS("Non_synchronized_A549_localpeaks.ctrl.zt")
localpeaks.values.ctrl.zt <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.zt")
localpeaks.rnase.zt <- readRDS("Non_synchronized_A549_localpeaks.rnase.zt")
localpeaks.values.rnase.zt <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.zt")
fraction1.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.zt")
fraction1.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.zt")
precipitated.zt <- readRDS("Non_synchronized_A549_precipitated.zt")
knitr::opts_chunk$set(echo = TRUE)
find_consecutive_numbers <- function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 2)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion]
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
}
shoulderregion <- lapply(ordered.largevalues.closereg.rnase.zt, find_consecutive_numbers)
largevalues.closereg.rnase.zt <- largevalues.zt
largevalues.zt <- apply(shreg.rnase.zt[,2:24], 1, function(x) {
largevalues_indices <- which(x > 4.5) + 1 # to start again with 2
peak_mean <- sapply(largevalues_indices, function(i) mean(x[(i-1):(i+1)]))
largevalues_indices <- largevalues_indices[peak_mean > 4.5]
unique(c(largevalues_indices - 1 , largevalues_indices, largevalues_indices + 1))
})
shreg.rnase.zt <- rnase.zt
largevalues.zt <- apply(shreg.rnase.zt[,2:24], 1, function(x) {
largevalues_indices <- which(x > 4.5) + 1 # to start again with 2
peak_mean <- sapply(largevalues_indices, function(i) mean(x[(i-1):(i+1)]))
largevalues_indices <- largevalues_indices[peak_mean > 4.5]
unique(c(largevalues_indices - 1 , largevalues_indices, largevalues_indices + 1))
})
closereg.rnase.zt <- list()
for (i in 1:nrow(shreg.rnase.zt)) {
row <- shreg.rnase.zt[i,]
indices <- c()
for (j in 1:(ncol(shreg.rnase.zt)-2)) {
values <- as.numeric(row[j:(j+2)])
if (sd(values) < 0.8) {
indices <- c(indices, j:(j+2))}}
if (length(indices) == 0) {
closereg.rnase.zt[[i]] <- numeric(0)}
else {closereg.rnase.zt[[i]] <- indices}}
largevalues.closereg.rnase.zt <- largevalues.zt
for (i in seq_along(largevalues.closereg.rnase.zt)) {
largevalues.closereg.rnase.zt[[i]] <- largevalues.closereg.rnase.zt[[i]][largevalues.closereg.rnase.zt[[i]] %in% closereg.rnase.zt[[i]]]}
ordered.largevalues.closereg.rnase.zt <- lapply(largevalues.closereg.rnase.zt,function(row){sort(row)})
find_consecutive_numbers <- function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 2)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion]
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
=======
weight <- c(w.gshift, w.lshift, w.overlap, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
parameters.weighted <- parameters.scaled
View(parameters.weighted)
parameters.raw <- cbind(gshift, lshift, overlap, precipitated)
rownames(parameters.raw) <- rownames(ctrl.mms)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
weight <- c(w.gshift, w.lshift, w.overlap, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
parameters <- parameters.scaled
View(parameters)
wss <- sapply(1:5, function(x){
kmeans(parameters, centers = x, nstart = 100)$tot.withinss
})
library("ggplot2")
wss.df <- data.frame(values = wss)
ggplot(wss.df, aes(x = 1:length(wss), y = values))+
geom_line(col = "mediumvioletred")+
geom_point(col = "midnightblue")+
labs(x = "Number of clusters", y = "number of assigned proteins")+
theme(panel.border = element_rect(color="grey", fill = NA))
# n = Number of clusters
n <- 3
km.mms <- kmeans(parameters, centers = n, nstart = 100)
# n = Number of clusters
n <- 2
km.mms <- kmeans(parameters, centers = n, nstart = 100)
#Variablen der Normalisierungsmethode hier eintragen:
peak.ctrl <- peak.mms.ctrl
peak.rnase <- peak.mms.rnase
cluster <- km.mms$cluster
#abhängig davon ob es drei oder vier cluster gibt werden unterschiedliche Vektoren verwendet:
if (n == 3){
col <- c("springgreen", "violetred1", "cyan")
vjust <- c(1, -0.5, -0.5)
labels <- c("no shift", "left shift", "right shift")
}
if (n == 4){
col <- c("springgreen", "violetred1", "cyan", "orange")
vjust <- c(-0.5, -0.5, -0.5, -0.5)
labels <- c("left shift", "right shift", "no shift", "precipitated")
}
library("ggplot2")
#hier wird ein Datframe mit allen für den dotplot relevanten daten erstellt
peaks <- data.frame(peak.ctrl, peak.rnase, cluster)
#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = stat(count), y = ..count..),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
# n = Number of clusters
n <- 3
km.mms <- kmeans(parameters, centers = n, nstart = 100)
#Variablen der Normalisierungsmethode hier eintragen:
peak.ctrl <- peak.mms.ctrl
peak.rnase <- peak.mms.rnase
cluster <- km.mms$cluster
#abhängig davon ob es drei oder vier cluster gibt werden unterschiedliche Vektoren verwendet:
if (n == 3){
col <- c("springgreen", "violetred1", "cyan")
vjust <- c(1, -0.5, -0.5)
labels <- c("no shift", "left shift", "right shift")
>>>>>>> main
}
shoulderregion <- lapply(ordered.largevalues.closereg.rnase.zt, find_consecutive_numbers)
(shoulderregion)
View(largevalues_without_maxima)
View(rnase.with.proteinnumbers)
find_consecutive_numbers <- function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 2)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion]
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
<<<<<<< HEAD
return(shoulderregion)
}
shoulderregion <- lapply(ordered.largevalues.closereg.rnase.zt, find_consecutive_numbers)
View(shoulderregion)
View(rnase.with.proteinnumbers)
largevalues.rnase.zt <- apply(shreg.rnase.zt[,2:24], 1, function(x) {
largevalues_indices <- which(x > 4.5) + 1 # to start again with 2
peak_mean <- sapply(largevalues_indices, function(i) mean(x[(i-1):(i+1)]))
largevalues_indices <- largevalues_indices[peak_mean > 4.5]
unique(c(largevalues_indices - 1 , largevalues_indices, largevalues_indices + 1))
})
neighpeaks.rnase.zt <- apply(shreg.rnase.zt, 1,
function(x) { peak_indices <- which(diff(sign(diff(x))) == -2 & x[-c(1, length(x))] > 3) + 1
peak_sd <- sapply(peak_indices,function(i) sd(x[(i-1):(i+1)]))
peak_indices <- peak_indices[peak_sd > sd.mean.rnase.zt]
c(peak_indices - 1, peak_indices, peak_indices + 1)})
boundary1.rnase.zt <- lapply(1:nrow(shreg.rnase.zt), function(i) {
if (shreg.rnase.zt[i, 1] > shreg.rnase.zt[i, 2] & shreg.rnase.zt[i, 1] > shreg.rnase.zt[i, 3] & (shreg.rnase.zt[i, 1] + shreg.rnase.zt[i, 2] + shreg.rnase.zt[i, 3]) > 10) {
return(c(1,2,3))}
else {
return(numeric(0))}
})
boundary25.rnase.zt <-lapply(1:nrow(shreg.rnase.zt), function(i) {
if (shreg.rnase.zt[i, 25] > shreg.rnase.zt[i, 24] & shreg.rnase.zt[i, 25] > shreg.rnase.zt[i, 23] & (shreg.rnase.zt[i, 25] + shreg.rnase.zt[i, 24] + shreg.rnase.zt[i, 23]) > 10) {
return(c(25,24,23))}
else {
return(numeric(0))}
})
closereg.rnase.zt <- list()
for (i in 1:nrow(shreg.rnase.zt)) {
row <- shreg.rnase.zt[i,]
indices <- c()
for (j in 1:(ncol(shreg.rnase.zt)-2)) {
values <- as.numeric(row[j:(j+2)])
if (sd(values) < 0.8) {
indices <- c(indices, j:(j+2))}}
if (length(indices) == 0) {
closereg.rnase.zt[[i]] <- numeric(0)}
else {closereg.rnase.zt[[i]] <- indices}}
largevalues.closereg.rnase.zt <- largevalues.rnase.zt
for (i in seq_along(largevalues.closereg.rnase.zt)) {
largevalues.closereg.rnase.zt[[i]] <- largevalues.closereg.rnase.zt[[i]][largevalues.closereg.rnase.zt[[i]] %in% closereg.rnase.zt[[i]]]}
ordered.largevalues.closereg.rnase.zt <- lapply(largevalues.closereg.rnase.zt,function(row){sort(row)})
shreg.ctrl.zt <- ctrl.zt
largevalues.ctrl.zt <- apply(shreg.ctrl.zt[,2:24], 1, function(x) {
largevalues_indices <- which(x > 4.5) + 1 # to start again with 2
peak_mean <- sapply(largevalues_indices, function(i) mean(x[(i-1):(i+1)]))
largevalues_indices <- largevalues_indices[peak_mean > 4.5]
unique(c(largevalues_indices - 1 , largevalues_indices, largevalues_indices + 1))
})
boundary1.ctrl.zt <- lapply(1:nrow(shreg.ctrl.zt), function(i) {
if (shreg.ctrl.zt[i, 1] > shreg.ctrl.zt[i, 2] & shreg.ctrl.zt[i, 1] > shreg.ctrl.zt[i, 3] & (shreg.ctrl.zt[i, 1] + shreg.ctrl.zt[i, 2] + shreg.ctrl.zt[i, 3]) > 10) {
return(c(1,2,3))}
else {
return(numeric(0))}
})
boundary25.ctrl.zt <-lapply(1:nrow(shreg.ctrl.zt), function(i) {
if (shreg.ctrl.zt[i, 25] > shreg.ctrl.zt[i, 24] & shreg.ctrl.zt[i, 25] > shreg.ctrl.zt[i, 23] & (shreg.ctrl.zt[i, 25] + shreg.ctrl.zt[i, 24] + shreg.ctrl.zt[i, 23]) > 10) {
return(c(25,24,23))}
else {
return(numeric(0))}
})
closereg.ctrl.zt <- list()
for (i in 1:nrow(shreg.ctrl.zt)) {
row <- shreg.ctrl.zt[i,]
indices <- c()
for (j in 1:(ncol(shreg.ctrl.zt)-2)) {
values <- as.numeric(row[j:(j+2)])
if (sd(values) < 0.8) {
indices <- c(indices, j:(j+2))}}
if (length(indices) == 0) {
closereg.ctrl.zt[[i]] <- numeric(0)}
else {closereg.ctrl.zt[[i]] <- indices}}
largevalues.closereg.ctrl.zt <- largevalues.ctrl.zt
for (i in seq_along(largevalues.closereg.ctrl.zt)) {
largevalues.closereg.ctrl.zt[[i]] <- largevalues.closereg.ctrl.zt[[i]][largevalues.closereg.ctrl.zt[[i]] %in% closereg.ctrl.zt[[i]]]}
ordered.largevalues.closereg.ctrl.zt <- lapply(largevalues.closereg.ctrl.zt,function(row){sort(row)})
shoulderregion <- lapply(ordered.largevalues.closereg.rnase.zt,function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 2)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion]
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
})
View(shoulderregion)
shoulderregion.rnase.zt <- lapply(ordered.largevalues.closereg.rnase.zt,function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 2)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion]
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
})
shoulderregion.ctrl.zt <- lapply(ordered.largevalues.closereg.ctrl.zt,function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 2)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion]
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
})
View(shoulderregion.ctrl.zt)
View(rnase.with.proteinnumbers)
plots_ctrl_rnase.zt[[27]]
library(ggplot2)
num_rows <- nrow(rnase.zt)
plots_rnase.zt <- list()
for (i in 1:num_rows) {
row_data_rnase <- rnase.zt[i, ]
if (sum(!is.na(row_data_rnase)) >= 2) {
df <- data.frame(x = 1:length(row_data_rnase), yrnase = as.numeric(row_data_rnase))
p <- ggplot(df, aes(x = x, y = yrnase)) +
geom_line(color = "tomato") +
geom_point(color = "tomato") +
xlab("Fractions") +
ylab("Protein amount") +
labs(title = "RNase zT")
plots_rnase.zt[[i]] <- p
} else {
plots_rnase.zt[[i]] <- NULL
}
}
library(ggplot2)
num_rows <- nrow(ctrl.zt)
plots_ctrl.zt <- list()
for (i in 1:num_rows) {
row_data_ctrl <- ctrl.zt[i, ]
if (sum(!is.na(row_data_ctrl)) >= 2) {
df <- data.frame(x = 1:length(row_data_ctrl), yctrl = as.numeric(row_data_ctrl))
p <- ggplot(df, aes(x = x, y = yctrl)) +
geom_line(color = "skyblue2") +
geom_point(color = "skyblue2") +
xlab("Fractions") +
ylab("Protein amount") +
labs(title = "Control zT")
plots_ctrl.zt[[i]] <- p
} else {
plots_ctrl.zt[[i]] <- NULL
}
}
library(ggplot2)
num_rows <- nrow(ctrl.zt)
names.as.colum <- ctrl.zt
protein.names <- rownames(names.as.colum)
plots_ctrl_rnase.zt <- list()
for (i in 1:num_rows) {
row_data_ctrl <- ctrl.zt[i, ]
row_data_rnase <- rnase.zt[i, ]
if (sum(!is.na(row_data_ctrl)) >= 2) {
df <- data.frame(x = 1:length(row_data_ctrl),yctrl= as.numeric(row_data_ctrl),yrnase= as.numeric(row_data_rnase))
p <- ggplot(df, aes(x = x))+
geom_line(aes(y=yrnase,color="RNASE"))+
geom_point(aes(y=yrnase,color="RNASE"))+
geom_line(aes(y=yctrl, color="CTRL"))+
geom_point(aes(y=yctrl, color="CTRL"))+
xlab("Fractions") +
ylab("Protein amount") +
labs(title = paste("z Transformation -",protein.names[i])) +
scale_color_manual(values = c("RNASE" = "tomato", "CTRL" = "skyblue2"))
plots_ctrl_rnase.zt[[i]] <- p
} else {
plots_ctrl_rnase.zt[[i]] <- NULL
}
}
plots_ctrl_rnase.zt[[27]]
plots_ctrl_rnase.zt[[23]]
shoulderregion.zt <-  lapply(seq_along(shoulderregion.ctrl.zt), function(i) setdiff(shoulderregion.ctrl.zt[[i]], shoulderregion.rnase.zt[[i]]))
shoulderregion.zt <-  lapply(seq_along(shoulderregion.ctrl.zt), function(i) setdiff(shoulderregion.ctrl.zt[[i]], shoulderregion.rnase.zt[[i]]))
View(shoulderregion.zt)
closereg.rnase.zt <- list()
for (i in 1:nrow(shreg.rnase.zt)) {
row <- shreg.rnase.zt[i,]
indices <- c()
for (j in 1:(ncol(shreg.rnase.zt)-2)) {
values <- as.numeric(row[j:(j+2)])
if (sd(values) < sd.mean.rnase.zt) {
indices <- c(indices, j:(j+2))}}
if (length(indices) == 0) {
closereg.rnase.zt[[i]] <- numeric(0)}
else {closereg.rnase.zt[[i]] <- indices}}
#zt
sd.mean.ctrl.zt <- readRDS("Non_synchronized_A549_sd.mean.ctrl.zt ")
sd.mean.rnase.zt <- readRDS("Non_synchronized_A549_sd.mean.rnase.zt ")
globalpeak.ctrl.zt <- readRDS("Non_synchronized_A549_globalpeak.ctrl.zt")
globalpeak.value.ctrl.zt <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.zt")
globalpeak.rnase.zt <- readRDS("Non_synchronized_A549_globalpeak.rnase.zt")
globalpeak.value.rnase.zt <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.zt")
localpeaks.ctrl.zt <- readRDS("Non_synchronized_A549_localpeaks.ctrl.zt")
localpeaks.values.ctrl.zt <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.zt")
localpeaks.rnase.zt <- readRDS("Non_synchronized_A549_localpeaks.rnase.zt")
localpeaks.values.rnase.zt <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.zt")
fraction1.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.zt")
fraction1.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.zt")
precipitated.zt <- readRDS("Non_synchronized_A549_precipitated.zt")
closereg.rnase.zt <- list()
for (i in 1:nrow(shreg.rnase.zt)) {
row <- shreg.rnase.zt[i,]
indices <- c()
for (j in 1:(ncol(shreg.rnase.zt)-2)) {
values <- as.numeric(row[j:(j+2)])
if (sd(values) < sd.mean.rnase.zt) {
indices <- c(indices, j:(j+2))}}
if (length(indices) == 0) {
closereg.rnase.zt[[i]] <- numeric(0)}
else {closereg.rnase.zt[[i]] <- indices}}
largevalues.closereg.rnase.zt <- largevalues.rnase.zt
for (i in seq_along(largevalues.closereg.rnase.zt)) {
largevalues.closereg.rnase.zt[[i]] <- largevalues.closereg.rnase.zt[[i]][largevalues.closereg.rnase.zt[[i]] %in% closereg.rnase.zt[[i]]]}
ordered.largevalues.closereg.rnase.zt <- lapply(largevalues.closereg.rnase.zt,function(row){sort(row)})
shoulderregion.rnase.zt <- lapply(ordered.largevalues.closereg.rnase.zt,function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 2)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion]
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
})
shreg.ctrl.zt <- ctrl.zt
largevalues.ctrl.zt <- apply(shreg.ctrl.zt[,2:24], 1, function(x) {
largevalues_indices <- which(x > 4.5) + 1 # to start again with 2
peak_mean <- sapply(largevalues_indices, function(i) mean(x[(i-1):(i+1)]))
largevalues_indices <- largevalues_indices[peak_mean > 4.5]
unique(c(largevalues_indices - 1 , largevalues_indices, largevalues_indices + 1))
})
closereg.ctrl.zt <- list()
for (i in 1:nrow(shreg.ctrl.zt)) {
row <- shreg.ctrl.zt[i,]
indices <- c()
for (j in 1:(ncol(shreg.ctrl.zt)-2)) {
values <- as.numeric(row[j:(j+2)])
if (sd(values) < sd.mean.ctrl.zt) {
indices <- c(indices, j:(j+2))}}
if (length(indices) == 0) {
closereg.ctrl.zt[[i]] <- numeric(0)}
else {closereg.ctrl.zt[[i]] <- indices}}
largevalues.closereg.ctrl.zt <- largevalues.ctrl.zt
for (i in seq_along(largevalues.closereg.ctrl.zt)) {
largevalues.closereg.ctrl.zt[[i]] <- largevalues.closereg.ctrl.zt[[i]][largevalues.closereg.ctrl.zt[[i]] %in% closereg.ctrl.zt[[i]]]}
ordered.largevalues.closereg.ctrl.zt <- lapply(largevalues.closereg.ctrl.zt,function(row){sort(row)})
shoulderregion.ctrl.zt <- lapply(ordered.largevalues.closereg.ctrl.zt,function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 2)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion]
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
})
View(shoulderregion.ctrl.zt)
shoulderregion.ctrl.zt <- lapply(ordered.largevalues.closereg.ctrl.zt,function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 2)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion]
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
})
View(shoulderregion.rnase.zt)
shoulderregion.zt <-  lapply(seq_along(shoulderregion.ctrl.zt), function(i) setdiff(shoulderregion.ctrl.zt[[i]], shoulderregion.rnase.zt[[i]]))
View(shoulderregion.zt)
unique_entries <- lapply(names(shoulderregion.ctrl.zt), function(name) setdiff(shoulderregion.ctrl.zt[[name]], shoulderregion.rnase.zt[[name]]))
names(unique_entries) <- names(shoulderregion.ctrl.zt)
View(unique_entries)
shoulderregion.zt <- lapply(names(shoulderregion.ctrl.zt), function(name) setdiff(shoulderregion.ctrl.zt[[name]], shoulderregion.rnase.zt[[name]]))
names(unique_entries) <- names(shoulderregion.ctrl.zt)
View(shoulderregion.zt)
names(shoulderregion.ctrl.zt)
shoulderregion.zt <- lapply(names(shoulderregion.ctrl.zt), function(x) setdiff(shoulderregion.ctrl.zt[[x]], shoulderregion.rnase.zt[[x]]))
names(unique_entries) <- names(shoulderregion.ctrl.zt)
View(shoulderregion.zt)
shoulderregion.zt <- lapply(names(shoulderregion.ctrl.zt), function(x) setdiff(shoulderregion.ctrl.zt[[x]], shoulderregion.rnase.zt[[x]]))
names(shoulderregion.zt) <- names(shoulderregion.ctrl.zt)
View(shoulderregion.zt)
=======
library("ggplot2")
#hier wird ein Datframe mit allen für den dotplot relevanten daten erstellt
peaks <- data.frame(peak.ctrl, peak.rnase, cluster)
#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = stat(count), y = ..count..),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
gshift <- gshift.mms
lshift <- lshift.mms
overlap <- overlap.mms
precipitated <- precipitated.mms
w.gshift <- 1
w.lshift <- 0
w.overlap <- 0
w.precipitated <- 0
parameters.raw <- cbind(gshift, lshift, overlap, precipitated)
rownames(parameters.raw) <- rownames(ctrl.mms)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
weight <- c(w.gshift, w.lshift, w.overlap, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
parameters <- parameters.scaled
View(parameters)
wss <- sapply(1:5, function(x){
kmeans(parameters, centers = x, nstart = 100)$tot.withinss
})
library("ggplot2")
wss.df <- data.frame(values = wss)
ggplot(wss.df, aes(x = 1:length(wss), y = values))+
geom_line(col = "mediumvioletred")+
geom_point(col = "midnightblue")+
labs(x = "Number of clusters", y = "number of assigned proteins")+
theme(panel.border = element_rect(color="grey", fill = NA))
# n = Number of clusters
n <- 3
km.mms <- kmeans(parameters, centers = n, nstart = 100)
#Variablen der Normalisierungsmethode hier eintragen:
peak.ctrl <- peak.mms.ctrl
peak.rnase <- peak.mms.rnase
cluster <- km.mms$cluster
#abhängig davon ob es drei oder vier cluster gibt werden unterschiedliche Vektoren verwendet:
if (n == 3){
col <- c("springgreen", "violetred1", "cyan")
vjust <- c(1, -0.5, -0.5)
labels <- c("no shift", "left shift", "right shift")
}
if (n == 4){
col <- c("springgreen", "violetred1", "cyan", "orange")
vjust <- c(-0.5, -0.5, -0.5, -0.5)
labels <- c("left shift", "right shift", "no shift", "precipitated")
}
library("ggplot2")
#hier wird ein Datframe mit allen für den dotplot relevanten daten erstellt
peaks <- data.frame(peak.ctrl, peak.rnase, cluster)
#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = stat(count), y = ..count..),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
knitr::opts_chunk$set(echo = TRUE)
# mms
saveRDS(globalpeak.ctrl.mms, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.ctrl.mms")
globalpeak.ctrl.mms <- apply(ctrl.mms, 1, function(x){which.max(x)})
globalpeak.value.ctrl.mms <- apply(ctrl.mms, 1, function(x){max(x)})
globalpeak.rnase.mms <- apply(rnase.mms, 1, function(x){which.max(x)})
globalpeak.value.rnase.mms <- apply(rnase.mms, 1, function(x){max(x)})
peakidentif.ctrl.mms <- ctrl.mms
peakidentif.rnase.mms <- rnase.mms
sd.byrow.ctrl.mms <- apply(peakidentif.ctrl.mms, 1, function(x) sd(x[x < 8]))
sd.mean.ctrl.mms <- mean(sd.byrow.ctrl.mms)
sd.byrow.rnase.mms <- apply(peakidentif.rnase.mms, 1, function(x) sd(x[x < 8]))
sd.mean.rnase.mms <- mean(sd.byrow.rnase.mms)
colnames(peakidentif.ctrl.mms) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.ctrl.mms)) - 1)
allpeaks.ctrl.mms <- apply(peakidentif.ctrl.mms, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.ctrl.mms]})
peak.values.ctrl.mms <- lapply(seq_along(allpeaks.ctrl.mms), function(i) peakidentif.ctrl.mms[i, allpeaks.ctrl.mms[[i]]])
localpeaks.ctrl.mms <- allpeaks.ctrl.mms
for (i in seq_along(localpeaks.ctrl.mms)) {localpeaks.ctrl.mms[[i]] <- localpeaks.ctrl.mms[[i]][!localpeaks.ctrl.mms[[i]] %in% globalpeak.ctrl.mms[[i]]]}
localpeaks.values.ctrl.mms <- lapply(seq_along(localpeaks.ctrl.mms), function(i) peakidentif.ctrl.mms[i, localpeaks.ctrl.mms[[i]]])
colnames(peakidentif.rnase.mms) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.rnase.mms)) - 1)
allpeaks.rnase.mms <- apply(peakidentif.rnase.mms, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.rnase.mms]})
peak.values.rnase.mms <- lapply(seq_along(allpeaks.rnase.mms), function(i) peakidentif.rnase.mms[i, allpeaks.rnase.mms[[i]]])
localpeaks.rnase.mms <- allpeaks.rnase.mms
for (i in seq_along(localpeaks.rnase.mms)) {localpeaks.rnase.mms[[i]] <- localpeaks.rnase.mms[[i]][!localpeaks.rnase.mms[[i]] %in% globalpeak.rnase.mms[[i]]]}
localpeaks.values.rnase.mms <- lapply(seq_along(localpeaks.rnase.mms), function(i) peakidentif.rnase.mms[i, localpeaks.rnase.mms[[i]]])
fraction1.peak.ctrl.mms <- which(peakidentif.ctrl.mms[, 1] > peakidentif.ctrl.mms[, 2] & peakidentif.ctrl.mms[, 1] > peakidentif.ctrl.mms[, 3])
# length(fraction1.peak.ctrl.mms)
fraction25.peak.ctrl.mms <- which(peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 24] & peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 23] & peakidentif.ctrl.mms[, 25] + peakidentif.ctrl.mms[, 24] +peakidentif.ctrl.mms[, 23] > 10) # wenn der peak am Ende nicht insgesamt 10 überschreitet, ist es relativ unrelevant. Scheinbar fallen viele Proteine am Ende etwas aus.
# length(fraction25.peak.ctrl.mms)
fraction1.peak.rnase.mms <- which(peakidentif.rnase.mms[, 1] > peakidentif.rnase.mms[, 2] & peakidentif.rnase.mms[, 1] > peakidentif.rnase.mms[, 3])
# length(fraction1.peak.rnase.mms)
fraction25.peak.rnase.mms <- which(peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 24] & peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 23] & peakidentif.rnase.mms[, 25] + peakidentif.rnase.mms[, 24] + peakidentif.rnase.mms[, 23] > 10)
# length(fraction25.peak.rnase.mms)
precipitated.ctrl.mms <- which(peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 24] & peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 23] & peakidentif.ctrl.mms[, 25] + peakidentif.ctrl.mms[, 24] + peakidentif.ctrl.mms[, 23] == 100)
precipitated.rnase.mms <- which(peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 24] & peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 23] & peakidentif.rnase.mms[, 25] + peakidentif.rnase.mms[, 24] + peakidentif.rnase.mms[, 23] == 100)
precipitated.mms <- unique(c(precipitated.ctrl.mms,precipitated.rnase.mms))
# mvm
saveRDS(globalpeak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.ctrl.mvm")
ctrl.mvm <- readRDS("Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("Non_synchronized_A549_rnase.mms")
globalpeak.ctrl.mvm <- apply(ctrl.mvm, 1, function(x){which.max(x)})
globalpeak.value.ctrl.mvm <- apply(ctrl.mvm, 1, function(x){max(x)})
globalpeak.rnase.mvm <- apply(rnase.mvm, 1, function(x){which.max(x)})
globalpeak.value.rnase.mvm <- apply(rnase.mvm, 1, function(x){max(x)})
peakidentif.ctrl.mvm <- ctrl.mvm
peakidentif.rnase.mvm <- rnase.mvm
sd.byrow.ctrl.mvm <- apply(peakidentif.ctrl.mvm, 1, function(x) sd(x[x < 8]))
sd.mean.ctrl.mvm <- mean(sd.byrow.ctrl.mvm)
sd.byrow.rnase.mvm <- apply(peakidentif.rnase.mvm, 1, function(x) sd(x[x < 8]))
sd.mean.rnase.mvm <- mean(sd.byrow.rnase.mvm)
colnames(peakidentif.ctrl.mvm) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.ctrl.mvm)) - 1)
allpeaks.ctrl.mvm <- apply(peakidentif.ctrl.mvm, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.ctrl.mvm]})
peak.values.ctrl.mvm <- lapply(seq_along(allpeaks.ctrl.mvm), function(i) peakidentif.ctrl.mvm[i, allpeaks.ctrl.mvm[[i]]])
localpeaks.ctrl.mvm <- allpeaks.ctrl.mvm
for (i in seq_along(localpeaks.ctrl.mvm)) {localpeaks.ctrl.mvm[[i]] <- localpeaks.ctrl.mvm[[i]][!localpeaks.ctrl.mvm[[i]] %in% globalpeak.ctrl.mvm[[i]]]}
localpeaks.values.ctrl.mvm <- lapply(seq_along(localpeaks.ctrl.mvm), function(i) peakidentif.ctrl.mvm[i, localpeaks.ctrl.mvm[[i]]])
colnames(peakidentif.rnase.mvm) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.rnase.mvm)) - 1)
allpeaks.rnase.mvm <- apply(peakidentif.rnase.mvm, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.rnase.mvm]})
peak.values.rnase.mvm <- lapply(seq_along(allpeaks.rnase.mvm), function(i) peakidentif.rnase.mvm[i, allpeaks.rnase.mvm[[i]]])
localpeaks.rnase.mvm <- allpeaks.rnase.mvm
for (i in seq_along(localpeaks.rnase.mvm)) {localpeaks.rnase.mvm[[i]] <- localpeaks.rnase.mvm[[i]][!localpeaks.rnase.mvm[[i]] %in% globalpeak.rnase.mvm[[i]]]}
localpeaks.values.rnase.mvm <- lapply(seq_along(localpeaks.rnase.mvm), function(i) peakidentif.rnase.mvm[i, localpeaks.rnase.mvm[[i]]])
fraction1.peak.ctrl.mvm <- which(peakidentif.ctrl.mvm[, 1] > peakidentif.ctrl.mvm[, 2] & peakidentif.ctrl.mvm[, 1] > peakidentif.ctrl.mvm[, 3])
# length(fraction1.peak.ctrl.mvm)
fraction25.peak.ctrl.mvm <- which(peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 24] & peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 23] & peakidentif.ctrl.mvm[, 25] + peakidentif.ctrl.mvm[, 24] +peakidentif.ctrl.mvm[, 23] > 10) # wenn der peak am Ende nicht insgesamt 10 überschreitet, ist es relativ unrelevant. Scheinbar fallen viele Proteine am Ende etwas aus.
# length(fraction25.peak.ctrl.mvm)
fraction1.peak.rnase.mvm <- which(peakidentif.rnase.mvm[, 1] > peakidentif.rnase.mvm[, 2] & peakidentif.rnase.mvm[, 1] > peakidentif.rnase.mvm[, 3])
# length(fraction1.peak.rnase.mvm)
fraction25.peak.rnase.mvm <- which(peakidentif.rnase.mvm[, 25] > peakidentif.rnase.mvm[, 24] & peakidentif.rnase.mvm[, 25] > peakidentif.rnase.mvm[, 23] & peakidentif.rnase.mvm[, 25] + peakidentif.rnase.mvm[, 24] + peakidentif.rnase.mvm[, 23] > 10)
# length(fraction25.peak.rnase.mvm)
precipitated.ctrl.mvm <- which(peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 24] & peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 23] & peakidentif.ctrl.mvm[, 25] + peakidentif.ctrl.mvm[, 24] + peakidentif.ctrl.mvm[, 23] == 100)
precipitated.rnase.mvm <- which(peakidentif.rnase.mvm[, 25] > peakidentif.rnase.mvm[, 24] & peakidentif.rnase.mvm[, 25] > peakidentif.rnase.mvm[, 23] & peakidentif.rnase.mvm[, 25] + peakidentif.rnase.mvm[, 24] + peakidentif.rnase.mvm[, 23] == 100)
precipitated.mvm <- unique(c(precipitated.ctrl.mvm,precipitated.rnase.mvm))
globalpeak.ctrl.zt <- apply(ctrl.zt, 1, function(x){which.max(x)})
globalpeak.value.ctrl.zt <- apply(ctrl.zt, 1, function(x){max(x)})
globalpeak.rnase.zt <- apply(rnase.zt, 1, function(x){which.max(x)})
globalpeak.value.rnase.zt <- apply(rnase.zt, 1, function(x){max(x)})
peakidentif.ctrl.zt <- ctrl.zt
peakidentif.rnase.zt <- rnase.zt
sd.byrow.ctrl.zt <- apply(peakidentif.ctrl.zt, 1, function(x) sd(x[x < 8]))
sd.mean.ctrl.zt <- mean(sd.byrow.ctrl.zt)
sd.byrow.rnase.zt <- apply(peakidentif.rnase.zt, 1, function(x) sd(x[x < 8]))
sd.mean.rnase.zt <- mean(sd.byrow.rnase.zt)
colnames(peakidentif.ctrl.zt) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.ctrl.zt)) - 1)
allpeaks.ctrl.zt <- apply(peakidentif.ctrl.zt, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.ctrl.zt]})
peak.values.ctrl.zt <- lapply(seq_along(allpeaks.ctrl.zt), function(i) peakidentif.ctrl.zt[i, allpeaks.ctrl.zt[[i]]])
localpeaks.ctrl.zt <- allpeaks.ctrl.zt
for (i in seq_along(localpeaks.ctrl.zt)) {localpeaks.ctrl.zt[[i]] <- localpeaks.ctrl.zt[[i]][!localpeaks.ctrl.zt[[i]] %in% globalpeak.ctrl.zt[[i]]]}
localpeaks.values.ctrl.zt <- lapply(seq_along(localpeaks.ctrl.zt), function(i) peakidentif.ctrl.zt[i, localpeaks.ctrl.zt[[i]]])
colnames(peakidentif.rnase.zt) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.rnase.zt)) - 1)
allpeaks.rnase.zt <- apply(peakidentif.rnase.zt, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.rnase.zt]})
peak.values.rnase.zt <- lapply(seq_along(allpeaks.rnase.zt), function(i) peakidentif.rnase.zt[i, allpeaks.rnase.zt[[i]]])
localpeaks.rnase.zt <- allpeaks.rnase.zt
for (i in seq_along(localpeaks.rnase.zt)) {localpeaks.rnase.zt[[i]] <- localpeaks.rnase.zt[[i]][!localpeaks.rnase.zt[[i]] %in% globalpeak.rnase.zt[[i]]]}
localpeaks.values.rnase.zt <- lapply(seq_along(localpeaks.rnase.zt), function(i) peakidentif.rnase.zt[i, localpeaks.rnase.zt[[i]]])
fraction1.peak.ctrl.zt <- which(peakidentif.ctrl.zt[, 1] > peakidentif.ctrl.zt[, 2] & peakidentif.ctrl.zt[, 1] > peakidentif.ctrl.zt[, 3])
# length(fraction1.peak.ctrl.zt)
fraction25.peak.ctrl.zt <- which(peakidentif.ctrl.zt[, 25] > peakidentif.ctrl.zt[, 24] & peakidentif.ctrl.zt[, 25] > peakidentif.ctrl.zt[, 23] & peakidentif.ctrl.zt[, 25] + peakidentif.ctrl.zt[, 24] +peakidentif.ctrl.zt[, 23] > 10) # wenn der peak am Ende nicht insgesamt 10 überschreitet, ist es relativ unrelevant. Scheinbar fallen viele Proteine am Ende etwas aus.
# length(fraction25.peak.ctrl.zt)
fraction1.peak.rnase.zt <- which(peakidentif.rnase.zt[, 1] > peakidentif.rnase.zt[, 2] & peakidentif.rnase.zt[, 1] > peakidentif.rnase.zt[, 3])
# length(fraction1.peak.rnase.zt)
fraction25.peak.rnase.zt <- which(peakidentif.rnase.zt[, 25] > peakidentif.rnase.zt[, 24] & peakidentif.rnase.zt[, 25] > peakidentif.rnase.zt[, 23] & peakidentif.rnase.zt[, 25] + peakidentif.rnase.zt[, 24] + peakidentif.rnase.zt[, 23] > 10)
# length(fraction25.peak.rnase.zt)
precipitated.ctrl.zt <- which(peakidentif.ctrl.zt[, 25] > peakidentif.ctrl.zt[, 24] & peakidentif.ctrl.zt[, 25] > peakidentif.ctrl.zt[, 23] & peakidentif.ctrl.zt[, 25] + peakidentif.ctrl.zt[, 24] + peakidentif.ctrl.zt[, 23] == 100)
precipitated.rnase.zt <- which(peakidentif.rnase.zt[, 25] > peakidentif.rnase.zt[, 24] & peakidentif.rnase.zt[, 25] > peakidentif.rnase.zt[, 23] & peakidentif.rnase.zt[, 25] + peakidentif.rnase.zt[, 24] + peakidentif.rnase.zt[, 23] == 100)
precipitated.zt <- unique(c(precipitated.ctrl.zt,precipitated.rnase.zt))
globalpeak.ctrl.mms <- apply(ctrl.mms, 1, function(x){which.max(x)})
globalpeak.value.ctrl.mms <- apply(ctrl.mms, 1, function(x){max(x)})
globalpeak.rnase.mms <- apply(rnase.mms, 1, function(x){which.max(x)})
globalpeak.value.rnase.mms <- apply(rnase.mms, 1, function(x){max(x)})
peakidentif.ctrl.mms <- ctrl.mms
peakidentif.rnase.mms <- rnase.mms
sd.byrow.ctrl.mms <- apply(peakidentif.ctrl.mms, 1, function(x) sd(x[x < 8]))
sd.mean.ctrl.mms <- mean(sd.byrow.ctrl.mms)
sd.byrow.rnase.mms <- apply(peakidentif.rnase.mms, 1, function(x) sd(x[x < 8]))
sd.mean.rnase.mms <- mean(sd.byrow.rnase.mms)
colnames(peakidentif.ctrl.mms) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.ctrl.mms)) - 1)
allpeaks.ctrl.mms <- apply(peakidentif.ctrl.mms, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.ctrl.mms]})
peak.values.ctrl.mms <- lapply(seq_along(allpeaks.ctrl.mms), function(i) peakidentif.ctrl.mms[i, allpeaks.ctrl.mms[[i]]])
localpeaks.ctrl.mms <- allpeaks.ctrl.mms
for (i in seq_along(localpeaks.ctrl.mms)) {localpeaks.ctrl.mms[[i]] <- localpeaks.ctrl.mms[[i]][!localpeaks.ctrl.mms[[i]] %in% globalpeak.ctrl.mms[[i]]]}
localpeaks.values.ctrl.mms <- lapply(seq_along(localpeaks.ctrl.mms), function(i) peakidentif.ctrl.mms[i, localpeaks.ctrl.mms[[i]]])
colnames(peakidentif.rnase.mms) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.rnase.mms)) - 1)
allpeaks.rnase.mms <- apply(peakidentif.rnase.mms, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.rnase.mms]})
peak.values.rnase.mms <- lapply(seq_along(allpeaks.rnase.mms), function(i) peakidentif.rnase.mms[i, allpeaks.rnase.mms[[i]]])
localpeaks.rnase.mms <- allpeaks.rnase.mms
for (i in seq_along(localpeaks.rnase.mms)) {localpeaks.rnase.mms[[i]] <- localpeaks.rnase.mms[[i]][!localpeaks.rnase.mms[[i]] %in% globalpeak.rnase.mms[[i]]]}
localpeaks.values.rnase.mms <- lapply(seq_along(localpeaks.rnase.mms), function(i) peakidentif.rnase.mms[i, localpeaks.rnase.mms[[i]]])
fraction1.peak.ctrl.mms <- which(peakidentif.ctrl.mms[, 1] > peakidentif.ctrl.mms[, 2] & peakidentif.ctrl.mms[, 1] > peakidentif.ctrl.mms[, 3])
# length(fraction1.peak.ctrl.mms)
fraction25.peak.ctrl.mms <- which(peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 24] & peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 23] & peakidentif.ctrl.mms[, 25] + peakidentif.ctrl.mms[, 24] +peakidentif.ctrl.mms[, 23] > 10) # wenn der peak am Ende nicht insgesamt 10 überschreitet, ist es relativ unrelevant. Scheinbar fallen viele Proteine am Ende etwas aus.
# length(fraction25.peak.ctrl.mms)
fraction1.peak.rnase.mms <- which(peakidentif.rnase.mms[, 1] > peakidentif.rnase.mms[, 2] & peakidentif.rnase.mms[, 1] > peakidentif.rnase.mms[, 3])
# length(fraction1.peak.rnase.mms)
fraction25.peak.rnase.mms <- which(peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 24] & peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 23] & peakidentif.rnase.mms[, 25] + peakidentif.rnase.mms[, 24] + peakidentif.rnase.mms[, 23] > 10)
# length(fraction25.peak.rnase.mms)
precipitated.ctrl.mms <- which(peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 24] & peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 23] & peakidentif.ctrl.mms[, 25] + peakidentif.ctrl.mms[, 24] + peakidentif.ctrl.mms[, 23] == 100)
precipitated.rnase.mms <- which(peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 24] & peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 23] & peakidentif.rnase.mms[, 25] + peakidentif.rnase.mms[, 24] + peakidentif.rnase.mms[, 23] == 100)
precipitated.mms <- unique(c(precipitated.ctrl.mms,precipitated.rnase.mms))
# mvm
saveRDS(globalpeak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.ctrl.mvm")
# mvm
saveRDS(globalpeak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.ctrl.mvm")
saveRDS(globalpeak.value.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.value.ctrl.mvm")
saveRDS(globalpeak.rnase.mvm, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.rnase.mvm")
saveRDS(globalpeak.value.rnase.mvm, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.value.rnase.mvm")
saveRDS(localpeaks.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.ctrl.mvm")
saveRDS(localpeaks.values.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.values.ctrl.mvm")
saveRDS(localpeaks.rnase.mvm, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.rnase.mvm")
saveRDS(localpeaks.values.rnase.mvm, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.values.rnase.mvm")
saveRDS(fraction1.peak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.mvm")
saveRDS(fraction25.peak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.mvm")
saveRDS(fraction1.peak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.mvm")
saveRDS(fraction25.peak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.mvm")
saveRDS(precipitated.mvm, file = "gespeicherteDaten/Non_synchronized_A549_precipitated.mvm")
knitr::opts_chunk$set(echo = TRUE)
saveRDS(ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_ctrl.mvm")
saveRDS(rnase.mvm, file = "gespeicherteDaten/Non_synchronized_A549_rnase.mvm")
saveRDS(ctrl.zt, file = "gespeicherteDaten/Non_synchronized_A549_ctrl.zt")
saveRDS(rnase.zt, file = "gespeicherteDaten/Non_synchronized_A549_rnase.zt")
saveRDS(ctrl.mms, file = "gespeicherteDaten/Non_synchronized_A549_ctrl.mms")
saveRDS(rnase.mms, file = "gespeicherteDaten/Non_synchronized_A549_rnase.mms")
ctrl.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_rnase.mms")
ctrl.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_rnase.mms")
# mvm
saveRDS(globalpeak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.ctrl.mvm")
saveRDS(globalpeak.value.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.value.ctrl.mvm")
saveRDS(globalpeak.rnase.mvm, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.rnase.mvm")
saveRDS(globalpeak.value.rnase.mvm, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.value.rnase.mvm")
saveRDS(localpeaks.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.ctrl.mvm")
saveRDS(localpeaks.values.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.values.ctrl.mvm")
saveRDS(localpeaks.rnase.mvm, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.rnase.mvm")
saveRDS(localpeaks.values.rnase.mvm, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.values.rnase.mvm")
saveRDS(fraction1.peak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.mvm")
saveRDS(fraction25.peak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.mvm")
saveRDS(fraction1.peak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.mvm")
saveRDS(fraction25.peak.ctrl.mvm, file = "gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.mvm")
saveRDS(precipitated.mvm, file = "gespeicherteDaten/Non_synchronized_A549_precipitated.mvm")
# zt
saveRDS(globalpeak.ctrl.zt, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.ctrl.zt")
saveRDS(globalpeak.value.ctrl.zt, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.value.ctrl.zt")
saveRDS(globalpeak.rnase.zt, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.rnase.zt")
saveRDS(globalpeak.value.rnase.zt, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.value.rnase.zt")
saveRDS(localpeaks.ctrl.zt, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.ctrl.zt")
saveRDS(localpeaks.values.ctrl.zt, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.values.ctrl.zt")
saveRDS(localpeaks.rnase.zt, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.rnase.zt")
saveRDS(localpeaks.values.rnase.zt, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.values.rnase.zt")
saveRDS(fraction1.peak.ctrl.zt, file = "gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.zt")
saveRDS(fraction25.peak.ctrl.zt, file = "gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.zt")
saveRDS(fraction1.peak.ctrl.zt, file = "gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.zt")
saveRDS(fraction25.peak.ctrl.zt, file = "gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.zt")
saveRDS(precipitated.zt, file = "gespeicherteDaten/Non_synchronized_A549_precipitated.zt")
# mms
saveRDS(globalpeak.ctrl.mms, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.ctrl.mms")
saveRDS(globalpeak.value.ctrl.mms, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.value.ctrl.mms")
saveRDS(globalpeak.rnase.mms, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.rnase.mms")
saveRDS(globalpeak.value.rnase.mms, file = "gespeicherteDaten/Non_synchronized_A549_globalpeak.value.rnase.mms")
saveRDS(localpeaks.ctrl.mms, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.ctrl.mms")
saveRDS(localpeaks.values.ctrl.mms, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.values.ctrl.mms")
saveRDS(localpeaks.rnase.mms, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.rnase.mms")
saveRDS(localpeaks.values.rnase.mms, file = "gespeicherteDaten/Non_synchronized_A549_localpeaks.values.rnase.mms")
saveRDS(fraction1.peak.ctrl.mms, file = "gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.mms")
saveRDS(fraction25.peak.ctrl.mms, file = "gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.mms")
saveRDS(fraction1.peak.ctrl.mms, file = "gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.mms")
saveRDS(fraction25.peak.ctrl.mms, file = "gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.mms")
saveRDS(precipitated.mms, file = "gespeicherteDaten/Non_synchronized_A549_precipitated.mms")
#zt
globalpeak.ctrl.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.ctrl.zt")
globalpeak.value.ctrl.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.value.ctrl.zt")
globalpeak.rnase.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.rnase.zt")
globalpeak.value.rnase.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.value.rnase.zt")
localpeaks.ctrl.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.ctrl.zt")
localpeaks.values.ctrl.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.values.ctrl.zt")
localpeaks.rnase.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.rnase.zt")
localpeaks.values.rnase.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.values.rnase.zt")
fraction1.peak.ctrl.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.zt")
fraction1.peak.ctrl.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.zt")
precipitated.zt <- readRDS("gespeicherteDaten/Non_synchronized_A549_precipitated.zt")
#mvm
globalpeak.ctrl.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.ctrl.mvm")
globalpeak.value.ctrl.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.value.ctrl.mvm")
globalpeak.rnase.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.rnase.mvm")
globalpeak.value.rnase.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.value.rnase.mvm")
localpeaks.ctrl.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.ctrl.mvm")
localpeaks.values.ctrl.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.values.ctrl.mvm")
localpeaks.rnase.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.rnase.mvm")
localpeaks.values.rnase.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.values.rnase.mvm")
fraction1.peak.ctrl.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.mvm")
fraction25.peak.ctrl.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.mvm")
fraction1.peak.ctrl.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.mvm")
fraction25.peak.ctrl.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.mvm")
precipitated.mvm <- readRDS("gespeicherteDaten/Non_synchronized_A549_precipitated.mvm")
#mms
globalpeak.ctrl.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.ctrl.mms")
globalpeak.value.ctrl.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.value.ctrl.mms")
globalpeak.rnase.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.rnase.mms")
globalpeak.value.rnase.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_globalpeak.value.rnase.mms")
localpeaks.ctrl.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.ctrl.mms")
localpeaks.values.ctrl.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.values.ctrl.mms")
localpeaks.rnase.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.rnase.mms")
localpeaks.values.rnase.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_localpeaks.values.rnase.mms")
fraction1.peak.ctrl.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.mms")
fraction25.peak.ctrl.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.mms")
fraction1.peak.ctrl.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction1.peak.ctrl.mms")
fraction25.peak.ctrl.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_fraction25.peak.ctrl.mms")
precipitated.mms <- readRDS("gespeicherteDaten/Non_synchronized_A549_precipitated.mms")
>>>>>>> main
