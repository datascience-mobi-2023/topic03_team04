if (sd(values) < sd.mean.ctrl.mms) {
indices <- c(indices, j:(j+2))}}
if (length(indices) == 0) {
closereg.ctrl.mms[[i]] <- numeric(0)}
else {closereg.ctrl.mms[[i]] <- indices}}
largevalues.closereg.ctrl.mms <- largevalues.ctrl.mms
for (i in seq_along(largevalues.closereg.ctrl.mms)) {
largevalues.closereg.ctrl.mms[[i]] <- largevalues.closereg.ctrl.mms[[i]][largevalues.closereg.ctrl.mms[[i]] %in% closereg.ctrl.mms[[i]]]}
ordered.largevalues.closereg.ctrl.mms <- lapply(largevalues.closereg.ctrl.mms,function(row){sort(row)})
shoulderregion.ctrl.mms <- lapply(ordered.largevalues.closereg.ctrl.mms,function(x) {
diffs <- c(1, diff(x))
groups <- rle(diffs)
shoulderregion <- which(groups$values == 1 & groups$lengths >= 2)
if (length(shoulderregion) > 0) {
starts <- cumsum(groups$lengths)[shoulderregion] - groups$lengths[shoulderregion]
ends <- cumsum(groups$lengths)[shoulderregion]
shoulderregion <- mapply(function(start, end) x[start:end], starts, ends)
}
return(shoulderregion)
})
shoulderregion.a.mms <- lapply(names(shoulderregion.ctrl.mms), function(x) setdiff(shoulderregion.ctrl.mms[[x]], shoulderregion.rnase.mms[[x]]))
names(shoulderregion.a.mms) <- names(shoulderregion.ctrl.mms)
shoulderregion.b.mms <- lapply(names(shoulderregion.rnase.mms), function(x) setdiff(shoulderregion.rnase.mms[[x]], shoulderregion.ctrl.mms[[x]]))
names(shoulderregion.b.mms) <- names(shoulderregion.rnase.mms)
selec.shoulderregion.a.mms <- lapply(shoulderregion.a.mms, function(x)
if (length(x) < 3) {return(numeric(0))}
else {return(x)})
selec.shoulderregion.b.mms <- lapply(shoulderregion.b.mms, function(x)
if (length(x) < 3) {return(numeric(0))}
else {return(x)})
selec.shoulderregion.a.1.mms <- lapply(shoulderregion.a.mvm, function(x)
if (length(x) > 2) {return (1)}
else {return(0)})
selec.shoulderregion.b.1.mms <- lapply(shoulderregion.b.mms, function(x)
if (length(x) > 2) {return (1)}
else {return(0)})
shoulderregion.mms.1.nt <- as.data.frame(selec.shoulderregion.a.1.mms)
shoulderregion.mms.2.nt <- as.data.frame(selec.shoulderregion.b.1.mms)
shoulderregion.mms.nt <- shoulderregion.mms.1.nt + shoulderregion.mms.2.nt
shoulderregion.mms.nt.nt <- data.frame(lapply(shoulderregion.mms.nt, function(x) ifelse(x == 2, 1, x)))
ShoulderRegion_mms <- t(shoulderregion.mms.nt.nt)
# View(ShoulderRegion_mms)
signi.global.pa.mvm <- data.frame(PA_global = ifelse(globalpeak.value.rnase.mvm > 1.7 * globalpeak.value.ctrl.mvm | globalpeak.value.ctrl.mvm > 1.7 * globalpeak.value.rnase.mvm, 1, 0))
rownames(signi.global.pa.mvm) <- rownames(rnase.mvm)
View(signi.global.pa.mvm)
# dim(signi.global.pa.mvm)
length(which(signi.global.pa.mvm==1))
Nr <- c(1:dim(rnase.rep.zt.scaled)[1])
Nr <- c(1:dim(rnase.zt)[1])
rnase.zt.nr <- cbind(Nr,rnase.zt)
signi.global.pa.zt <- data.frame(PA_global = ifelse(globalpeak.value.rnase.zt > 1.7 * globalpeak.value.ctrl.zt | globalpeak.value.ctrl.zt > 1.7 * globalpeak.value.rnase.zt, 1, 0))
rownames(signi.global.pa.zt) <- rownames(rnase.zt)
View(signi.global.pa.zt)
length(which(signi.global.pa.zt==1))
localpeaks.sumvalues.ctrl.mvm <- data.frame(sum_values = numeric(length(localpeaks.values.ctrl.mvm)))
for (i in seq_along(localpeaks.values.ctrl.mvm)) {
sum_values <- sum(localpeaks.values.ctrl.mvm[[i]])
localpeaks.sumvalues.ctrl.mvm[i, "sum_values"] <- sum_values}
# View(localpeaks.sumvalues.ctrl.mvm)
localpeaks.sumvalues.rnase.mvm <- data.frame(sum_values = numeric(length(localpeaks.values.rnase.mvm)))
for (i in seq_along(localpeaks.values.rnase.mvm)) {
sum_values <- sum(localpeaks.values.rnase.mvm[[i]])
localpeaks.sumvalues.rnase.mvm[i, "sum_values"] <- sum_values}
#View(localpeaks.sumvalues.rnase.mvm)
signi.local.pa.mvm <- data.frame(PA_local = rep(0, nrow(localpeaks.sumvalues.rnase.mvm)))
for (i in 1:nrow(localpeaks.sumvalues.rnase.mvm)) {
if (abs(localpeaks.sumvalues.rnase.mvm$sum_values[i] - localpeaks.sumvalues.ctrl.mvm$sum_values[i]) > 7.5)
{
signi.local.pa.mvm$PA_local[i] <- 1
}
}
rownames(signi.local.pa.mvm) <- rownames(rnase.mvm)
length(which(signi.local.pa.mvm==1))
#View(signi.local.pa.mvm)
#dim(signi.local.pa.mvm)
localpeaks.sumvalues.ctrl.zt <- data.frame(Summed_Values = numeric(length(localpeaks.values.ctrl.zt)))
for (i in seq_along(localpeaks.values.ctrl.zt)) {
summed_values <- sum(localpeaks.values.ctrl.zt[[i]])
localpeaks.sumvalues.ctrl.zt[i, "Summed_Values"] <- summed_values
}
#View(localpeaks.sumvalues.ctrl.zt)
localpeaks.sumvalues.rnase.zt <- data.frame(Summed_Values = numeric(length(localpeaks.values.rnase.zt)))
for (i in seq_along(localpeaks.values.rnase.zt)) {
summed_values <- sum(localpeaks.values.rnase.zt[[i]])
localpeaks.sumvalues.rnase.zt[i, "Summed_Values"] <- summed_values
}
#View(localpeaks.sumvalues.rnase.zt)
signifikante_reihen_local_zt <- data.frame(Zustimmung_local = rep(0, nrow(localpeaks.sumvalues.rnase.zt)))
for (i in 1:nrow(localpeaks.sumvalues.rnase.zt)) {
if (abs(localpeaks.sumvalues.rnase.zt$Summed_Values[i] - localpeaks.sumvalues.ctrl.zt$Summed_Values[i]) > 7.5)
{
signifikante_reihen_local_zt$Zustimmung_local[i] <- 1
}
}
rownames(signifikante_reihen_local_zt) <- rownames(rnase.zt)
length(which(signifikante_reihen_local_zt==1))
#View(signifikante_reihen_local_zt)
#dim(signifikante_reihen_local_zt)
localpeaks.sumvalues.ctrl.mms <- data.frame(Summed_Values = numeric(length(localpeaks.values.ctrl.mms)))
for (i in seq_along(localpeaks.values.ctrl.mms)) {
summed_values <- sum(localpeaks.values.ctrl.mms[[i]])
localpeaks.sumvalues.ctrl.mms[i, "Summed_Values"] <- summed_values
}
#View(localpeaks.sumvalues.ctrl.mms)
localpeaks.sumvalues.rnase.mms <- data.frame(Summed_Values = numeric(length(localpeaks.values.rnase.mms)))
for (i in seq_along(localpeaks.values.rnase.mms)) {
summed_values <- sum(localpeaks.values.rnase.mms[[i]])
localpeaks.sumvalues.rnase.mms[i, "Summed_Values"] <- summed_values
}
#View(localpeaks.sumvalues.rnase.mms)
signifikante_reihen_local_mms <- data.frame(Zustimmung_local = rep(0, nrow(localpeaks.sumvalues.rnase.mms)))
for (i in 1:nrow(localpeaks.sumvalues.rnase.mms)) {
if (abs(localpeaks.sumvalues.rnase.mms$Summed_Values[i] - localpeaks.sumvalues.ctrl.mms$Summed_Values[i]) > 7.5)
{
signifikante_reihen_local_mms$Zustimmung_local[i] <- 1
}
}
rownames(signifikante_reihen_local_mms) <- rownames(rnase.mms)
#View(signifikante_reihen_local_mms)
#dim(signifikante_reihen_local_mms)
parameters.mvm <- cbind(signi.global.pa.mvm, signi.local.pa.mvm, shift_mvm_named, ShoulderRegion_mvm)
parameters.zt <- cbind(signi.global.pa.zt, signifikante_reihen_local_zt, shift_zt_named, ShoulderRegion_zt)
parameters.mms <- cbind(signi.global.pa.mms, signifikante_reihen_local_mms, shift_mms_named, ShoulderRegion_mms)
View(parameters.mvm)
View(parameters.mvm)
parameters <- list(parameters.mvm, parameters.zt, parameters.mms)
parameters <- list(parameters.mvm, parameters.zt) #parameters.mms fehlt noch, ist aber noch nicht definiert
parameters <- list(parameters.mvm, parameters.zt) #parameters.mms fehlt noch, ist aber noch nicht definiert
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in dim(parameters.mvm[1])){
if (parameters[[1]][y,3] == "no shift"){
parameters[[1]][y,3] == 0
} else{parameters[[1]][y,3] == 1}
}
summe_paramers <- sapply(parameters[[1]], 1, sum)
parameters <- list(parameters.mvm, parameters.zt) #parameters.mms fehlt noch, ist aber noch nicht definiert
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in dim(parameters.mvm[1])){
if (parameters[[1]][y,3] == "no shift"){
parameters[[1]][y,3] == 0
} else{parameters[[1]][y,3] == 1}
}
summe_paramers <- apply(parameters[[1]], 1,sum)
summe_paramers <- apply(parameters[[1]], 1,sum())
summe_paramers <- apply(parameters[[1]],sum())
summe_paramers <- apply(parameters[[1]],sum(x))
summe_paramers <- apply(parameters[[1]],sum)
summe_paramers <- apply(parameters[[1]],1, function(x){
sum(x)
})
summe_paramers <- apply(parameters.mvm,1, function(x){
sum(x)
})
?sum
summe_paramers <- rowsums(parameters[[1]])
summe_paramers <- rowSums(parameters[[1]])
View(parameters[[1]])
parameters <- list(parameters.mvm, parameters.zt) #parameters.mms fehlt noch, ist aber noch nicht definiert
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in dim(parameters.mvm[1])){
if (parameters[[1]][y,3] == "no shift"){
parameters[[1]][y,3] == 0
} else{parameters[[1]][y,3] == 1}
}
summe_paramers <- rowSums(parameters[[1]])
View(parameters[[1]])
View(parameters[[1]])
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in dim(parameters.mvm[1])){
if (parameters[[1]][y,3] == "no shift"){
parameters[[1]][y,3] == 0
} else{parameters[[1]][y,3] == 1}
}
View(parameters[[1]])
if (parameters[[1]][1,3] == "no shift"){
parameters[[1]][y,3] == 0}
if (parameters[[1]][1,3] == "no shift"){
parameters[[1]][y,3] == 0}
View(parameters[[1]])
if (parameters[[1]][1,3] == "no shift"){
parameters[[1]][1,3] == 0}
View(parameters[[1]])
if (parameters[[1]][1,3] == "no shift"){
parameters[[1]][1,3] <- 0}
View(parameters[[1]])
parameters <- list(parameters.mvm, parameters.zt) #parameters.mms fehlt noch, ist aber noch nicht definiert
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in dim(parameters.mvm[1])){
if (parameters[[1]][y,3] == "no shift"){
parameters[[1]][y,3] <- 0
} else{parameters[[1]][y,3] <- 1}
}
View(parameters[[1]])
dim(parameters.mvm[1])
dim(parameters.mvm[1])
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in dim(parameters.mvm)[1]){
if (parameters[[1]][y,3] == "no shift"){
parameters[[1]][y,3] <- 0
} else{parameters[[1]][y,3] <- 1}
}
View(parameters[[1]])
dim(parameters[[1]])
dim(parameters[[1]])[1]
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in dim(parameters[[1]])[1]){
if (parameters[[1]][y,3] == "no shift"){
parameters[[1]][y,3] <- 0
} else{parameters[[1]][y,3] <- 1}
}
View(parameters[[1]])
View(parameters[[1]])
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in 1:dim(parameters[[1]])[1]){
if (parameters[[1]][y,3] == "no shift"){
parameters[[1]][y,3] <- 0
} else{parameters[[1]][y,3] <- 1}
}
View(parameters[[1]])
sum_paramers <- rowSums(parameters[[1]])
sum_paramers <- rowSums(parameters[[1]])
sum_paramers <- rowSums(as.numeric(parameters[[1]]))
sum_paramers <- rowSums(as.numeric(parameters[[1]]))
is.data.frame(parameters[[1]])
sum_paramers <- rowSums(as.numeric(parameters[[1]]))
df <- as.numeric(parameters[[1]])
df <- parameters[[1]]
is.data.frame(df)
sum_paramers <- rowSums(df)
sum_paramers <- rowSums(as.numeric(df))
sum_parameters <- apply(parameters[[1]], 1, sum)
sum_parameters <- apply(as.numeric(parameters[[1]]), 1, sum)
sum_parameters <- apply(parameters[[1]], 1, sum)
parameters <- list(parameters.mvm, parameters.zt) #parameters.mms fehlt noch, ist aber noch nicht definiert
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in 1:dim(parameters.mvm)[1]){
if (parameters.mvm[y,3] == "no shift"){
parameters.mvm[y,3] <- 0
} else{parameters.mvm[y,3] <- 1}
}
sum_parameters <- apply(parameters.mvm, 1, sum)
parameters <- list(parameters.mvm, parameters.zt) #parameters.mms fehlt noch, ist aber noch nicht definiert
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in 1:dim(parameters.mvm)[1]){
if (parameters.mvm[y,3] == "no shift"){
parameters.mvm[y,3] <- 0
} else{parameters.mvm[y,3] <- 1}
}
sum_parameters <- apply(as.numeric(parameters.mvm), 1, sum)
is.data.frame(parameters.mms)
is.data.frame(parameters.mvm)
sum_parameters <- apply(as.numeric(parameters.mvm), 1, sum)
View(parameters.mvm)
parameters.mvm <- cbind(signi.global.pa.mvm, signi.local.pa.mvm, shift_mvm_named, ShoulderRegion_mvm)
parameters.mvm <- cbind(signi.global.pa.mvm, signi.local.pa.mvm, shift_mvm_named, ShoulderRegion_mvm)
parameters.zt <- cbind(signi.global.pa.zt, signifikante_reihen_local_zt, shift_zt_named, ShoulderRegion_zt)
parameters <- list(parameters.mvm, parameters.zt) #parameters.mms fehlt noch, ist aber noch nicht definiert
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in 1:dim(parameters.zt)[1]){
if (parameters.zt[y,3] == "no shift"){
parameters.zt[y,3] <- 0
} else{parameters.zt[y,3] <- 1}
}
sum_parameters <- apply(as.numeric(parameters.zt), 1, sum)
sum_parameters <- apply(as.numeric(parameters.zt), 1, sum)
View(parameters.zt)
sum_parameters <- apply(as.numeric(parameters.zt), 1, df.sum)
sum_parameters <- apply(as.numeric(parameters.zt), df.sum)
sum_parameters <- apply(as.numeric(parameters.zt),1, rowSums())
sum_parameters <- apply(as.numeric(parameters.zt), rowSums())
sum_parameters <- apply(as.numeric(parameters.zt), 1, function(x)){
sum_parameters <- apply(as.numeric(parameters.zt), 1, function(x){
rowSums()})
parameters.zt <- as.data.frame(parameters.zt)
sum_parameters <- apply(as.numeric(parameters.zt), 1, function(x){
rowSums()})
parameters.zt <- as.data.frame(parameters.zt)
sum_parameters <- apply(as.numeric(parameters.zt), 1, function(x){
rowSums(as.numerix(x))})
sum_parameters <- apply(as.matrix(parameters.zt), 1, function(x){
rowSums(as.numerix(x))})
sum_parameters <- apply(as.matrix(parameters.zt), 1, function(x){
rowSums(as.numeric(x))})
View(as.matrix(parameters.zt))
parameters.zt <- as.data.frame(parameters.zt)
sum_parameters <- apply(as.matrix(parameters.zt), 1, function(x){
rowSums(as.numeric(x))})
parameters.zt <- as.data.frame(parameters.zt)
sum_parameters <- apply(as.matrix(parameters.zt), 1, function(x){
sum(as.numeric(x))})
View(sum_parameters)
View(sum_parameters)
parameters <- list(parameters.mvm, parameters.zt) #parameters.mms fehlt noch, ist aber noch nicht definiert
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in 1:dim(parameters.zt)[1]){
if (parameters.zt[y,3] == "no shift"){
parameters.zt[y,3] <- 0
} else{parameters.zt[y,3] <- 1}
}
parameters.zt <- as.data.frame(parameters.zt)
sum_parameters <- apply(as.matrix(parameters.zt), 1, function(x){
sum(as.numeric(x))})
df <- as.dataframe(value = sum_parameters)
df <- as.data.frame(value = sum_parameters)
df <- as.data.frame(sum_parameters)
ggplot(sum_parameters, aes(factor(sum_parameters)))+
geom_bar()
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()
which(sum_parameters == 0)
parameters.mvm <- cbind(signi.global.pa.mvm, signi.local.pa.mvm, shift_mvm_named, ShoulderRegion_mvm)
parameters.zt <- cbind(signi.global.pa.zt, signifikante_reihen_local_zt, shift_zt_named, ShoulderRegion_zt)
parameters.mms <- cbind(signi.global.pa.mms, signifikante_reihen_local_mms, shift_mms_named, ShoulderRegion_mms)
parameters <- parameters.zt
#parameters <- list(parameters.mvm, parameters.zt) #parameters.mms fehlt noch, ist aber noch nicht definiert
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in 1:dim(parameters)[1]){
if (parameters[y,3] == "no shift"){
parameters[y,3] <- 0
} else{parameters[y,3] <- 1}
}
parameters.m <- as.matrix(parameters)
sum_parameters <- apply(parameters.m, 1, function(x){
sum(as.numeric(x))})
df <- as.data.frame(sum_parameters)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = vjust,
size = 2.5)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = -0,5,
size = 2.5)
df <- as.data.frame(sum_parameters)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = -0,5,
size = 2.5)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()+
geom_text()
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()+
geom_text(aes(label = sum_parameters), vvjust = -0.5)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()+
geom_text(aes(label = sum_parameters), vjust = -0.5)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()+
geom_text(aes(label = sum_parameters(value)), vjust = -0.5)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()+
geom_text(aes(label = after:stat(value)), vjust = -0.5)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()+
geom_text(aes(label = after_stat(value)), vjust = -0.5)
df <- as.data.frame(category = names(sum_parameters), value = sum_parameters)
df <- as.data.frame(category = as.numeric(names(sum_parameters)), value = as.numeric(sum_parameters))
df <- data.frame(category = as.numeric(names(sum_parameters)), value = as.numeric(sum_parameters))
ggplot(df, aes(x = category, y = value))+
geom_bar()
ggplot(df, aes(x = category, y = value))+
geom_bar(stat = "identity")
df <- data.frame(category = as.numeric(names(sum_parameters)), value = as.numeric(sum_parameters))
df <- as.data.frame(sum_parameters)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()+
```
df <- as.data.frame(sum_parameters)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()+
```
ggplot(df, aes(factor(sum_parameters)))+
geom_bar()
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(col = "skyblue")
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "skyblue")
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', vjust = -0.5)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5)+
theme_minimal()
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5)+
theme_classic()
parameters <- parameters.zt
#parameters <- list(parameters.mvm, parameters.zt) #parameters.mms fehlt noch, ist aber noch nicht definiert
#für alles eine lapply
#set the third column (shifttype) to 1 and 0:
for (y in 1:dim(parameters)[1]){
if (parameters[y,3] == "no shift"){
parameters[y,3] <- 0
} else{parameters[y,3] <- 1}
}
parameters.m <- as.matrix(parameters)
sum_parameters <- apply(parameters.m, 1, function(x){
sum(as.numeric(x))})
df <- as.data.frame(sum_parameters)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5)+
labs(x = "number of categories pro shift", y = "number of proteins", title = "Hw many parameters support the proteins?")
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5)+
labs(x = "number of parameters pro shift", y = "number of proteins", title = "How many parameters support the proteins?")+
geom_bracket(x = c(2, 3),            # Start- und Endposition der Klammern
y = max(df$count) + 1,  # Position der Beschriftung über den Klammern
x_labels = c("Group 1", "Group 2"),  # Beschriftung der Klammern
label = "Shared\nProperty",          # Beschriftung über den Klammern
label_position = "top",               # Positionierung der Beschriftung
label_offset = unit(0.3, "lines"),     # Abstand zwischen Beschriftung und Klammern
tip_length = unit(0.05, "npc"),        # Länge der Klammern
bracket_height = unit(0.1, "npc"),     # Höhe der Klammern
color = "red"                          # Farbe der Klammern
)
library(ggforce)
install.packages("ggforce")
install.packages("ggforce")
library(ggforce)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5)+
labs(x = "number of parameters pro shift", y = "number of proteins", title = "How many parameters support the proteins?")+
geom_bracket(x = c(2, 3),            # Start- und Endposition der Klammern
y = max(df$count) + 1,  # Position der Beschriftung über den Klammern
x_labels = c("Group 1", "Group 2"),  # Beschriftung der Klammern
label = "Shared\nProperty",          # Beschriftung über den Klammern
label_position = "top",               # Positionierung der Beschriftung
label_offset = unit(0.3, "lines"),     # Abstand zwischen Beschriftung und Klammern
tip_length = unit(0.05, "npc"),        # Länge der Klammern
bracket_height = unit(0.1, "npc"),     # Höhe der Klammern
color = "red"                          # Farbe der Klammern
)
library(ggforce)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5)+
labs(x = "number of parameters pro shift", y = "number of proteins", title = "How many parameters support the proteins?")+
geom_bracket(x = c(2, 3),            # Start- und Endposition der Klammern
y = max(df$count) + 1,  # Position der Beschriftung über den Klammern
x_labels = c("Group 1", "Group 2"),  # Beschriftung der Klammern
label = "Shared\nProperty",          # Beschriftung über den Klammern
label_position = "top",               # Positionierung der Beschriftung
label_offset = unit(0.3, "lines"),     # Abstand zwischen Beschriftung und Klammern
tip_length = unit(0.05, "npc"),        # Länge der Klammern
bracket_height = unit(0.1, "npc"),     # Höhe der Klammern
color = "red"                          # Farbe der Klammern
)
library(ggpubr)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5)+
labs(x = "number of parameters pro shift", y = "number of proteins", title = "How many parameters support the proteins?")+
geom_bracket(x = c(2, 3),            # Start- und Endposition der Klammern
y = max(df$count) + 1,  # Position der Beschriftung über den Klammern
x_labels = c("Group 1", "Group 2"),  # Beschriftung der Klammern
label = "Shared\nProperty",          # Beschriftung über den Klammern
label_position = "top",               # Positionierung der Beschriftung
label_offset = unit(0.3, "lines"),     # Abstand zwischen Beschriftung und Klammern
tip_length = unit(0.05, "npc"),        # Länge der Klammern
bracket_height = unit(0.1, "npc"),     # Höhe der Klammern
color = "red"                          # Farbe der Klammern
)
ggplot(df, aes(factor(sum_parameters)))+
geom_bar(colour = "darkblue", fill="skyblue")+
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5)+
labs(x = "number of parameters pro shift", y = "number of proteins", title = "How many parameters support the proteins?")+
annotate("brace", x = 2.5,
y = max(df$count) + 1,
xend = 3.5,
yend = max(df$count) + 1,
label = "Shared\nProperty", label.position = "top",
label.hjust = 0.5,
color = "red", size = 1.5
)
