print(plot.cluster.shifts[[x]])
}
library("ggpubr")
library("factoextra")
library("ggplot2")
df.shifts <- data.frame(cbind(shift_mvm_global, shift_mvm_global, shift_zt_global, shift_zt_global, shift_mms_global, shift_mms_global))
plot.cluster.shifts <- list()
title <- c("Clusters of Peaks calculated after MVM", "Clusters of Peaks calculated after z-Transformation", "Clusters of Peaks calculated after MMS")
for (x in 1:3){
df <- df.shifts[,(2*x-1):(2*x)]
res.km <- kmeans(scale(df[, -5]), 4, nstart = 25, algorithm = "Hartigan-Wong")
plot.cluster.shifts[[x]] <- fviz_cluster(res.km, data = df,
geom = "point",
xlab = "Global Shift",
ylab = "Global Shift",
main = title[x],
ggtheme = theme_bw())
print(plot.cluster.shifts[[x]])
}
library("ggpubr")
library("factoextra")
library("ggplot2")
df.shifts <- data.frame(cbind(shift_mvm_global, shift_mvm_global, shift_zt_global, shift_zt_global, shift_mms_global, shift_mms_global))
plot.cluster.shifts <- list()
title <- c("Clusters of Peaks calculated after MVM", "Clusters of Peaks calculated after z-Transformation", "Clusters of Peaks calculated after MMS")
for (x in 1:3){
df <- df.shifts[,(2*x-1):(2*x)]
res.km <- kmeans(scale(df[, -5]), 3, nstart = 25, algorithm = "Hartigan-Wong")
plot.cluster.shifts[[x]] <- fviz_cluster(res.km, data = df,
geom = "point",
xlab = "Global Shift",
ylab = "Global Shift",
main = title[x],
ggtheme = theme_bw())
print(plot.cluster.shifts[[x]])
}
knitr::opts_chunk$set(echo = TRUE)
rdeep <- read.csv('RBP2GO_Human_database_RBPs.csv', header=TRUE, row.names=1, sep = ";")
View(rdeep)
View(shift.clustering)
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.clustering <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
library("ggpubr")
library("factoextra")
library("ggplot2")
df.peaks <- data.frame(cbind(globalpeak.ctrl.mvm, globalpeak.rnase.mvm, globalpeak.ctrl.zt, globalpeak.rnase.zt, globalpeak.ctrl.mms, globalpeak.rnase.mms))
plot.cluster.fractions <- list()
title <- c("Clusters of Peaks calculated after MVM","Clusters of Peaks calculated after z-Transformation", "Clusters of Peaks calculated after MMS")
res.km <- list()
for (x in 1:3){
df <- df.peaks[,(2*x -1):(2*x)]
set.seed(666)
res.km[[x]] <- kmeans(scale(df[, -5]), 4, nstart = 25)
#for (y in 1:length(res.km$cluster)){
#if (res.km$cluster[y] == 1){
#res.km$cluster[y] <- "Light Proteins"
#}
#if (res.km$cluster[y] == 2){
#res.km$cluster[y] <- "Heavy Proteins"
#}
#if (res.km$cluster[y] == 3){
#res.km$cluster[y] <- "Medium Proteins"
#}}
g <- fviz_cluster(res.km[[x]], data = df,
geom = "point",
xlab = "Global Control Peaks",
ylab = "Global RNase Peaks",
main = title[x],
ggtheme = theme_bw())
plot.cluster.fractions[[x]] <- g + theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
print(plot.cluster.fractions[[x]])
}
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.clustering <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.clustering[x,z] <- 1
}else{shift.clustering[x,z] <- 0}
}}
rownames(shift.clustering) = rownames(parameters.mms)
View(shift.clustering)
#sum(shift.clustering[,1] == 1)
#sum(shift.clustering[,2] == 1)
#sum(shift.clustering[,3] == 1)
text <- "Table_HS_Non_RBP.txt"
csv <- "Table_HS_Non_RBP.csv"
View(text)
View(csv)
View(non.rdeep.text)
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
text <- "Table_HS_Non_RBP.txt"
csv <- "Table_HS_Non_RBP.csv"
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
# CSV-Datei schreiben
write.csv(non.rdeep.text,csv, row.names = FALSE)
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
rdeep <- read.csv('RBP2GO_Human_database_RBPs.csv', header=TRUE, row.names=1, sep = ";")
text <- "Table_HS_Non_RBP.txt"
csv <- "Table_HS_Non_RBP.csv"
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
getwd()
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.kmeans <- data.frame(MVM = rep(NA, length(res.km[[1]]$cluster)),
zt = rep(NA, length(res.km[[1]]$cluster)),
MMS = rep(NA, length(res.km[[1]]$cluster)))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.kmeans[x,z] <- 1
}else{shift.kmeans[x,z] <- 0}
}}
rownames(shift.kmeans) = rownames(parameters.mms)
View(shift.kmeans)
#sum(shift.kmeans[,1] == 1)
#sum(shift.kmeans[,2] == 1)
#sum(shift.kmeans[,3] == 1)
# the proteins identified by our four parameters:
View(shift_mvm)
shift_mvm <- as.data.frame(shift.vector.mvm)
shift_zt <- as.data.frame(shift.vector.zt)
shift_mms <- as.data.frame(shift.vector.mms)
# the proteins identified by our four parameters:
View(shift_mvm)
dim(shift_mvm)
# the proteins identified by kmeans-clustering:
View(shift.kmeans)
# the proteins identified by our four parameters:
View(shift_mvm)
shift_zt
shift_mms
dim(shift_zt)
dim(shift_mms)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(shift_mvm, shift_zt, shift_mms)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(MVM = shift_mvm,
zt = shift_zt,
MMS = shift_mms)
View(shift.parameters)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(MVM = shift_mvm,
zt = shift_zt,
MMS = shift_mms)
View(shift.parameters)
# the proteins identified by kmeans-clustering:
View(shift.kmeans)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(MVM <- shift_mvm,
zt = shift_zt,
MMS = shift_mms)
View(shift.parameters)
# the proteins identified by kmeans-clustering:
View(shift.kmeans)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(MVM <- shift_mvm$shift.vector.mvm,
zt = shift_zt,
MMS = shift_mms)
View(shift.parameters)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(MVM <- shift_mvm,
zt = shift_zt,
MMS = shift_mms)
colnames(shift.parameters) = c("MVM", "zt", "MMS")
rownames(shift.parameters) = rownames(shift.kemans)
View(shift.parameters)
rownames(shift.parameters) = rownames(shift.kemans)
rownames(shift.parameters) = rownames(shift.kmeans)
View(shift.parameters)
counter <- 0
for (i in rownames.zt) {
if (i %in% non.rdeep$Entry_Name) {
counter <- counter + 1
}
}
knitr::opts_chunk$set(echo = TRUE)
comp.parameters <- shift.parameters
# the proteins identified by kmeans-clustering:
comp.kmeans <- shift.kmeans
knitr::opts_chunk$set(echo = TRUE)
rdeep <- read.csv('RBP2GO_Human_database_RBPs.csv', header=TRUE, row.names=1, sep = ";")
knitr::opts_chunk$set(echo = TRUE)
rdeep <- read.csv('RBP2GO_Human_database_RBPs.csv', header=TRUE, row.names=1, sep = ";")
rdeep <- read.csv('RBP2GO_Human_database_RBPs.csv', header=TRUE, row.names=1, sep = ";")
text <- "Table_HS_Non_RBP.txt"
View(text)
csv <- "Table_HS_Non_RBP.csv"
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
# CSV-Datei schreiben
write.csv(non.rdeep.text,csv, row.names = FALSE)
non.rdeep <- read.csv(csv)
View(non.rdeep)
rdeep <- read.csv('RBP2GO_Human_database_RBPs.csv', header=TRUE, row.names=1, sep = ";")
#View(rdeep)
getwd()
text <- "Table_HS_Non_RBP.txt"
csv <- "Table_HS_Non_RBP.csv"
# Textdatei einlesen
non.rdeep.text <- read.table(text, sep = "\t", header = TRUE, quote = "\"")
# CSV-Datei schreiben
write.csv(non.rdeep.text,csv, row.names = FALSE)
non.rdeep <- read.csv(csv)
View(non.rdeep)
# the proteins identified by our four parameters:
shift.parameters <- data.frame(MVM <- shift_mvm, zt = shift_zt, MMS = shift_mms)
colnames(shift.parameters) = c("MVM", "zt", "MMS")
rownames(shift.parameters) = rownames(shift.kmeans)
comp.parameters <- shift.parameters
# the proteins identified by kmeans-clustering:
comp.kmeans <- shift.kmeans
View(rdeep)
View(non.rdeep$Entry_Name)
View(shift_MVM)
shift_mvm <- as.data.frame(shift.vector.mvm)
shift_zt <- as.data.frame(shift.vector.zt)
shift_mms <- as.data.frame(shift.vector.mms)
View(shift_MVM)
View(shift_mvm)
# the proteins identified by our four parameters:
rownames(shift_mvm) = rownames(parameters.mms)
rownames(shift_zt) = rownames(parameters.mms)
rownames(shift_mms) = rownames(parameters.mms)
mvm.parameters <- which(shift_mvm ==1)
mvm.parameters
names(mvm.parameters)
View(shift_mvm)
mvm.parameters <- which(shift_mvm ==1)
which(shift_mvm ==1)
row.names(which(shift_mvm ==1))
row.names(which(shift_mvm ==1))
names.mvm.parameters <- row.names(which(shift_mvm ==1))
names.mvm.parameters
names.mvm.parameters <- row.names(shift_mvm ==1)
names.mvm.parameters
names.mvm.parameters <- row.names(shift_mvm ==1)
names.zt.parameters <- row.names(shift_zt ==1)
names.mms.parameters <- row.names(shift_mms ==1)
names.mvm.parameters <- row.names(shift.kmeans[,1] ==1)
View(shift.kmeans[,1])
View(shift.kmeans)
View(shift.kmeans)
names.mvm.kmeans <- row.names(shift.kmeans[,1] ==1)
sum(names.mvm.kmeans)
(names.mvm.kmeans)
names.mvm.parameters <- row.names(shift_mvm ==1)
names.zt.parameters <- row.names(shift_zt ==1)
names.mms.parameters <- row.names(shift_mms ==1)
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.kmeans <- list(rep(NA, length(res.km[[1]]$cluster)),
rep(NA, length(res.km[[1]]$cluster)),
rep(NA, length(res.km[[1]]$cluster)))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.kmeans[[z]][x] <- 1
}else{shift.kmeans[[z]][x] <- 0}
}}
shift.kmeans <- list(data.frame(rep(NA, length(res.km[[1]]$cluster))),
data.frame(rep(NA, length(res.km[[1]]$cluster))),
data.frame(rep(NA, length(res.km[[1]]$cluster))))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.kmeans[[z]][x] <- 1
}else{shift.kmeans[[z]][x] <- 0}
}}
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x,1] == cluster.nr[z]){
shift.kmeans[[z]][x,1] <- 1
}else{shift.kmeans[[z]][x,1] <- 0}
}}
shift.kmeans <- list(as.data.frame(rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(rep(NA, length(res.km[[1]]$cluster))))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.kmeans[[z]][x] <- 1
}else{shift.kmeans[[z]][x] <- 0}
}}
shift.kmeans <- list(as.data.frame(rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(rep(NA, length(res.km[[1]]$cluster))))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x,1] == cluster.nr[z]){
shift.kmeans[[z]][x,1] <- 1
}else{shift.kmeans[[z]][x,1] <- 0}
}}
View(shift.kmeans[[1]])
View(shift.kmeans[[1]][1,1])
View(shift.kmeans[[1]][10,1])
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.kmeans[[z]][x,1] <- 1
}else{shift.kmeans[[z]][x,1] <- 0}
}}
View(shift.kmeans[[1]])
for(y in 1:3){rownames(shift.kmeans[[y]]) = rownames(parameters.mms)}
View(shift.kmeans[[1]])
View(shift.kmeans[[2]])
View(shift.kmeans[[3]])
shift.kmeans <- list(as.data.frame(MVM = rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(zt = rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(MMS = rep(NA, length(res.km[[1]]$cluster))))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.kmeans[[z]][x,1] <- 1
}else{shift.kmeans[[z]][x,1] <- 0}
}}
shift.kmeans <- list(as.data.frame(MVM = rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(zt = rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(MMS = rep(NA, length(res.km[[1]]$cluster))))
shift.kmeans <- list(as.data.frame(rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(rep(NA, length(res.km[[1]]$cluster))))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.kmeans[[z]][x,1] <- 1
}else{shift.kmeans[[z]][x,1] <- 0}
}}
colnames <- c("MVM", "zt", "MMS")
for(y in 1:3){
rownames(shift.kmeans[[y]]) = rownames(parameters.mms)
colnames(shift.kmeans[[y]]) = colnames[y]
}
View(shift.kmeans[[3]])
View(shift.kmeans[[2]])
View(shift.kmeans[[1]])
View(shift.kmeans)
View(shift.kmeans[[1]])
View(shift.kmeans[[2]])
#View(shift.kmeans)
sum(shift.kmeans[[1]][,1] == 1)
sum(shift.kmeans[[2]][,1] == 1)
sum(shift.kmeans[[3]][,1] == 1)
cluster.nr.mvm <- 2
cluster.nr.zt <- 3
cluster.nr.mms <- 4
cluster.nr <- c(cluster.nr.mvm, cluster.nr.zt, cluster.nr.mms)
shift.kmeans <- list(as.data.frame(rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(rep(NA, length(res.km[[1]]$cluster))),
as.data.frame(rep(NA, length(res.km[[1]]$cluster))))
for(z in 1:3){
for (x in 1:length(res.km[[z]]$cluster)){
if ((res.km[[z]]$cluster)[x] == cluster.nr[z]){
shift.kmeans[[z]][x,1] <- 1
}else{shift.kmeans[[z]][x,1] <- 0}
}}
colnames <- c("MVM", "zt", "MMS")
for(y in 1:3){
rownames(shift.kmeans[[y]]) = rownames(parameters.mms)
colnames(shift.kmeans[[y]]) = colnames[y]
}
#View(shift.kmeans)
#sum(shift.kmeans[[1]][,1] == 1)
#sum(shift.kmeans[[2]][,1] == 1)
#sum(shift.kmeans[[3]][,1] == 1)
shift_mvm <- as.data.frame(shift.vector.mvm)
shift_zt <- as.data.frame(shift.vector.zt)
shift_mms <- as.data.frame(shift.vector.mms)
# the proteins identified by our four parameters:
comp.mvm.parameters <- shift_mvm
View(comp.mvm.parameters)
# the proteins identified by kmeans-clustering:
comp.mvm.kmeans <- shift.kmeans[[1]]
comp.zt.kmeans <- shift.kmeans[[2]]
View(comp.mvm.kmeans)
names.mvm.kmeans <- row.names(comp.mvm.kmeans ==1)
names.zt.kmeans <- row.names(comp.zt.kmeans ==1)
names.mms.kmeans <- row.names(comp.mms.kmeans ==1)
# the proteins identified by kmeans-clustering:
comp.mvm.kmeans <- shift.kmeans[[1]]
comp.zt.kmeans <- shift.kmeans[[2]]
comp.mms.kmeans <- shift.kmeans[[3]]
names.mvm.kmeans <- row.names(comp.mvm.kmeans ==1)
names.zt.kmeans <- row.names(comp.zt.kmeans ==1)
names.mms.kmeans <- row.names(comp.mms.kmeans ==1)
names.mms.kmeans
names.parameters <- list(names.mvm.parameters, names.zt.parameters, names.mms.parameters)
View(names.parameters)
sum(names.mvm.parameters)
length(names.mvm.parameters)
sum(comp.mvm.parameters == 1)
sum(row.names(comp.mvm.parameters == 1))
length(row.names(comp.mvm.parameters == 1))
row.names(comp.mvm.parameters == 1)
sum(comp.mvm.parameters == 1)
(comp.mvm.parameters == 1)
names.mvm.kmeans
is.data.frame(comp.mvm.parameters)
names.mvm.parameters <- row.names(which(comp.mvm.parameters == 1))
length(names.mvm.parameters)
row.names(which(comp.mvm.parameters == 1))
row.names(which(comp.mvm.parameters == 1))
print(row.names(which(comp.mvm.parameters == 1)))
print(row.names((comp.mvm.parameters == 1)))
which(((comp.mvm.parameters == 1)))
print(row.names(which(comp.mvm.parameters[,1] == 1)))
View(comp.mvm.parameters)
colnames(comp.mvm.parameters) = 1
colnames(comp.zt.parameters) = 1
# the proteins identified by our four parameters:
comp.mvm.parameters <- shift_mvm
comp.zt.parameters <- shift_zt
comp.mms.parameters <- shift_mms
rownames(comp.mvm.parameters) = rownames(parameters.mms)
rownames(comp.zt.parameters) = rownames(parameters.mms)
rownames(comp.mms.parameters) = rownames(parameters.mms)
colnames(comp.mvm.parameters) = 1
colnames(comp.mms.parameters) = 1
View(comp.mvm.parameters)
names.mvm.parameters <- row.names(comp.mvm.parameters[comp.mvm.parameters$1 == 1,])
colnames(comp.mvm.parameters) = mvm
colnames(comp.zt.parameters) = zt
colnames(comp.mms.parameters) = mms
colnames(comp.mvm.parameters) = "mvm"
colnames(comp.zt.parameters) = "zt"
colnames(comp.mms.parameters) = "mms"
names.mvm.parameters <- row.names(comp.mvm.parameters[comp.mvm.parameters$mvm == 1,])
length(names.mvm.parameters)
names.mvm.parameters <- which(comp.mvm.parameters[comp.mvm.parameters$mvm == 1,])
names.mvm.parameters <- rownames(comp.mvm.parameters[comp.mvm.parameters$mvm == 1,])
length(names.mvm.parameters)
View(comp.mvm.parameters)
names.mvm.parameters <- row.names(comp.mvm.parameters[comp.mvm.parameters$mvm == 1,])
length(names.mvm.parameters)
names.mvm.parameters <- row.names(comp.mvm.parameters[as.numeric(comp.mvm.parameters$mvm) == 1,])
length(names.mvm.parameters)
indices.mvm.parameters <- which(names.mvm.parameters ==1)
length(indices.mvm.parameters)
# the proteins identified by our four parameters:
comp.mvm.parameters <- shift_mvm
comp.mms.parameters <- shift_mms
rownames(comp.mvm.parameters) = rownames(parameters.mms)
rownames(comp.zt.parameters) = rownames(parameters.mms)
rownames(comp.mms.parameters) = rownames(parameters.mms)
colnames(comp.mvm.parameters) = "mvm"
colnames(comp.zt.parameters) = "zt"
colnames(comp.mms.parameters) = "mms"
indices.mvm.parameters <- which(comp.mvm.parameters ==1)
length(indices.mvm.parameters)
print(summary(model_mms_all))
names.mvm.parameters <- row.names(comp.mvm.parameters[indices.mvm.parameters,])
length(names.mvm.parameters)
names.mvm.parameters <- row.names(comp.mvm.parameters[indices.mvm.parameters,])
length(names.mvm.parameters)
names.mvm.parameters <- rownames(comp.mvm.parameters[indices.mvm.parameters,])
length(names.mvm.parameters)
names.mvm.parameters <- rownames(comp.mvm.parameters[as.numeric(indices.mvm.parameters),])
length(names.mvm.parameters)
length(indices.mvm.parameters)
print(indices.mvm.parameters)
is.vector(indices.mvm.parameters)
names.mvm.parameters <- rownames(comp.mvm.parameters)[which(indices.mvm.parameters)]
names.mvm.parameters <- rownames(comp.mvm.parameters)[indices.mvm.parameters]
length(names.mvm.parameters)
names.mvm.parameters <- rownames(comp.mvm.parameters)[which(comp.mvm.parameters ==1)]
length(names.mvm.parameters)
# the proteins identified by our four parameters:
comp.mvm.parameters <- shift_mvm
comp.zt.parameters <- shift_zt
comp.mms.parameters <- shift_mms
rownames(comp.mvm.parameters) = rownames(parameters.mms)
rownames(comp.zt.parameters) = rownames(parameters.mms)
rownames(comp.mms.parameters) = rownames(parameters.mms)
names.mvm.parameters <- rownames(comp.mvm.parameters)[which(comp.mvm.parameters ==1)]
names.zt.parameters <- rownames(comp.zt.parameters)[which(comp.zt.parameters ==1)]
names.mms.parameters <- rownames(comp.mms.parameters)[which(comp.mms.parameters ==1)]
length(names.mvm.parameters)
length(names.mvm.parameters)
length(names.zt.parameters)
length(names.mms.parameters)
# the proteins identified by kmeans-clustering:
comp.mvm.kmeans <- shift.kmeans[[1]]
comp.mms.kmeans <- shift.kmeans[[3]]
names.mvm.kmeans <- rownames(comp.mvm.kmeans)[which(comp.mvm.kmeans ==1)]
names.zt.kmeans <- rownames(comp.zt.kmeans)[which(comp.zt.kmeans ==1)]
names.mms.kmeans <- rownames(comp.mms.kmeans)[which(comp.mms.kmeans ==1)]
length(names.mvm.kmeans)
