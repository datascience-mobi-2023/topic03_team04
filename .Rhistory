knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
MS_Table <- read.delim('https://www.dropbox.com/s/vm3lxljjm9chau8/RDeeP_A549_NS.csv?dl=1', header=TRUE, row.names=1, sep = ";")
View(MS_Table)
dim(MS_Table)
class(MS_Table)
#summary(MS_Table)
anyNA(MS_Table)
MS_Table <- read.delim('https://www.dropbox.com/s/vm3lxljjm9chau8/RDeeP_A549_NS.csv?dl=1', header=TRUE, row.names=1, sep = ";")
View(MS_Table)
dim(MS_Table)
class(MS_Table)
#summary(MS_Table)
anyNA(MS_Table)
test=c(T,T,T)
sum(test)
anyNA(MS_Table)
MS_Table <- read.delim('https://www.dropbox.com/s/vm3lxljjm9chau8/RDeeP_A549_NS.csv?dl=1', header=TRUE, row.names=1, sep = ";")
anyNA(MS_Table)
is.numeric(MS_Table)
anyNA(MS_Table)
sum(apply(MS_Table, 1, is.numeric)) == nrow(MS_Table)
sum(apply(MS_Table, 1, anyNA)) == 0
sum(apply(MS_Table, 1, anyNA)) == 0
is.NA(MS_Table)
sum(apply(MS_Table, 1, anyNA)) == 0
is.na(MS_Table)
sum(apply(MS_Table, 1, anyNA)) == 0
T %in% MS_Table
sum(apply(MS_Table, 1, anyNA)) == 0
sum(apply(MS_Table, 1, anyNA)) == 0
sum(is.na(MS_Table)) == 0
min(MS_Table)
min(MS_Table)
apply(MS_Table,1,sum)
min(MS_Table)
apply(MS_Table,1,sum)==0
min(MS_Table)
sum(apply(MS_Table,1,sum)==0)
min(MS_Table)
sum(sapply(MS_Table,1,sum)==0)
min(MS_Table)
sum(apply(MS_Table,1,sum)==0)
min(MS_Table)
sum(apply(MS_Table,1,sum)==0)
class(apply(MS_Table,1,sum)
min(MS_Table)
sum(apply(MS_Table,1,sum)==0)
class(apply(MS_Table,1,sum))
min(MS_Table)
sum(apply(MS_Table,1,sum)==0)
summary(apply(MS_Table,1,sum))
min(MS_Table)
sum(apply(MS_Table,1,sum)==0)
dim(MS_Table)
head(rownames(MS_Table))
head(colnames(MS_Table))
summary(MS_Table)
dim(MS_Table)
head(rownames(MS_Table))
head(colnames(MS_Table))
colnames(MS_Table)
MS_Table_reordered <- MS_Table[, c(
paste0("Fraction", 1:25, "_Ctrl_Rep1"),
paste0("Fraction", 1:25, "_Ctrl_Rep2"),
paste0("Fraction", 1:25, "_Ctrl_Rep3"),
paste0("Fraction", 1:25, "_RNase_Rep1"),
paste0("Fraction", 1:25, "_RNase_Rep2"),
paste0("Fraction", 1:25, "_RNase_Rep3")
)]
MS_Table_reordered <- MS_Table[, c(
paste0("Fraction", 1:25, "_Ctrl_Rep1"),
paste0("Fraction", 1:25, "_Ctrl_Rep2"),
paste0("Fraction", 1:25, "_Ctrl_Rep3"),
paste0("Fraction", 1:25, "_RNase_Rep1"),
paste0("Fraction", 1:25, "_RNase_Rep2"),
paste0("Fraction", 1:25, "_RNase_Rep3")
)]
View(MS_Table_reordered)
MS_Table_reordered <- MS_Table[, c(
paste0("Fraction", 1:25, "_Ctrl_Rep1"),
paste0("Fraction", 1:25, "_Ctrl_Rep2"),
paste0("Fraction", 1:25, "_Ctrl_Rep3"),
paste0("Fraction", 1:25, "_RNase_Rep1"),
paste0("Fraction", 1:25, "_RNase_Rep2"),
paste0("Fraction", 1:25, "_RNase_Rep3")
)]
# View(MS_Table_reordered)
sum(apply(MS_Table_reordered, 1, is.numeric)) == nrow(MS_Table)
MS_Table_Ctrl <-MS_Table_reordered[,1:75]
View(MS_Table_reordered)
MS_Table_Ctrl <-MS_Table_reordered[,1:75]
View(MS_Table_Ctrl)
MS_Table_Ctrl <-MS_Table_reordered[,1:75]
#View(MS_Table_Ctrl)
MS_Table_RNase <-MS_Table_reordered[,76:150]
View(MS_Table_RNase)
dim(MS_Table)
head(rownames(MS_Table))
head(colnames(MS_Table))
dim(MS_Table)
head(rownames(MS_Table))
head(colnames(MS_Table))
MS_Table_Ctrl_rep1 <-MS_Table_reordered[,1:25]
MS_Table_Ctrl_rep2 <-MS_Table_reordered[,26:50]
MS_Table_Ctrl_rep3 <-MS_Table_reordered[,51:75]
MS_Table_RNase_rep1 <-MS_Table_reordered[,76:100]
MS_Table_RNase_rep2 <-MS_Table_reordered[,101:125]
MS_Table_RNase_rep3 <-MS_Table_reordered[,126:150]
mean(MS_Table_Ctrl_rep1)
MS_Table_reordered <- MS_Table[, c(
paste0("Fraction", 1:25, "_Ctrl_Rep1"),
paste0("Fraction", 1:25, "_Ctrl_Rep2"),
paste0("Fraction", 1:25, "_Ctrl_Rep3"),
paste0("Fraction", 1:25, "_RNase_Rep1"),
paste0("Fraction", 1:25, "_RNase_Rep2"),
paste0("Fraction", 1:25, "_RNase_Rep3")
)]
# View(MS_Table_reordered)
sum(apply(MS_Table_reordered, 1, is.numeric)) == nrow(MS_Table)
MS_Table_reordered <- MS_Table[, c(
paste0("Fraction", 1:25, "_Ctrl_Rep1"),
paste0("Fraction", 1:25, "_Ctrl_Rep2"),
paste0("Fraction", 1:25, "_Ctrl_Rep3"),
paste0("Fraction", 1:25, "_RNase_Rep1"),
paste0("Fraction", 1:25, "_RNase_Rep2"),
paste0("Fraction", 1:25, "_RNase_Rep3")
)]
# View(MS_Table_reordered)
sum(apply(MS_Table_reordered, 2, is.numeric)) == ncol(MS_Table)
summary(MS_Table_Ctrl_rep1)
mean(MS_Table_Ctrl_rep1,1)
mean(1,MS_Table_Ctrl_rep1)
rowMeans(MS_Table_Ctrl_rep1)
#rowMeans(MS_Table_Ctrl_rep1)
sdMeans(MS_Table_Ctrl_rep1)
#rowMeans(MS_Table_Ctrl_rep1)
rowSds(MS_Table_Ctrl_rep1)
#rowMeans(MS_Table_Ctrl_rep1)
apply(MS_Table_Ctrl_rep1,1,sd)
#rowMeans(MS_Table_Ctrl_rep1)
#apply(MS_Table_Ctrl_rep1,1,sd)
#rowMeans(MS_Table_Ctrl_rep1)
#apply(MS_Table_Ctrl_rep1,1,sd)
MS_Table_Ctrl_rep1_normalized <- apply(MS_Table_Ctrl_rep1,1, function(x)(x - mean(x)) / sd(x))
#rowMeans(MS_Table_Ctrl_rep1)
#apply(MS_Table_Ctrl_rep1,1,sd)
MS_Table_Ctrl_rep1_normalized <- apply(MS_Table_Ctrl_rep1,1, function(x)(x - mean(x)) / sd(x))
MS_Table_Ctrl_rep1_normalized
#rowMeans(MS_Table_Ctrl_rep1)
#apply(MS_Table_Ctrl_rep1,1,sd)
MS_Table_Ctrl_rep1_normalized <- apply(MS_Table_Ctrl_rep1,1, function(x)(x - mean(x)) / sd(x))
View(MS_Table_Ctrl_rep1_normalized)
#rowMeans(MS_Table_Ctrl_rep1)
#apply(MS_Table_Ctrl_rep1,1,sd)
MS_Table_Ctrl_rep1_normalized <- apply(t(MS_Table_Ctrl_rep1),1, function(x)(x - mean(x)) / sd(x))
View(MS_Table_Ctrl_rep1_normalized)
MS_Table_Ctrl_rep1 <-MS_Table_reordered[,1:25]
View(MS_Table_Ctrl_rep1)
MS_Table_Ctrl_rep2 <-MS_Table_reordered[,26:50]
MS_Table_Ctrl_rep3 <-MS_Table_reordered[,51:75]
MS_Table_RNase_rep1 <-MS_Table_reordered[,76:100]
MS_Table_RNase_rep2 <-MS_Table_reordered[,101:125]
MS_Table_RNase_rep3 <-MS_Table_reordered[,126:150]
#rowMeans(MS_Table_Ctrl_rep1)
#apply(MS_Table_Ctrl_rep1,1,sd)
MS_Table_Ctrl_rep1_normalized <- sapply(t(MS_Table_Ctrl_rep1),1, function(x)(x - mean(x)) / sd(x))
knitr::opts_chunk$set(echo = TRUE)
tinytex::install_tinytex()
#rowMeans(MS_Table_Ctrl_rep1)
#apply(MS_Table_Ctrl_rep1,1,sd)
MS_Table_Ctrl_rep1_normalized <- apply(t(MS_Table_Ctrl_rep1),1, function(x)(x - mean(x)) / sd(x))
View(MS_Table_Ctrl_rep1_normalized)
row_means <- rowMeans(MS_Table_Ctrl_rep1)
row_sds <- apply(MS_Table_Ctrl_rep1, 1, sd)
MS_Table_Ctrl_rep1_normalized <- t(apply(MS_Table_Ctrl_rep1, 1, function(x)(x - row_means) / row_sds))
MS_Table_Ctrl_rep1_normalized <- t(apply(MS_Table_Ctrl_rep1, 1, function(x) (x - mean(x))))
MS_Table_Ctrl_rep1_normalized <- t(apply(MS_Table_Ctrl_rep1, 1, function(x) (x - mean(x))))
View(MS_Table_Ctrl_rep1_normalized)
MS_Table_reordered <- MS_Table[, c(
paste0("Fraction", 1:25, "_Ctrl_Rep1"),
paste0("Fraction", 1:25, "_Ctrl_Rep2"),
paste0("Fraction", 1:25, "_Ctrl_Rep3"),
paste0("Fraction", 1:25, "_RNase_Rep1"),
paste0("Fraction", 1:25, "_RNase_Rep2"),
paste0("Fraction", 1:25, "_RNase_Rep3")
)]
View(MS_Table_reordered)
sum(apply(MS_Table_reordered, 2, is.numeric)) == ncol(MS_Table)
MS_Table_Ctrl_rep1_normalized <- t(apply(MS_Table_Ctrl_rep1, 1, function(x) x - mean(x)))
View(MS_Table_Ctrl_rep1_normalized)
MS_Table_Ctrl_rep1_normalized <- t(apply(MS_Table_Ctrl_rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
return(normalized)
}))
View(MS_Table_Ctrl_rep1_normalized)
knitr::opts_chunk$set(echo = TRUE)
# number of rows
num_rows <- nrow(MS_Table_Ctrl_rep1)
# create a vector
correlations <- numeric(num_rows)
for (i in 1:num_rows) {
# correlation between same rows
correlation <- cor(MS_Table_Ctrl_rep1[i, ], MS_Table_Ctrl_rep2[i, ], method = "pearson")
#save correlation in the vector
correlations[i] <- correlation
}
dim(MS_Table_Ctrl_rep1)
dim(MS_Table_Ctrl_rep2)
colnames(MS_Table_Ctrl_rep1) colnames(MS_Table_Ctrl_rep2)
colnames(MS_Table_Ctrl_rep1) colnames(MS_Table_Ctrl_rep2)
colnames(MS_Table_Ctrl_rep1) colnames(MS_Table_Ctrl_rep2)
colnames(MS_Table_Ctrl_rep2)
colnames(MS_Table_Ctrl_rep2)
colnames(MS_Table_Ctrl_rep1)
# Anzahl der Zeilen in den Dataframes ermitteln
num_rows <- nrow(MS_Table_Ctrl_rep1)
# Vektor für die Korrelationen initialisieren
correlations <- numeric(num_rows)
# Schleife über die Zeilen
for (i in 1:num_rows) {
# Zeile i aus MS_Table_Ctrl_rep1 und MS_Table_Ctrl_rep2 extrahieren
row1 <- MS_Table_Ctrl_rep1[i, ]
row2 <- MS_Table_Ctrl_rep2[i, ]
# Korrelation zwischen den Zeilen berechnen
correlation <- cor(row1, row2, method = "pearson")
# Korrelation in den Vektor speichern
correlations[i] <- correlation
}
# Anzahl der Zeilen in den Dataframes ermitteln
num_rows <- min(nrow(MS_Table_Ctrl_rep1), nrow(MS_Table_Ctrl_rep2))
# Vektor für die Korrelationen initialisieren
correlations <- numeric(num_rows)
# Schleife über die Zeilen
for (i in 1:num_rows) {
# Zeile i aus MS_Table_Ctrl_rep1 und MS_Table_Ctrl_rep2 extrahieren
row1 <- MS_Table_Ctrl_rep1[i, ]
row2 <- MS_Table_Ctrl_rep2[i, ]
# Korrelation zwischen den Zeilen berechnen
correlation <- cor(row1, row2, method = "pearson")
# Korrelation in den Vektor speichern
correlations[i] <- correlation
}
# Anzahl der Zeilen in den Dataframes ermitteln
num_rows <- min(nrow(MS_Table_Ctrl_rep1), nrow(MS_Table_Ctrl_rep2))
# Vektor für die Korrelationen initialisieren
correlations <- numeric(num_rows)
# Schleife über die Zeilen
for (i in 1:num_rows) {
# Zeile i aus MS_Table_Ctrl_rep1 und MS_Table_Ctrl_rep2 extrahieren
row1 <- MS_Table_Ctrl_rep1[i, ]
row2 <- MS_Table_Ctrl_rep2[i, ]
# Korrelation zwischen den Zeilen berechnen
correlation <- cor(row1, row2, method = "pearson")
# Korrelation in den Vektor speichern
correlations[i] <- correlation
}
# Überprüfen der Anzahl der Zeilen in den Dataframes
if (nrow(MS_Table_Ctrl_rep1) != nrow(MS_Table_Ctrl_rep2)) {
stop("Die Anzahl der Zeilen in MS_Table_Ctrl_rep1 und MS_Table_Ctrl_rep2 stimmt nicht überein.")
}
# Anzahl der Zeilen in den Dataframes ermitteln
num_rows <- nrow(MS_Table_Ctrl_rep1)
# Vektor für die Korrelationen initialisieren
correlations <- numeric(num_rows)
# Schleife über die Zeilen
for (i in 1:num_rows) {
# Zeile i aus MS_Table_Ctrl_rep1 und MS_Table_Ctrl_rep2 extrahieren
row1 <- MS_Table_Ctrl_rep1[i, ]
row2 <- MS_Table_Ctrl_rep2[i, ]
# Korrelation zwischen den Zeilen berechnen
correlation <- cor(row1, row2, method = "pearson")
# Korrelation in den Vektor speichern
correlations[i] <- correlation
}
# Ergebnis anzeigen
correlations
# Überprüfen der Anzahl der Zeilen in den Dataframes
if (nrow(MS_Table_Ctrl_rep1) != nrow(MS_Table_Ctrl_rep2)) {
stop("Die Anzahl der Zeilen in MS_Table_Ctrl_rep1 und MS_Table_Ctrl_rep2 stimmt nicht überein.")
}
# Anzahl der Zeilen in den Dataframes ermitteln
num_rows <- nrow(MS_Table_Ctrl_rep1)
# Vektor für die Korrelationen initialisieren
correlations <- numeric(num_rows)
# Schleife über die Zeilen
for (i in 1:num_rows) {
# Zeile i aus MS_Table_Ctrl_rep1 und MS_Table_Ctrl_rep2 extrahieren
row1 <- MS_Table_Ctrl_rep1[i, ]
row2 <- MS_Table_Ctrl_rep2[i, ]
# Korrelation zwischen den Zeilen berechnen
correlation <- cor(row1, row2, method = "pearson")
# Korrelation in den Vektor speichern
correlations[i] <- correlation
}
# Ergebnis anzeigen
correlations
nrow(MS_Table_Ctrl_rep1)
nrow(MS_Table_Ctrl_rep2)
# Index der Zeilen mit ausschließlich 0-Werten ermitteln
zero_rows <- which(rowSums(MS_Table_Ctrl_rep1 == 0) == ncol(MS_Table_Ctrl_rep1))
# Dataframes ohne die betroffenen Zeilen erstellen
MS_Table_Ctrl_rep1_filtered <- MS_Table_Ctrl_rep1[-zero_rows, ]
MS_Table_Ctrl_rep2_filtered <- MS_Table_Ctrl_rep2[-zero_rows, ]
# Anzahl der verbleibenden Zeilen ermitteln
num_rows <- nrow(MS_Table_Ctrl_rep1_filtered)
# Vektor für die Korrelationen initialisieren
correlations <- numeric(num_rows)
# Schleife über die Zeilen
for (i in 1:num_rows) {
# Zeile i aus MS_Table_Ctrl_rep1_filtered und MS_Table_Ctrl_rep2_filtered extrahieren
row1 <- MS_Table_Ctrl_rep1_filtered[i, ]
row2 <- MS_Table_Ctrl_rep2_filtered[i, ]
# Korrelation zwischen den Zeilen berechnen
correlation <- cor(row1, row2, method = "pearson")
# Korrelation in den Vektor speichern
correlations[i] <- correlation
}
# Ergebnis anzeigen
correlations
num_rows <- nrow(MS_Table_Ctrl_rep1)
# Vektor für die Korrelationen initialisieren
correlations <- numeric(num_rows)
for (i in 1:num_rows) {
# Zeile i aus MS_Table_Ctrl_rep1 und MS_Table_Ctrl_rep2 extrahieren
row1 <- MS_Table_Ctrl_rep1[i, ]
row2 <- MS_Table_Ctrl_rep2[i, ]
# Korrelation zwischen den Zeilen berechnen
correlation <- cor(row1, row2, method = "pearson")
# Korrelation in den Vektor speichern
correlations[i] <- correlation
}
correlations
num_rows <- nrow(MS_Table_Ctrl_rep1)
# Vektor für die Korrelationen initialisieren
correlations <- numeric(num_rows)
for (i in 1:num_rows) {
# Zeile i aus MS_Table_Ctrl_rep1 und MS_Table_Ctrl_rep2 extrahieren
row1 <- MS_Table_Ctrl_rep1[i, ]
row2 <- MS_Table_Ctrl_rep2[i, ]
# Korrelation zwischen den Zeilen berechnen
correlation <- cor(row1, row2, use = "pairwise.complete.obs")
# Korrelation in den Vektor speichern
correlations[i] <- correlation
}
correlations
knitr::opts_chunk$set(echo = TRUE)
num_rows <- nrow(MS_Table_Ctrl_rep1)
# create vector
correlations <- numeric(num_rows)
for (i in 1:num_rows) {
# select row i from MS_Table_Ctrl_rep1 and MS_Table_Ctrl_rep2
row1 <- MS_Table_Ctrl_rep1[i, ]
row2 <- MS_Table_Ctrl_rep2[i, ]
correlation <- cor(row1, row2, method = "spearman")
correlations[i] <- correlation
}
# show result
correlations
#Achtung: funktioniert nicht, aber ich weiß nicht warum Fehlermeldung auftritt
num_rows <- nrow(MS_Table_Ctrl_rep1)
# create vector
correlations <- numeric(num_rows)
for (i in 1:num_rows) {
# select row i from MS_Table_Ctrl_rep1 and MS_Table_Ctrl_rep2
row1 <- MS_Table_Ctrl_rep1[i, ]
row2 <- MS_Table_Ctrl_rep2[i, ]
correlation <- cor(row1, row2, method = "pearson")
correlations[i] <- correlation
}
num_rows
type(num_rows)
for (i in range(1:num_rows) {
for (i in range[1:num_rows]) {
# select row i from MS_Table_Ctrl_rep1 and MS_Table_Ctrl_rep2
row1 <- MS_Table_Ctrl_rep1[i, ]
row2 <- MS_Table_Ctrl_rep2[i, ]
correlation <- cor(row1, row2, method = "pearson")
correlations[i] <- correlation
}
knitr::opts_chunk$set(echo = TRUE)
num_rows <- nrow(MS_Table_Ctrl_rep1)
# Vektor für die Korrelationen initialisieren
correlations <- numeric(num_rows)
for (i in 1:num_rows) {
# Zeile i aus MS_Table_Ctrl_rep1 und MS_Table_Ctrl_rep2 extrahieren und als numerischen Vektor speichern
row_rep1 <- as.numeric(MS_Table_Ctrl_rep1[i, ])
row_rep2 <- as.numeric(MS_Table_Ctrl_rep2[i, ])
# Korrelation zwischen den Zeilen berechnen
correlation <- cor(row_rep1, row_rep2, method = "pearson")
# Korrelation in den Vektor speichern
correlations[i] <- correlation
}
# Ergebnis anzeigen
correlations
num_rows <- nrow(MS_Table_Ctrl_rep1)
# create vector
correlations <- numeric(num_rows)
for (i in 1:num_rows) {
# select row i from MS_Table_Ctrl_rep1 and MS_Table_Ctrl_rep2
row_rep1 <- as.numeric(MS_Table_Ctrl_rep1[i, ])
# Der Fehler war, dass die Rows nicht als Vector, sondern als Dataframe eingelesen wurden -> Sobald der Type richtig ist, kann er auch die Correlation ausrechnen.
# Als weiterer Hinweis jedoch: Die Operation könnte etwas länger dauern, wenn ihrs für alle dfs macht.
row_rep2 <- as.numeric(MS_Table_Ctrl_rep2[i, ])
correlation <- cor(row_rep1, row_rep2, method = "pearson")
correlations[i] <- correlation
}
# show result
correlations
#Achtung: funktioniert nicht, aber ich weiß nicht warum Fehlermeldung auftritt
# MS_Table_Ctrl_rep1
MS_Table_Ctrl_rep1_normalized <- t(apply(MS_Table_Ctrl_rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# View(MS_Table_Ctrl_rep1_normalized)
# MS_Table_Ctrl_rep2
MS_Table_Ctrl_rep2_normalized <- t(apply(MS_Table_Ctrl_rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# MS_Table_Ctrl_rep3
MS_Table_Ctrl_rep3_normalized <- t(apply(MS_Table_Ctrl_rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# MS_Table_RNase_rep1
MS_Table_RNase_rep1_normalized <- t(apply(MS_Table_RNase_rep1, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# MS_Table_RNase_rep2
MS_Table_RNase_rep2_normalized <- t(apply(MS_Table_RNase_rep2, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# MS_Table_RNase_rep3
MS_Table_RNase_rep3_normalized <- t(apply(MS_Table_RNase_rep3, 1, function(x) {
normalized <- x - mean(x)
normalized[normalized < 0] <- 0
scaled <- normalized * (100 / sum(normalized))
return(scaled)
}))
# View(MS_Table_Ctrl_rep1_normalized)
# View(MS_Table_Ctrl_rep1_normalized)
View(MS_Table_Ctrl_rep1_normalized)
knitr::opts_chunk$set(echo = TRUE)
#MS_Table <- read.csv('RDeep_A549_NS.csv', header=TRUE, row.names=1, sep = ",")
#View(MS_Table)
MS_Table <- read.delim('https://www.dropbox.com/s/vm3lxljjm9chau8/RDeeP_A549_NS.csv?dl=1', header=TRUE, row.names=1, sep = ";")
ctrl_z_transformed = t(scale(t(MS_Table_Ctrl)))
RNase_z_transformed = t(scale(t(MS_Table_RNase)))
ctrl1 = ctrl_z_transformed[,1:25]
ctrl2 = ctrl_z_transformed[,26:50]
ctrl3 = ctrl_z_transformed[,51:75]
RNase1 = RNase_z_transformed[,1:25]
RNase2 = RNase_z_transformed[,26:50]
RNase3 = RNase_z_transformed[,51:75]
ctrl_mean = (ctrl1 + ctrl2 + ctrl3)/3
ctrl_rowsums = rowSums(ctrl_mean)
ctrl_mean_normalized = sweep(ctrl_mean, 1, ctrl_rowsums, "/")
View(ctrl_mean)
RNase_mean = (RNase1 + RNase2 + RNase3)/3
View(ctrl1)
test = RNase_mean-ctrl_mean
a = prcomp(test)
w = umap(a$x, search_k = 4)
rowSums(ctrl_mean)
