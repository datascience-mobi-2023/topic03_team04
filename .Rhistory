saveRDS(rnase.zt, file = "Non_synchronized_A549_rnase.zt")
saveRDS(ctrl.mms, file = "Non_synchronized_A549_ctrl.mms")
saveRDS(rnase.mms, file = "Non_synchronized_A549_rnase.mms")
ctrl.mvm <- readRDS("Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("Non_synchronized_A549_rnase.mms")
library(ggplot2)
num_rows <- nrow(rnase.mvm)
plots_rnase.mvm <- list()
for (i in 1:num_rows) {
row_data_rnase <- rnase.mvm[i, ]
if (sum(!is.na(row_data_rnase)) >= 2) {
df <- data.frame(x = 1:length(row_data_rnase), yrnase = as.numeric(row_data_rnase))
p <- ggplot(df, aes(x = x, y = yrnase)) +
geom_line(color = "tomato") +
geom_point(color = "tomato") +
xlab("Fractions") +
ylab("Protein amount")+
labs(title = "RNase MVM")
plots_rnase.mvm[[i]] <- p
} else {
plots_rnase.mvm[[i]] <- NULL
}
}
library(ggplot2)
num_rows <- nrow(ctrl.mvm)
plots_ctrl.mvm <- list()
for (i in 1:num_rows) {
row_data_ctrl <- ctrl.mvm[i, ]
if (sum(!is.na(row_data_ctrl)) >= 2) {
df <- data.frame(x = 1:length(row_data_ctrl), yctrl = as.numeric(row_data_ctrl))
# Erstelle den Plot mit ggplot2
p <- ggplot(df, aes(x = x, y = yctrl)) +
geom_line(color = "skyblue2") +
geom_point(color = "skyblue2") +
xlab("Fractions") +
ylab("Protein amount") +
labs(title = "Control MVM")
plots_ctrl.mvm[[i]] <- p
} else {
plots_ctrl.mvm[[i]] <- NULL
}
}
ctrl.cor <-
cbind(ctrl.cor.rep1.rep2 <-
sapply(seq.int(dim(ctrl.rep1.reprod)[1]), function(x) cor(as.numeric(ctrl.rep1.reprod[x,]), as.numeric(ctrl.rep2.reprod[x,]))),
ctrl.cor.rep2.rep3 <-
sapply(seq.int(dim(ctrl.rep1.reprod)[1]), function(x) cor(as.numeric(ctrl.rep2.reprod[x,]), as.numeric(ctrl.rep3.reprod[x,]))),
ctrl.cor.rep1.rep3 <-
sapply(seq.int(dim(ctrl.rep1.reprod)[1]), function(x) cor(as.numeric(ctrl.rep1.reprod[x,]), as.numeric(ctrl.rep3.reprod[x,]))))
rnase.cor <-
cbind(rnase.cor.rep1.rep2 <-
sapply(seq.int(dim(rnase.rep1.reprod)[1]), function(x) cor(as.numeric(rnase.rep1.reprod[x,]), as.numeric(rnase.rep2.reprod[x,]))),
rnase.cor.rep2.rep3 <-
sapply(seq.int(dim(rnase.rep1.reprod)[1]), function(x) cor(as.numeric(rnase.rep2.reprod[x,]), as.numeric(rnase.rep3.reprod[x,]))),
rnase.cor.rep1.rep3 <-
sapply(seq.int(dim(rnase.rep1.reprod)[1]), function(x) cor(as.numeric(rnase.rep1.reprod[x,]), as.numeric(rnase.rep3.reprod[x,]))))
ctrl.rnase.cor <- cbind(ctrl.cor,rnase.cor)
library(ggplot2)
num_rows <- nrow(ctrl.mms)
names.as.colum <- ctrl.mms
protein.names <- rownames(names.as.colum)
plots_ctrl_rnase.mms <- list()
for (i in 1:num_rows) {
row_data_ctrl <- ctrl.mms[i, ]
row_data_rnase <- rnase.mms[i, ]
if (sum(!is.na(row_data_ctrl)) >= 2) {
df <- data.frame(x = 1:length(row_data_ctrl),yctrl= as.numeric(row_data_ctrl),yrnase= as.numeric(row_data_rnase))
p <- ggplot(df, aes(x = x))+
geom_line(aes(y=yrnase,color="RNASE"))+
geom_point(aes(y=yrnase,color="RNASE"))+
geom_line(aes(y=yctrl, color="CTRL"))+
geom_point(aes(y=yctrl, color="CTRL"))+
xlab("Fractions") +
ylab("Protein amount") +
labs(title = paste("Min Max Scaling -",protein.names[i])) +
scale_color_manual(values = c("RNASE" = "tomato", "CTRL" = "skyblue2"))
plots_ctrl_rnase.mms[[i]] <- p
} else {
plots_ctrl_rnase.mms[[i]] <- NULL
}
}
print(plots_ctrl_rnase.mms[[7]])
print(plots_ctrl_rnase.mms[[9]])
ctrl.mvm <- readRDS("Non_synchronized_A549_ctrl.mvm")
rnase.mvm <- readRDS("Non_synchronized_A549_rnase.mvm")
ctrl.zt <- readRDS("Non_synchronized_A549_ctrl.zt")
rnase.zt <- readRDS("Non_synchronized_A549_rnase.zt")
ctrl.mms <- readRDS("Non_synchronized_A549_ctrl.mms")
rnase.mms <- readRDS("Non_synchronized_A549_rnase.mms")
globalpeak.ctrl.mvm <- apply(ctrl.mvm, 1, function(x){which.max(x)})
globalpeak.value.ctrl.mvm <- apply(ctrl.mvm, 1, function(x){max(x)})
globalpeak.rnase.mvm <- apply(rnase.mvm, 1, function(x){which.max(x)})
globalpeak.value.rnase.mvm <- apply(rnase.mvm, 1, function(x){max(x)})
peakidentif.ctrl.mvm <- ctrl.mvm
peakidentif.rnase.mvm <- rnase.mvm
sd.byrow.ctrl.mvm <- apply(peakidentif.ctrl.mvm, 1, function(x) sd(x[x < 8]))
sd.mean.ctrl.mvm <- mean(sd.byrow.ctrl.mvm)
sd.byrow.rnase.mvm <- apply(peakidentif.rnase.mvm, 1, function(x) sd(x[x < 8]))
sd.mean.rnase.mvm <- mean(sd.byrow.rnase.mvm)
colnames(peakidentif.ctrl.mvm) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.ctrl.mvm)) - 1)
allpeaks.ctrl.mvm <- apply(peakidentif.ctrl.mvm, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.ctrl.mvm]})
peak.values.ctrl.mvm <- lapply(seq_along(allpeaks.ctrl.mvm), function(i) peakidentif.ctrl.mvm[i, allpeaks.ctrl.mvm[[i]]])
localpeaks.ctrl.mvm <- allpeaks.ctrl.mvm
for (i in seq_along(localpeaks.ctrl.mvm)) {localpeaks.ctrl.mvm[[i]] <- localpeaks.ctrl.mvm[[i]][!localpeaks.ctrl.mvm[[i]] %in% globalpeak.ctrl.mvm[[i]]]}
localpeaks.values.ctrl.mvm <- lapply(seq_along(localpeaks.ctrl.mvm), function(i) peakidentif.ctrl.mvm[i, localpeaks.ctrl.mvm[[i]]])
colnames(peakidentif.rnase.mvm) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.rnase.mvm)) - 1)
allpeaks.rnase.mvm <- apply(peakidentif.rnase.mvm, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.rnase.mvm]})
peak.values.rnase.mvm <- lapply(seq_along(allpeaks.rnase.mvm), function(i) peakidentif.rnase.mvm[i, allpeaks.rnase.mvm[[i]]])
localpeaks.rnase.mvm <- allpeaks.rnase.mvm
for (i in seq_along(localpeaks.rnase.mvm)) {localpeaks.rnase.mvm[[i]] <- localpeaks.rnase.mvm[[i]][!localpeaks.rnase.mvm[[i]] %in% globalpeak.rnase.mvm[[i]]]}
localpeaks.values.rnase.mvm <- lapply(seq_along(localpeaks.rnase.mvm), function(i) peakidentif.rnase.mvm[i, localpeaks.rnase.mvm[[i]]])
fraction1.peak.ctrl.mvm <- which(peakidentif.ctrl.mvm[, 1] > peakidentif.ctrl.mvm[, 2] & peakidentif.ctrl.mvm[, 1] > peakidentif.ctrl.mvm[, 3])
# length(fraction1.peak.ctrl.mvm)
fraction25.peak.ctrl.mvm <- which(peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 24] & peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 23] & peakidentif.ctrl.mvm[, 25] + peakidentif.ctrl.mvm[, 24] +peakidentif.ctrl.mvm[, 23] > 10) # wenn der peak am Ende nicht insgesamt 10 überschreitet, ist es relativ unrelevant. Scheinbar fallen viele Proteine am Ende etwas aus.
# length(fraction25.peak.ctrl.mvm)
fraction1.peak.ctrl.mvm <- which(peakidentif.ctrl.mvm[, 1] > peakidentif.ctrl.mvm[, 2] & peakidentif.ctrl.mvm[, 1] > peakidentif.ctrl.mvm[, 3])
# length(fraction1.peak.ctrl.mvm)
fraction25.peak.ctrl.mvm <- which(peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 24] & peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 23] & peakidentif.ctrl.mvm[, 25] + peakidentif.ctrl.mvm[, 24] +peakidentif.ctrl.mvm[, 23] > 10) # wenn der peak am Ende nicht insgesamt 10 überschreitet, ist es relativ unrelevant. Scheinbar fallen viele Proteine am Ende etwas aus.
# length(fraction25.peak.ctrl.mvm)
fraction1.peak.rnase.mvm <- which(peakidentif.rnase.mvm[, 1] > peakidentif.rnase.mvm[, 2] & peakidentif.rnase.mvm[, 1] > peakidentif.rnase.mvm[, 3])
# length(fraction1.peak.rnase.mvm)
fraction25.peak.rnase.mvm <- which(peakidentif.rnase.mvm[, 25] > peakidentif.rnase.mvm[, 24] & peakidentif.rnase.mvm[, 25] > peakidentif.rnase.mvm[, 23] & peakidentif.rnase.mvm[, 25] + peakidentif.rnase.mvm[, 24] + peakidentif.rnase.mvm[, 23] > 10)
# length(fraction25.peak.rnase.mvm)
precipitated.ctrl.mvm <- which(peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 24] & peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 23] & peakidentif.ctrl.mvm[, 25] + peakidentif.ctrl.mvm[, 24] + peakidentif.ctrl.mvm[, 23] == 100)
precipitated.rnase.mvm <- which(peakidentif.rnase.mvm[, 25] > peakidentif.rnase.mvm[, 24] & peakidentif.rnase.mvm[, 25] > peakidentif.rnase.mvm[, 23] & peakidentif.rnase.mvm[, 25] + peakidentif.rnase.mvm[, 24] + peakidentif.rnase.mvm[, 23] == 100)
precipitated.mvm <- unique(c(precipitated.ctrl.mvm,precipitated.rnase.mvm))
precipitated.ctrl.mvm <- which(peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 24] & peakidentif.ctrl.mvm[, 25] > peakidentif.ctrl.mvm[, 23] & peakidentif.ctrl.mvm[, 25] + peakidentif.ctrl.mvm[, 24] + peakidentif.ctrl.mvm[, 23] == 100)
precipitated.rnase.mvm <- which(peakidentif.rnase.mvm[, 25] > peakidentif.rnase.mvm[, 24] & peakidentif.rnase.mvm[, 25] > peakidentif.rnase.mvm[, 23] & peakidentif.rnase.mvm[, 25] + peakidentif.rnase.mvm[, 24] + peakidentif.rnase.mvm[, 23] == 100)
precipitated.mvm <- unique(c(precipitated.ctrl.mvm,precipitated.rnase.mvm))
globalpeak.ctrl.zt <- apply(ctrl.zt, 1, function(x){which.max(x)})
globalpeak.value.ctrl.zt <- apply(ctrl.zt, 1, function(x){max(x)})
globalpeak.rnase.zt <- apply(rnase.zt, 1, function(x){which.max(x)})
globalpeak.value.rnase.zt <- apply(rnase.zt, 1, function(x){max(x)})
peakidentif.ctrl.zt <- ctrl.zt
peakidentif.rnase.zt <- rnase.zt
sd.byrow.ctrl.zt <- apply(peakidentif.ctrl.zt, 1, function(x) sd(x[x < 8]))
sd.mean.ctrl.zt <- mean(sd.byrow.ctrl.zt)
sd.byrow.rnase.zt <- apply(peakidentif.rnase.zt, 1, function(x) sd(x[x < 8]))
sd.mean.rnase.zt <- mean(sd.byrow.rnase.zt)
colnames(peakidentif.ctrl.zt) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.ctrl.zt)) - 1)
allpeaks.ctrl.zt <- apply(peakidentif.ctrl.zt, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.ctrl.zt]})
peak.values.ctrl.zt <- lapply(seq_along(allpeaks.ctrl.zt), function(i) peakidentif.ctrl.zt[i, allpeaks.ctrl.zt[[i]]])
localpeaks.ctrl.zt <- allpeaks.ctrl.zt
for (i in seq_along(localpeaks.ctrl.zt)) {localpeaks.ctrl.zt[[i]] <- localpeaks.ctrl.zt[[i]][!localpeaks.ctrl.zt[[i]] %in% globalpeak.ctrl.zt[[i]]]}
localpeaks.values.ctrl.zt <- lapply(seq_along(localpeaks.ctrl.zt), function(i) peakidentif.ctrl.zt[i, localpeaks.ctrl.zt[[i]]])
colnames(peakidentif.rnase.zt) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.rnase.zt)) - 1)
allpeaks.rnase.zt <- apply(peakidentif.rnase.zt, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.rnase.zt]})
peak.values.rnase.zt <- lapply(seq_along(allpeaks.rnase.zt), function(i) peakidentif.rnase.zt[i, allpeaks.rnase.zt[[i]]])
localpeaks.rnase.zt <- allpeaks.rnase.zt
for (i in seq_along(localpeaks.rnase.zt)) {localpeaks.rnase.zt[[i]] <- localpeaks.rnase.zt[[i]][!localpeaks.rnase.zt[[i]] %in% globalpeak.rnase.zt[[i]]]}
localpeaks.values.rnase.zt <- lapply(seq_along(localpeaks.rnase.zt), function(i) peakidentif.rnase.zt[i, localpeaks.rnase.zt[[i]]])
colnames(peakidentif.rnase.zt) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.rnase.zt)) - 1)
allpeaks.rnase.zt <- apply(peakidentif.rnase.zt, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.rnase.zt]})
peak.values.rnase.zt <- lapply(seq_along(allpeaks.rnase.zt), function(i) peakidentif.rnase.zt[i, allpeaks.rnase.zt[[i]]])
localpeaks.rnase.zt <- allpeaks.rnase.zt
for (i in seq_along(localpeaks.rnase.zt)) {localpeaks.rnase.zt[[i]] <- localpeaks.rnase.zt[[i]][!localpeaks.rnase.zt[[i]] %in% globalpeak.rnase.zt[[i]]]}
localpeaks.values.rnase.zt <- lapply(seq_along(localpeaks.rnase.zt), function(i) peakidentif.rnase.zt[i, localpeaks.rnase.zt[[i]]])
fraction1.peak.ctrl.zt <- which(peakidentif.ctrl.zt[, 1] > peakidentif.ctrl.zt[, 2] & peakidentif.ctrl.zt[, 1] > peakidentif.ctrl.zt[, 3])
# length(fraction1.peak.ctrl.zt)
fraction25.peak.ctrl.zt <- which(peakidentif.ctrl.zt[, 25] > peakidentif.ctrl.zt[, 24] & peakidentif.ctrl.zt[, 25] > peakidentif.ctrl.zt[, 23] & peakidentif.ctrl.zt[, 25] + peakidentif.ctrl.zt[, 24] +peakidentif.ctrl.zt[, 23] > 10) # wenn der peak am Ende nicht insgesamt 10 überschreitet, ist es relativ unrelevant. Scheinbar fallen viele Proteine am Ende etwas aus.
# length(fraction25.peak.ctrl.zt)
fraction1.peak.rnase.zt <- which(peakidentif.rnase.zt[, 1] > peakidentif.rnase.zt[, 2] & peakidentif.rnase.zt[, 1] > peakidentif.rnase.zt[, 3])
# length(fraction1.peak.rnase.zt)
fraction25.peak.rnase.zt <- which(peakidentif.rnase.zt[, 25] > peakidentif.rnase.zt[, 24] & peakidentif.rnase.zt[, 25] > peakidentif.rnase.zt[, 23] & peakidentif.rnase.zt[, 25] + peakidentif.rnase.zt[, 24] + peakidentif.rnase.zt[, 23] > 10)
# length(fraction25.peak.rnase.zt)
precipitated.ctrl.zt <- which(peakidentif.ctrl.zt[, 25] > peakidentif.ctrl.zt[, 24] & peakidentif.ctrl.zt[, 25] > peakidentif.ctrl.zt[, 23] & peakidentif.ctrl.zt[, 25] + peakidentif.ctrl.zt[, 24] + peakidentif.ctrl.zt[, 23] == 100)
precipitated.rnase.zt <- which(peakidentif.rnase.zt[, 25] > peakidentif.rnase.zt[, 24] & peakidentif.rnase.zt[, 25] > peakidentif.rnase.zt[, 23] & peakidentif.rnase.zt[, 25] + peakidentif.rnase.zt[, 24] + peakidentif.rnase.zt[, 23] == 100)
precipitated.zt <- unique(c(precipitated.ctrl.zt,precipitated.rnase.zt))
globalpeak.ctrl.mms <- apply(ctrl.mms, 1, function(x){which.max(x)})
globalpeak.value.ctrl.mms <- apply(ctrl.mms, 1, function(x){max(x)})
globalpeak.rnase.mms <- apply(rnase.mms, 1, function(x){which.max(x)})
globalpeak.value.rnase.mms <- apply(rnase.mms, 1, function(x){max(x)})
peakidentif.ctrl.mms <- ctrl.mms
peakidentif.rnase.mms <- rnase.mms
sd.byrow.ctrl.mms <- apply(peakidentif.ctrl.mms, 1, function(x) sd(x[x < 8]))
sd.mean.ctrl.mms <- mean(sd.byrow.ctrl.mms)
sd.byrow.rnase.mms <- apply(peakidentif.rnase.mms, 1, function(x) sd(x[x < 8]))
sd.mean.rnase.mms <- mean(sd.byrow.rnase.mms)
colnames(peakidentif.ctrl.mms) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.ctrl.mms)) - 1)
allpeaks.ctrl.mms <- apply(peakidentif.ctrl.mms, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.ctrl.mms]})
peak.values.ctrl.mms <- lapply(seq_along(allpeaks.ctrl.mms), function(i) peakidentif.ctrl.mms[i, allpeaks.ctrl.mms[[i]]])
localpeaks.ctrl.mms <- allpeaks.ctrl.mms
for (i in seq_along(localpeaks.ctrl.mms)) {localpeaks.ctrl.mms[[i]] <- localpeaks.ctrl.mms[[i]][!localpeaks.ctrl.mms[[i]] %in% globalpeak.ctrl.mms[[i]]]}
localpeaks.values.ctrl.mms <- lapply(seq_along(localpeaks.ctrl.mms), function(i) peakidentif.ctrl.mms[i, localpeaks.ctrl.mms[[i]]])
colnames(peakidentif.rnase.mms) <- paste0("Rnase_Fraction", seq_along(colnames(peakidentif.rnase.mms)) - 1)
allpeaks.rnase.mms <- apply(peakidentif.rnase.mms, 1,function(x) {
peak_indices <- which(diff(sign(diff(x)))==-2 & x[-c(1,length(x))] > 3) + 1
peak_sd <- sapply(peak_indices, function(i) sd(x[(i-1):(i+1)]))
peak_indices[peak_sd > sd.mean.rnase.mms]})
peak.values.rnase.mms <- lapply(seq_along(allpeaks.rnase.mms), function(i) peakidentif.rnase.mms[i, allpeaks.rnase.mms[[i]]])
localpeaks.rnase.mms <- allpeaks.rnase.mms
for (i in seq_along(localpeaks.rnase.mms)) {localpeaks.rnase.mms[[i]] <- localpeaks.rnase.mms[[i]][!localpeaks.rnase.mms[[i]] %in% globalpeak.rnase.mms[[i]]]}
localpeaks.values.rnase.mms <- lapply(seq_along(localpeaks.rnase.mms), function(i) peakidentif.rnase.mms[i, localpeaks.rnase.mms[[i]]])
fraction1.peak.ctrl.mms <- which(peakidentif.ctrl.mms[, 1] > peakidentif.ctrl.mms[, 2] & peakidentif.ctrl.mms[, 1] > peakidentif.ctrl.mms[, 3])
# length(fraction1.peak.ctrl.mms)
fraction25.peak.ctrl.mms <- which(peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 24] & peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 23] & peakidentif.ctrl.mms[, 25] + peakidentif.ctrl.mms[, 24] +peakidentif.ctrl.mms[, 23] > 10) # wenn der peak am Ende nicht insgesamt 10 überschreitet, ist es relativ unrelevant. Scheinbar fallen viele Proteine am Ende etwas aus.
# length(fraction25.peak.ctrl.mms)
fraction1.peak.rnase.mms <- which(peakidentif.rnase.mms[, 1] > peakidentif.rnase.mms[, 2] & peakidentif.rnase.mms[, 1] > peakidentif.rnase.mms[, 3])
# length(fraction1.peak.rnase.mms)
fraction25.peak.rnase.mms <- which(peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 24] & peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 23] & peakidentif.rnase.mms[, 25] + peakidentif.rnase.mms[, 24] + peakidentif.rnase.mms[, 23] > 10)
# length(fraction25.peak.rnase.mms)
precipitated.ctrl.mms <- which(peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 24] & peakidentif.ctrl.mms[, 25] > peakidentif.ctrl.mms[, 23] & peakidentif.ctrl.mms[, 25] + peakidentif.ctrl.mms[, 24] + peakidentif.ctrl.mms[, 23] == 100)
precipitated.rnase.mms <- which(peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 24] & peakidentif.rnase.mms[, 25] > peakidentif.rnase.mms[, 23] & peakidentif.rnase.mms[, 25] + peakidentif.rnase.mms[, 24] + peakidentif.rnase.mms[, 23] == 100)
precipitated.mms <- unique(c(precipitated.ctrl.mms,precipitated.rnase.mms))
View(precipitated.ctrl.mvm)
precipitated.ctrl.mvm
View(precipitated.ctrl.mms)
View(precipitated.ctrl.zt)
# mvm
saveRDS(globalpeak.ctrl.mvm, file = "Non_synchronized_A549_globalpeak.ctrl.mvm")
saveRDS(globalpeak.value.ctrl.mvm, file = "Non_synchronized_A549_globalpeak.value.ctrl.mvm")
saveRDS(globalpeak.rnase.mvm, file = "Non_synchronized_A549_globalpeak.rnase.mvm")
saveRDS(globalpeak.value.rnase.mvm, file = "Non_synchronized_A549_globalpeak.value.rnase.mvm")
saveRDS(localpeaks.ctrl.mvm, file = "Non_synchronized_A549_localpeaks.ctrl.mvm")
saveRDS(localpeaks.values.ctrl.mvm, file = "Non_synchronized_A549_localpeaks.values.ctrl.mvm")
saveRDS(localpeaks.rnase.mvm, file = "Non_synchronized_A549_localpeaks.rnase.mvm")
saveRDS(localpeaks.values.rnase.mvm, file = "Non_synchronized_A549_localpeaks.values.rnase.mvm")
saveRDS(fraction1.peak.ctrl.mvm, file = "Non_synchronized_A549_fraction1.peak.ctrl.mvm")
saveRDS(fraction25.peak.ctrl.mvm, file = "Non_synchronized_A549_fraction25.peak.ctrl.mvm")
saveRDS(fraction1.peak.ctrl.mvm, file = "Non_synchronized_A549_fraction1.peak.ctrl.mvm")
saveRDS(fraction25.peak.ctrl.mvm, file = "Non_synchronized_A549_fraction25.peak.ctrl.mvm")
saveRDS(precipitated.mvm, file = "Non_synchronized_A549_precipitated.mvm")
# zt
saveRDS(globalpeak.ctrl.zt, file = "Non_synchronized_A549_globalpeak.ctrl.zt")
saveRDS(globalpeak.value.ctrl.zt, file = "Non_synchronized_A549_globalpeak.value.ctrl.zt")
saveRDS(globalpeak.rnase.zt, file = "Non_synchronized_A549_globalpeak.rnase.zt")
saveRDS(globalpeak.value.rnase.zt, file = "Non_synchronized_A549_globalpeak.value.rnase.zt")
saveRDS(localpeaks.ctrl.zt, file = "Non_synchronized_A549_localpeaks.ctrl.zt")
saveRDS(localpeaks.values.ctrl.zt, file = "Non_synchronized_A549_localpeaks.values.ctrl.zt")
saveRDS(localpeaks.rnase.zt, file = "Non_synchronized_A549_localpeaks.rnase.zt")
saveRDS(localpeaks.values.rnase.zt, file = "Non_synchronized_A549_localpeaks.values.rnase.zt")
saveRDS(fraction1.peak.ctrl.zt, file = "Non_synchronized_A549_fraction1.peak.ctrl.zt")
saveRDS(fraction25.peak.ctrl.zt, file = "Non_synchronized_A549_fraction25.peak.ctrl.zt")
saveRDS(fraction1.peak.ctrl.zt, file = "Non_synchronized_A549_fraction1.peak.ctrl.zt")
saveRDS(fraction25.peak.ctrl.zt, file = "Non_synchronized_A549_fraction25.peak.ctrl.zt")
saveRDS(precipitated.zt, file = "Non_synchronized_A549_precipitated.zt")
# mms
saveRDS(globalpeak.ctrl.mms, file = "Non_synchronized_A549_globalpeak.ctrl.mms")
saveRDS(globalpeak.value.ctrl.mms, file = "Non_synchronized_A549_globalpeak.value.ctrl.mms")
saveRDS(globalpeak.rnase.mms, file = "Non_synchronized_A549_globalpeak.rnase.mms")
saveRDS(globalpeak.value.rnase.mms, file = "Non_synchronized_A549_globalpeak.value.rnase.mms")
saveRDS(localpeaks.ctrl.mms, file = "Non_synchronized_A549_localpeaks.ctrl.mms")
saveRDS(localpeaks.values.ctrl.mms, file = "Non_synchronized_A549_localpeaks.values.ctrl.mms")
saveRDS(localpeaks.rnase.mms, file = "Non_synchronized_A549_localpeaks.rnase.mms")
saveRDS(localpeaks.values.rnase.mms, file = "Non_synchronized_A549_localpeaks.values.rnase.mms")
saveRDS(fraction1.peak.ctrl.mms, file = "Non_synchronized_A549_fraction1.peak.ctrl.mms")
saveRDS(fraction25.peak.ctrl.mms, file = "Non_synchronized_A549_fraction25.peak.ctrl.mms")
saveRDS(fraction1.peak.ctrl.mms, file = "Non_synchronized_A549_fraction1.peak.ctrl.mms")
saveRDS(fraction25.peak.ctrl.mms, file = "Non_synchronized_A549_fraction25.peak.ctrl.mms")
saveRDS(precipitated.mms, file = "Non_synchronized_A549_precipitated.mms")
#mvm
globalpeak.ctrl.mvm <- readRDS("Non_synchronized_A549_globalpeak.ctrl.mvm")
globalpeak.value.ctrl.mvm <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.mvm")
globalpeak.rnase.mvm <- readRDS("Non_synchronized_A549_globalpeak.rnase.mvm")
globalpeak.value.rnase.mvm <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.mvm")
localpeaks.ctrl.mvm <- readRDS("Non_synchronized_A549_localpeaks.ctrl.mvm")
localpeaks.values.ctrl.mvm <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.mvm")
localpeaks.rnase.mvm <- readRDS("Non_synchronized_A549_localpeaks.rnase.mvm")
localpeaks.values.rnase.mvm <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.mvm")
fraction1.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mvm")
fraction25.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mvm")
fraction1.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mvm")
fraction25.peak.ctrl.mvm <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mvm")
precipitated.mvm <- readRDS("Non_synchronized_A549_precipitated.mvm")
#zt
globalpeak.ctrl.zt <- readRDS("Non_synchronized_A549_globalpeak.ctrl.zt")
globalpeak.value.ctrl.zt <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.zt")
globalpeak.rnase.zt <- readRDS("Non_synchronized_A549_globalpeak.rnase.zt")
globalpeak.value.rnase.zt <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.zt")
localpeaks.ctrl.zt <- readRDS("Non_synchronized_A549_localpeaks.ctrl.zt")
localpeaks.values.ctrl.zt <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.zt")
localpeaks.rnase.zt <- readRDS("Non_synchronized_A549_localpeaks.rnase.zt")
localpeaks.values.rnase.zt <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.zt")
fraction1.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.zt")
fraction1.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.zt")
fraction25.peak.ctrl.zt <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.zt")
precipitated.zt <- readRDS("Non_synchronized_A549_precipitated.zt")
#mms
globalpeak.ctrl.mms <- readRDS("Non_synchronized_A549_globalpeak.ctrl.mms")
globalpeak.value.ctrl.mms <- readRDS("Non_synchronized_A549_globalpeak.value.ctrl.mms")
globalpeak.rnase.mms <- readRDS("Non_synchronized_A549_globalpeak.rnase.mms")
globalpeak.value.rnase.mms <- readRDS("Non_synchronized_A549_globalpeak.value.rnase.mms")
localpeaks.ctrl.mms <- readRDS("Non_synchronized_A549_localpeaks.ctrl.mms")
localpeaks.values.ctrl.mms <- readRDS("Non_synchronized_A549_localpeaks.values.ctrl.mms")
localpeaks.rnase.mms <- readRDS("Non_synchronized_A549_localpeaks.rnase.mms")
localpeaks.values.rnase.mms <- readRDS("Non_synchronized_A549_localpeaks.values.rnase.mms")
fraction1.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mms")
fraction25.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mms")
fraction1.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction1.peak.ctrl.mms")
fraction25.peak.ctrl.mms <- readRDS("Non_synchronized_A549_fraction25.peak.ctrl.mms")
precipitated.mms <- readRDS("Non_synchronized_A549_precipitated.mms")
gshift <- gshift.mms
lshift <- lshift.mms
precipitated <- precipitated.mms
w.gshift <- 1
w.lshift <- 0
w.precipitated <- 0
parameters.raw <- cbind(gshift, lshift, precipitated)
rownames(parameters.raw) <- rownames(ctrl.mms)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
weight <- c(w.gshift, w.lshift, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
weight <- c(w.gshift, w.lshift, w.overlap, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
dim(parameters.scaled)
dim(parameters.raw)
parameters.raw <- cbind(gshift, lshift, precipitated)
rownames(parameters.raw) <- rownames(ctrl.mms)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
dim(parameters.raw)
gshift <- gshift.mms
lshift <- lshift.mms
precipitated <- precipitated.mms
w.gshift <- 1
w.lshift <- 0
w.precipitated <- 0
gshift <- gshift.mms
lshift <- lshift.mms
overlap <- overlap.mms
precipitated <- precipitated.mms
w.gshift <- 1
w.lshift <- 0
w.overlap <- 0
w.precipitated <- 0
#control group
peak.mms.ctrl <- c()
for (x in 1:dim(ctrl.mms)[1]){
peak.mms.ctrl[x] <- which(ctrl.mms[x,] == 1)
}
#RNase group
peak.mms.rnase <- c()
for (x in 1:dim(rnase.mms)[1]){
peak.mms.rnase[x] <- which(rnase.mms[x,] == 1)
}
#shift of global maxima
gshift.mms <- peak.mms.ctrl - peak.mms.rnase
#shift of local maxima
lshift.mms <- sample(1:100, length(shift.mms), replace = TRUE)
#overlap
overlap.mms <- sample(1:100, length(shift.mms), replace = TRUE)
#precipitated
precipitated.mms <- sample(1:2, length(shift.mms), replace = TRUE)
gshift <- gshift.mms
lshift <- lshift.mms
precipitated <- precipitated.mms
w.gshift <- 1
w.lshift <- 0
w.precipitated <- 0
parameters.raw <- cbind(gshift, lshift, precipitated)
rownames(parameters.raw) <- rownames(ctrl.mms)
#hier erst mal MMS, welche wir nehmen können wir noch entscheiden.
parameters.scaled <- apply(parameters.raw, 2, function(x) {
normalized <- (x-min(x))/(max(x)-min(x))
})
weight <- c(w.gshift, w.lshift, w.precipitated)
for (i in seq_along(weight)){
parameters.scaled[,i] <- parameters.scaled[,i]*weight[i]
}
parameters <- parameters.scaled
View(parameters)
wss <- sapply(1:5, function(x){
kmeans(parameters, centers = x, nstart = 100)$tot.withinss
})
library("ggplot2")
wss.df <- data.frame(values = wss)
ggplot(wss.df, aes(x = 1:length(wss), y = values))+
geom_line(col = "mediumvioletred")+
geom_point(col = "midnightblue")+
labs(x = "Number of clusters", y = "number of assigned proteins")+
theme(panel.border = element_rect(color="grey", fill = NA))
# n = Number of clusters
n <- 3
km.mms <- kmeans(parameters, centers = n, nstart = 100)
#Variablen der Normalisierungsmethode hier eintragen:
peak.ctrl <- peak.mms.ctrl
peak.rnase <- peak.mms.rnase
cluster <- km.mms$cluster
#abhängig davon ob es drei oder vier cluster gibt werden unterschiedliche Vektoren verwendet:
if (n == 3){
col <- c("springgreen", "violetred1", "cyan")
vjust <- c(1, -0.5, -0.5)
labels <- c("no shift", "left shift", "right shift")
}
if (n == 4){
col <- c("springgreen", "violetred1", "cyan", "orange")
vjust <- c(-0.5, -0.5, -0.5, -0.5)
labels <- c("left shift", "right shift", "no shift", "precipitated")
}
library("ggplot2")
#hier wird ein Datframe mit allen für den dotplot relevanten daten erstellt
peaks <- data.frame(peak.ctrl, peak.rnase, cluster)
#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = stat(count), y = ..count..),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
#Variablen der Normalisierungsmethode hier eintragen:
peak.ctrl <- peak.mms.ctrl
peak.rnase <- peak.mms.rnase
cluster <- km.mms$cluster
#abhängig davon ob es drei oder vier cluster gibt werden unterschiedliche Vektoren verwendet:
if (n == 3){
col <- c("springgreen", "violetred1", "cyan")
vjust <- c(1, -0.5, -0.5)
labels <- c("no shift", "left shift", "right shift")
}
if (n == 4){
col <- c("springgreen", "violetred1", "cyan", "orange")
vjust <- c(-0.5, -0.5, -0.5, -0.5)
labels <- c("left shift", "right shift", "no shift", "precipitated")
}
library("ggplot2")
#hier wird ein Datframe mit allen für den dotplot relevanten daten erstellt
peaks <- data.frame(peak.ctrl, peak.rnase, cluster)
#für den barplot muss der auch die Ergebnisse des Clusterings als Dataframe dargestellt werden
number.of.clusters <- data.frame(value = cluster)
#das cluster muss als factor dargestellt sein, vector geht nicht
peaks$cluster <- factor(peaks$cluster)
#hier wird der dotplot erstellt der die peaks gegeneinander aufträgt. Die Punkte werden abhängig von ihrer shiftart eingefärbt
dot.plot <- ggplot(peaks, aes(peak.ctrl,peak.rnase)) +
geom_point(aes(colour = cluster), shape = 19, alpha = 0.5, size = 2)+
labs(x = "Fraction of Control Peak", y = "Fraction of RNase Peak", title = "Peak distribution")+
coord_equal()+
scale_colour_manual(values = col,labels = labels)+
theme_light()
# hier wird ein Barplot erstellt der anzeigt, wie oft die shifttypes jeweils vorkommen
bar.plot <- ggplot(number.of.clusters, aes(factor(value)))+
geom_bar(fill = col
, width = 0.5)+
theme_minimal()+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.border = element_rect(color = "grey", fill = NA),
panel.background = element_rect(fill = "white", colour = NA))+
geom_text(stat = 'count',
aes(label = after_stat(count)),
vjust = vjust,
size = 2.5)
#hier werden die beiden plots zusammengefügt. Der barplot wird unten rechts klein angezeigt
dot.plot +
annotation_custom(grob = ggplotGrob(bar.plot),
xmin = 15,
xmax = 27,
ymin = -1,
ymax = 8)
#Variablen der Normalisierungsmethode hier eintragen:
peak.ctrl <- peak.mvm.ctrl
